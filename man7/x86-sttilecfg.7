'\" t
.nh
.TH "X86-STTILECFG" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
STTILECFG - STORE TILE CONFIGURATION
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
VEX.128.66.0F38.W0 49 !(11):000:bbb STTILECFG m512
T}	A	V/N.E.	AMX-TILE	T{
Store tile configuration in m512.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="sttilecfg.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:r/m (w)	N/A	N/A	N/A
.TE

.SH DESCRIPTION
The STTILECFG instruction takes a pointer to a 64-byte memory location
(described in Table 3-10
\[la]cpuid.html#tbl\-3\-10\[ra] in the “LDTILECFG—Load
Tile Configuration” entry) that will, after successful execution of this
instruction, contain the description of the tiles that were configured.
In order to configure tiles, the AMX-TILE bit in CPUID must be set and
the operating system has to have enabled the tiles architecture.

.PP
If the tiles are not configured, then STTILECFG stores 64B of zeros to
the indicated memory location.

.PP
Any attempt to execute the STTILECFG instruction inside an Intel TSX
transaction will result in a transaction abort.

.SH OPERATION
.SS STTILECFG MEM
.EX
if TILES_CONFIGURED == 0:
    //write 64 bytes of zeros at mem pointer
    buf[0..63] := 0
    write_memory(mem, 64, buf)
else:
    buf.byte[0] := tilecfg.palette_id
    buf.byte[1] := tilecfg.start_row
    buf.byte[2..15] := 0
    p := 16
    for n in 0 ... palette_table[tilecfg.palette_id].max_names-1:
        buf.word[p/2] := tilecfg.t[n].colsb
        p := p + 2
    if p < 47:
        buf.byte[p..47] := 0
    p := 48
    for n in 0 ... palette_table[tilecfg.palette_id].max_names-1:
        buf.byte[p++] := tilecfg.t[n].rows
    if p < 63:
        buf.byte[p..63] := 0
    write_memory(mem, 64, buf)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="sttilecfg.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
STTILECFGvoid _tile_storeconfig(void *);
.EE

.SH FLAGS AFFECTED
None.

.SH EXCEPTIONS
AMX-E2; see Section 2.10, “Intel® AMX Instruction Exception Classes,”
for details.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
