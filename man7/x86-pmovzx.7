'\" t
.nh
.TH "X86-PMOVZX" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
PMOVZX - PACKED MOVE WITH ZERO EXTEND
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0f 38 30 /r PMOVZXBW xmm1, xmm2/m64
T}	A	V/V	SSE4_1	T{
Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1.
T}
T{
66 0f 38 31 /r PMOVZXBD xmm1, xmm2/m32
T}	A	V/V	SSE4_1	T{
Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 32-bit integers in xmm1.
T}
T{
66 0f 38 32 /r PMOVZXBQ xmm1, xmm2/m16
T}	A	V/V	SSE4_1	T{
Zero extend 2 packed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed 64-bit integers in xmm1.
T}
T{
66 0f 38 33 /r PMOVZXWD xmm1, xmm2/m64
T}	A	V/V	SSE4_1	T{
Zero extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 32-bit integers in xmm1.
T}
T{
66 0f 38 34 /r PMOVZXWQ xmm1, xmm2/m32
T}	A	V/V	SSE4_1	T{
Zero extend 2 packed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed 64-bit integers in xmm1.
T}
T{
66 0f 38 35 /r PMOVZXDQ xmm1, xmm2/m64
T}	A	V/V	SSE4_1	T{
Zero extend 2 packed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed 64-bit integers in xmm1.
T}
T{
VEX.128.66.0F38.WIG 30 /r VPMOVZXBW xmm1, xmm2/m64
T}	A	V/V	AVX	T{
Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1.
T}
T{
VEX.128.66.0F38.WIG 31 /r VPMOVZXBD xmm1, xmm2/m32
T}	A	V/V	AVX	T{
Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 32-bit integers in xmm1.
T}
T{
VEX.128.66.0F38.WIG 32 /r VPMOVZXBQ xmm1, xmm2/m16
T}	A	V/V	AVX	T{
Zero extend 2 packed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed 64-bit integers in xmm1.
T}
T{
VEX.128.66.0F38.WIG 33 /r VPMOVZXWD xmm1, xmm2/m64
T}	A	V/V	AVX	T{
Zero extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 32-bit integers in xmm1.
T}
T{
VEX.128.66.0F38.WIG 34 /r VPMOVZXWQ xmm1, xmm2/m32
T}	A	V/V	AVX	T{
Zero extend 2 packed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed 64-bit integers in xmm1.
T}
T{
VEX.128.66.0F 38.WIG 35 /r VPMOVZXDQ xmm1, xmm2/m64
T}	A	V/V	AVX	T{
Zero extend 2 packed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed 64-bit integers in xmm1.
T}
T{
VEX.256.66.0F38.WIG 30 /r VPMOVZXBW ymm1, xmm2/m128
T}	A	V/V	AVX2	T{
Zero extend 16 packed 8-bit integers in xmm2/m128 to 16 packed 16-bit integers in ymm1.
T}
T{
VEX.256.66.0F38.WIG 31 /r VPMOVZXBD ymm1, xmm2/m64
T}	A	V/V	AVX2	T{
Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 32-bit integers in ymm1.
T}
T{
VEX.256.66.0F38.WIG 32 /r VPMOVZXBQ ymm1, xmm2/m32
T}	A	V/V	AVX2	T{
Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 64-bit integers in ymm1.
T}
T{
VEX.256.66.0F38.WIG 33 /r VPMOVZXWD ymm1, xmm2/m128
T}	A	V/V	AVX2	T{
Zero extend 8 packed 16-bit integers xmm2/m128 to 8 packed 32-bit integers in ymm1.
T}
T{
VEX.256.66.0F38.WIG 34 /r VPMOVZXWQ ymm1, xmm2/m64
T}	A	V/V	AVX2	T{
Zero extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 64-bit integers in xmm1.
T}
T{
VEX.256.66.0F38.WIG 35 /r VPMOVZXDQ ymm1, xmm2/m128
T}	A	V/V	AVX2	T{
Zero extend 4 packed 32-bit integers in xmm2/m128 to 4 packed 64-bit integers in ymm1.
T}
T{
EVEX.128.66.0F38 30.WIG /r VPMOVZXBW xmm1 {k1}{z}, xmm2/m64
T}	B	V/V	AVX512VL AVX512BW	T{
Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 16-bit integers in xmm1.
T}
T{
EVEX.256.66.0F38.WIG 30 /r VPMOVZXBW ymm1 {k1}{z}, xmm2/m128
T}	B	V/V	AVX512VL AVX512BW	T{
Zero extend 16 packed 8-bit integers in xmm2/m128 to 16 packed 16-bit integers in ymm1.
T}
T{
EVEX.512.66.0F38.WIG 30 /r VPMOVZXBW zmm1 {k1}{z}, ymm2/m256
T}	B	V/V	AVX512BW	T{
Zero extend 32 packed 8-bit integers in ymm2/m256 to 32 packed 16-bit integers in zmm1.
T}
T{
EVEX.128.66.0F38.WIG 31 /r VPMOVZXBD xmm1 {k1}{z}, xmm2/m32
T}	C	V/V	AVX512VL AVX512F	T{
Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 32-bit integers in xmm1 subject to writemask k1.
T}
T{
EVEX.256.66.0F38.WIG 31 /r VPMOVZXBD ymm1 {k1}{z}, xmm2/m64
T}	C	V/V	AVX512VL AVX512F	T{
Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 32-bit integers in ymm1 subject to writemask k1.
T}
T{
EVEX.512.66.0F38.WIG 31 /r VPMOVZXBD zmm1 {k1}{z}, xmm2/m128
T}	C	V/V	AVX512F	T{
Zero extend 16 packed 8-bit integers in xmm2/m128 to 16 packed 32-bit integers in zmm1 subject to writemask k1.
T}
T{
EVEX.128.66.0F38.WIG 32 /r VPMOVZXBQ xmm1 {k1}{z}, xmm2/m16
T}	D	V/V	AVX512VL AVX512F	T{
Zero extend 2 packed 8-bit integers in the low 2 bytes of xmm2/m16 to 2 packed 64-bit integers in xmm1 subject to writemask k1.
T}
T{
EVEX.256.66.0F38.WIG 32 /r VPMOVZXBQ ymm1 {k1}{z}, xmm2/m32
T}	D	V/V	AVX512VL AVX512F	T{
Zero extend 4 packed 8-bit integers in the low 4 bytes of xmm2/m32 to 4 packed 64-bit integers in ymm1 subject to writemask k1.
T}
T{
EVEX.512.66.0F38.WIG 32 /r VPMOVZXBQ zmm1 {k1}{z}, xmm2/m64
T}	D	V/V	AVX512F	T{
Zero extend 8 packed 8-bit integers in the low 8 bytes of xmm2/m64 to 8 packed 64-bit integers in zmm1 subject to writemask k1.
T}
T{
EVEX.128.66.0F38.WIG 33 /r VPMOVZXWD xmm1 {k1}{z}, xmm2/m64
T}	B	V/V	AVX512VL AVX512F	T{
Zero extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 32-bit integers in xmm1 subject to writemask k1.
T}
T{
EVEX.256.66.0F38.WIG 33 /r VPMOVZXWD ymm1 {k1}{z}, xmm2/m128
T}	B	V/V	AVX512VL AVX512F	T{
Zero extend 8 packed 16-bit integers in xmm2/m128 to 8 packed 32-bit integers in zmm1 subject to writemask k1.
T}
T{
EVEX.512.66.0F38.WIG 33 /r VPMOVZXWD zmm1 {k1}{z}, ymm2/m256
T}	B	V/V	AVX512F	T{
Zero extend 16 packed 16-bit integers in ymm2/m256 to 16 packed 32-bit integers in zmm1 subject to writemask k1.
T}
T{
EVEX.128.66.0F38.WIG 34 /r VPMOVZXWQ xmm1 {k1}{z}, xmm2/m32
T}	C	V/V	AVX512VL AVX512F	T{
Zero extend 2 packed 16-bit integers in the low 4 bytes of xmm2/m32 to 2 packed 64-bit integers in xmm1 subject to writemask k1.
T}
T{
EVEX.256.66.0F38.WIG 34 /r VPMOVZXWQ ymm1 {k1}{z}, xmm2/m64
T}	C	V/V	AVX512VL AVX512F	T{
Zero extend 4 packed 16-bit integers in the low 8 bytes of xmm2/m64 to 4 packed 64-bit integers in ymm1 subject to writemask k1.
T}
T{
EVEX.512.66.0F38.WIG 34 /r VPMOVZXWQ zmm1 {k1}{z}, xmm2/m128
T}	C	V/V	AVX512F	T{
Zero extend 8 packed 16-bit integers in xmm2/m128 to 8 packed 64-bit integers in zmm1 subject to writemask k1.
T}
T{
EVEX.128.66.0F38.W0 35 /r VPMOVZXDQ xmm1 {k1}{z}, xmm2/m64
T}	B	V/V	AVX512VL AVX512F	T{
Zero extend 2 packed 32-bit integers in the low 8 bytes of xmm2/m64 to 2 packed 64-bit integers in zmm1 using writemask k1.
T}
T{
EVEX.256.66.0F38.W0 35 /r VPMOVZXDQ ymm1 {k1}{z}, xmm2/m128
T}	B	V/V	AVX512VL AVX512F	T{
Zero extend 4 packed 32-bit integers in xmm2/m128 to 4 packed 64-bit integers in zmm1 using writemask k1.
T}
T{
EVEX.512.66.0F38.W0 35 /r VPMOVZXDQ zmm1 {k1}{z}, ymm2/m256
T}	B	V/V	AVX512F	T{
Zero extend 8 packed 32-bit integers in ymm2/m256 to 8 packed 64-bit integers in zmm1 using writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	Half Mem	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
C	Quarter Mem	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
D	Eighth Mem	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Legacy, VEX, and EVEX encoded versions: Packed byte, word, or dword
integers starting from the low bytes of the source operand (second
operand) are zero extended to word, dword, or quadword integers and
stored in packed signed bytes the destination operand.

.PP
128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding
destination register remain unchanged.

.PP
VEX.128 encoded version: Bits (MAXVL-1:128) of the corresponding
destination register are zeroed.

.PP
VEX.256 encoded version: Bits (MAXVL-1:256) of the corresponding
destination register are zeroed.

.PP
EVEX encoded versions: Packed dword integers starting from the low bytes
of the source operand (second operand) are zero extended to quadword
integers and stored to the destination operand under the writemask.The
destination register is XMM, YMM or ZMM Register.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.SH OPERATION
.SS PACKED_ZERO_EXTEND_BYTE_TO_WORD(DEST, SRC)  href="pmovzx.html#packed_zero_extend_byte_to_word-dest--src-"
class="anchor">¶

.EX
DEST[15:0] := ZeroExtend(SRC[7:0]);
DEST[31:16] := ZeroExtend(SRC[15:8]);
DEST[47:32] := ZeroExtend(SRC[23:16]);
DEST[63:48] := ZeroExtend(SRC[31:24]);
DEST[79:64] := ZeroExtend(SRC[39:32]);
DEST[95:80] := ZeroExtend(SRC[47:40]);
DEST[111:96] := ZeroExtend(SRC[55:48]);
DEST[127:112] := ZeroExtend(SRC[63:56]);
.EE

.SS PACKED_ZERO_EXTEND_BYTE_TO_DWORD(DEST, SRC)  href="pmovzx.html#packed_zero_extend_byte_to_dword-dest--src-"
class="anchor">¶

.EX
DEST[31:0] := ZeroExtend(SRC[7:0]);
DEST[63:32] := ZeroExtend(SRC[15:8]);
DEST[95:64] := ZeroExtend(SRC[23:16]);
DEST[127:96] := ZeroExtend(SRC[31:24]);
.EE

.SS PACKED_ZERO_EXTEND_BYTE_TO_QWORD(DEST, SRC)  href="pmovzx.html#packed_zero_extend_byte_to_qword-dest--src-"
class="anchor">¶

.EX
DEST[63:0] := ZeroExtend(SRC[7:0]);
DEST[127:64] := ZeroExtend(SRC[15:8]);
.EE

.SS PACKED_ZERO_EXTEND_WORD_TO_DWORD(DEST, SRC)  href="pmovzx.html#packed_zero_extend_word_to_dword-dest--src-"
class="anchor">¶

.EX
DEST[31:0] := ZeroExtend(SRC[15:0]);
DEST[63:32] := ZeroExtend(SRC[31:16]);
DEST[95:64] := ZeroExtend(SRC[47:32]);
DEST[127:96] := ZeroExtend(SRC[63:48]);
.EE

.SS PACKED_ZERO_EXTEND_WORD_TO_QWORD(DEST, SRC)  href="pmovzx.html#packed_zero_extend_word_to_qword-dest--src-"
class="anchor">¶

.EX
DEST[63:0] := ZeroExtend(SRC[15:0]);
DEST[127:64] := ZeroExtend(SRC[31:16]);
.EE

.SS PACKED_ZERO_EXTEND_DWORD_TO_QWORD(DEST, SRC)  href="pmovzx.html#packed_zero_extend_dword_to_qword-dest--src-"
class="anchor">¶

.EX
DEST[63:0] := ZeroExtend(SRC[31:0]);
DEST[127:64] := ZeroExtend(SRC[63:32]);
.EE

.SS VPMOVZXBW (EVEX ENCODED VERSIONS)  href="pmovzx.html#vpmovzxbw--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (8, 128), (16, 256), (32, 512)
Packed_Zero_Extend_BYTE_to_WORD(TMP_DEST[127:0], SRC[63:0])
IF VL >= 256
    Packed_Zero_Extend_BYTE_to_WORD(TMP_DEST[255:128], SRC[127:64])
FI;
IF VL >= 512
    Packed_Zero_Extend_BYTE_to_WORD(TMP_DEST[383:256], SRC[191:128])
    Packed_Zero_Extend_BYTE_to_WORD(TMP_DEST[511:384], SRC[255:192])
FI;
FOR j := 0 TO KL-1
    i := j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+15:i] := TEMP_DEST[i+15:i]
        ELSE
            IF *merging-masking*
                        ; merging-masking
                THEN *DEST[i+15:i] remains unchanged*
                ELSE *zeroing-masking*
                            ; zeroing-masking
                    DEST[i+15:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VPMOVZXBD (EVEX ENCODED VERSIONS)  href="pmovzx.html#vpmovzxbd--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
Packed_Zero_Extend_BYTE_to_DWORD(TMP_DEST[127:0], SRC[31:0])
IF VL >= 256
    Packed_Zero_Extend_BYTE_to_DWORD(TMP_DEST[255:128], SRC[63:32])
FI;
IF VL >= 512
    Packed_Zero_Extend_BYTE_to_DWORD(TMP_DEST[383:256], SRC[95:64])
    Packed_Zero_Extend_BYTE_to_DWORD(TMP_DEST[511:384], SRC[127:96])
FI;
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i] := TEMP_DEST[i+31:i]
        ELSE
            IF *merging-masking*
                        ; merging-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE *zeroing-masking*
                            ; zeroing-masking
                    DEST[i+31:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VPMOVZXBQ (EVEX ENCODED VERSIONS)  href="pmovzx.html#vpmovzxbq--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
Packed_Zero_Extend_BYTE_to_QWORD(TMP_DEST[127:0], SRC[15:0])
IF VL >= 256
    Packed_Zero_Extend_BYTE_to_QWORD(TMP_DEST[255:128], SRC[31:16])
FI;
IF VL >= 512
    Packed_Zero_Extend_BYTE_to_QWORD(TMP_DEST[383:256], SRC[47:32])
    Packed_Zero_Extend_BYTE_to_QWORD(TMP_DEST[511:384], SRC[63:48])
FI;
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := TEMP_DEST[i+63:i]
        ELSE
            IF *merging-masking*
                        ; merging-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE *zeroing-masking*
                            ; zeroing-masking
                    DEST[i+63:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VPMOVZXWD (EVEX ENCODED VERSIONS)  href="pmovzx.html#vpmovzxwd--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
Packed_Zero_Extend_WORD_to_DWORD(TMP_DEST[127:0], SRC[63:0])
IF VL >= 256
    Packed_Zero_Extend_WORD_to_DWORD(TMP_DEST[255:128], SRC[127:64])
FI;
IF VL >= 512
    Packed_Zero_Extend_WORD_to_DWORD(TMP_DEST[383:256], SRC[191:128])
    Packed_Zero_Extend_WORD_to_DWORD(TMP_DEST[511:384], SRC[256:192])
FI;
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i] := TEMP_DEST[i+31:i]
        ELSE
            IF *merging-masking*
                        ; merging-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE *zeroing-masking*
                            ; zeroing-masking
                    DEST[i+31:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VPMOVZXWQ (EVEX ENCODED VERSIONS)  href="pmovzx.html#vpmovzxwq--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
Packed_Zero_Extend_WORD_to_QWORD(TMP_DEST[127:0], SRC[31:0])
IF VL >= 256
    Packed_Zero_Extend_WORD_to_QWORD(TMP_DEST[255:128], SRC[63:32])
FI;
IF VL >= 512
    Packed_Zero_Extend_WORD_to_QWORD(TMP_DEST[383:256], SRC[95:64])
    Packed_Zero_Extend_WORD_to_QWORD(TMP_DEST[511:384], SRC[127:96])
FI;
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := TEMP_DEST[i+63:i]
        ELSE
            IF *merging-masking*
                        ; merging-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE *zeroing-masking*
                            ; zeroing-masking
                    DEST[i+63:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VPMOVZXDQ (EVEX ENCODED VERSIONS)  href="pmovzx.html#vpmovzxdq--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
Packed_Zero_Extend_DWORD_to_QWORD(TEMP_DEST[127:0], SRC[63:0])
IF VL >= 256
    Packed_Zero_Extend_DWORD_to_QWORD(TEMP_DEST[255:128], SRC[127:64])
FI;
IF VL >= 512
    Packed_Zero_Extend_DWORD_to_QWORD(TEMP_DEST[383:256], SRC[191:128])
    Packed_Zero_Extend_DWORD_to_QWORD(TEMP_DEST[511:384], SRC[255:192])
FI;
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := TEMP_DEST[i+63:i]
        ELSE
            IF *merging-masking*
                        ; merging-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE *zeroing-masking*
                            ; zeroing-masking
                    DEST[i+63:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VPMOVZXBW (VEX.256 ENCODED VERSION)  href="pmovzx.html#vpmovzxbw--vex-256-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_BYTE_to_WORD(DEST[127:0], SRC[63:0])
Packed_Zero_Extend_BYTE_to_WORD(DEST[255:128], SRC[127:64])
DEST[MAXVL-1:256] := 0
.EE

.SS VPMOVZXBD (VEX.256 ENCODED VERSION)  href="pmovzx.html#vpmovzxbd--vex-256-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_BYTE_to_DWORD(DEST[127:0], SRC[31:0])
Packed_Zero_Extend_BYTE_to_DWORD(DEST[255:128], SRC[63:32])
DEST[MAXVL-1:256] := 0
.EE

.SS VPMOVZXBQ (VEX.256 ENCODED VERSION)  href="pmovzx.html#vpmovzxbq--vex-256-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_BYTE_to_QWORD(DEST[127:0], SRC[15:0])
Packed_Zero_Extend_BYTE_to_QWORD(DEST[255:128], SRC[31:16])
DEST[MAXVL-1:256] := 0
.EE

.SS VPMOVZXWD (VEX.256 ENCODED VERSION)  href="pmovzx.html#vpmovzxwd--vex-256-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_WORD_to_DWORD(DEST[127:0], SRC[63:0])
Packed_Zero_Extend_WORD_to_DWORD(DEST[255:128], SRC[127:64])
DEST[MAXVL-1:256] := 0
.EE

.SS VPMOVZXWQ (VEX.256 ENCODED VERSION)  href="pmovzx.html#vpmovzxwq--vex-256-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_WORD_to_QWORD(DEST[127:0], SRC[31:0])
Packed_Zero_Extend_WORD_to_QWORD(DEST[255:128], SRC[63:32])
DEST[MAXVL-1:256] := 0
.EE

.SS VPMOVZXDQ (VEX.256 ENCODED VERSION)  href="pmovzx.html#vpmovzxdq--vex-256-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_DWORD_to_QWORD(DEST[127:0], SRC[63:0])
Packed_Zero_Extend_DWORD_to_QWORD(DEST[255:128], SRC[127:64])
DEST[MAXVL-1:256] := 0
.EE

.SS VPMOVZXBW (VEX.128 ENCODED VERSION)  href="pmovzx.html#vpmovzxbw--vex-128-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_BYTE_to_WORD()
DEST[MAXVL-1:128] := 0
.EE

.SS VPMOVZXBD (VEX.128 ENCODED VERSION)  href="pmovzx.html#vpmovzxbd--vex-128-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_BYTE_to_DWORD()
DEST[MAXVL-1:128] := 0
.EE

.SS VPMOVZXBQ (VEX.128 ENCODED VERSION)  href="pmovzx.html#vpmovzxbq--vex-128-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_BYTE_to_QWORD()
DEST[MAXVL-1:128] := 0
.EE

.SS VPMOVZXWD (VEX.128 ENCODED VERSION)  href="pmovzx.html#vpmovzxwd--vex-128-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_WORD_to_DWORD()
DEST[MAXVL-1:128] := 0
.EE

.SS VPMOVZXWQ (VEX.128 ENCODED VERSION)  href="pmovzx.html#vpmovzxwq--vex-128-encoded-version-"
class="anchor">¶

.EX
Packed_Zero_Extend_WORD_to_QWORD()
DEST[MAXVL-1:128] := 0
.EE

.SS VPMOVZXDQ (VEX.128 ENCODED VERSION  href="pmovzx.html#vpmovzxdq--vex-128-encoded-version"
class="anchor">¶

.EX
Packed_Zero_Extend_DWORD_to_QWORD()
DEST[MAXVL-1:128] := 0
.EE

.SS PMOVZXBW
.EX
Packed_Zero_Extend_BYTE_to_WORD()
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS PMOVZXBD
.EX
Packed_Zero_Extend_BYTE_to_DWORD()
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS PMOVZXBQ
.EX
Packed_Zero_Extend_BYTE_to_QWORD()
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS PMOVZXWD
.EX
Packed_Zero_Extend_WORD_to_DWORD()
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS PMOVZXWQ
.EX
Packed_Zero_Extend_WORD_to_QWORD()
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS PMOVZXDQ
.EX
Packed_Zero_Extend_DWORD_to_QWORD()
DEST[MAXVL-1:128] (Unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="pmovzx.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VPMOVZXBW __m512i _mm512_cvtepu8_epi16(__m256i a);

VPMOVZXBW __m512i _mm512_mask_cvtepu8_epi16(__m512i a, __mmask32 k, __m256i b);

VPMOVZXBW __m512i _mm512_maskz_cvtepu8_epi16( __mmask32 k, __m256i b);

VPMOVZXBD __m512i _mm512_cvtepu8_epi32(__m128i a);

VPMOVZXBD __m512i _mm512_mask_cvtepu8_epi32(__m512i a, __mmask16 k, __m128i b);

VPMOVZXBD __m512i _mm512_maskz_cvtepu8_epi32( __mmask16 k, __m128i b);

VPMOVZXBQ __m512i _mm512_cvtepu8_epi64(__m128i a);

VPMOVZXBQ __m512i _mm512_mask_cvtepu8_epi64(__m512i a, __mmask8 k, __m128i b);

VPMOVZXBQ __m512i _mm512_maskz_cvtepu8_epi64( __mmask8 k, __m128i a);

VPMOVZXDQ __m512i _mm512_cvtepu32_epi64(__m256i a);

VPMOVZXDQ __m512i _mm512_mask_cvtepu32_epi64(__m512i a, __mmask8 k, __m256i b);

VPMOVZXDQ __m512i _mm512_maskz_cvtepu32_epi64( __mmask8 k, __m256i a);

VPMOVZXWD __m512i _mm512_cvtepu16_epi32(__m128i a);

VPMOVZXWD __m512i _mm512_mask_cvtepu16_epi32(__m512i a, __mmask16 k, __m128i b);

VPMOVZXWD __m512i _mm512_maskz_cvtepu16_epi32(__mmask16 k, __m128i a);

VPMOVZXWQ __m512i _mm512_cvtepu16_epi64(__m256i a);

VPMOVZXWQ __m512i _mm512_mask_cvtepu16_epi64(__m512i a, __mmask8 k, __m256i b);

VPMOVZXWQ __m512i _mm512_maskz_cvtepu16_epi64( __mmask8 k, __m256i a);

VPMOVZXBW __m256i _mm256_cvtepu8_epi16(__m256i a);

VPMOVZXBW __m256i _mm256_mask_cvtepu8_epi16(__m256i a, __mmask16 k, __m128i b);

VPMOVZXBW __m256i _mm256_maskz_cvtepu8_epi16( __mmask16 k, __m128i b);

VPMOVZXBD __m256i _mm256_cvtepu8_epi32(__m128i a);

VPMOVZXBD __m256i _mm256_mask_cvtepu8_epi32(__m256i a, __mmask8 k, __m128i b);

VPMOVZXBD __m256i _mm256_maskz_cvtepu8_epi32( __mmask8 k, __m128i b);

VPMOVZXBQ __m256i _mm256_cvtepu8_epi64(__m128i a);

VPMOVZXBQ __m256i _mm256_mask_cvtepu8_epi64(__m256i a, __mmask8 k, __m128i b);

VPMOVZXBQ __m256i _mm256_maskz_cvtepu8_epi64( __mmask8 k, __m128i a);

VPMOVZXDQ __m256i _mm256_cvtepu32_epi64(__m128i a);

VPMOVZXDQ __m256i _mm256_mask_cvtepu32_epi64(__m256i a, __mmask8 k, __m128i b);

VPMOVZXDQ __m256i _mm256_maskz_cvtepu32_epi64( __mmask8 k, __m128i a);

VPMOVZXWD __m256i _mm256_cvtepu16_epi32(__m128i a);

VPMOVZXWD __m256i _mm256_mask_cvtepu16_epi32(__m256i a, __mmask16 k, __m128i b);

VPMOVZXWD __m256i _mm256_maskz_cvtepu16_epi32(__mmask16 k, __m128i a);

VPMOVZXWQ __m256i _mm256_cvtepu16_epi64(__m128i a);

VPMOVZXWQ __m256i _mm256_mask_cvtepu16_epi64(__m256i a, __mmask8 k, __m128i b);

VPMOVZXWQ __m256i _mm256_maskz_cvtepu16_epi64( __mmask8 k, __m128i a);

VPMOVZXBW __m128i _mm_mask_cvtepu8_epi16(__m128i a, __mmask8 k, __m128i b);

VPMOVZXBW __m128i _mm_maskz_cvtepu8_epi16( __mmask8 k, __m128i b);

VPMOVZXBD __m128i _mm_mask_cvtepu8_epi32(__m128i a, __mmask8 k, __m128i b);

VPMOVZXBD __m128i _mm_maskz_cvtepu8_epi32( __mmask8 k, __m128i b);

VPMOVZXBQ __m128i _mm_mask_cvtepu8_epi64(__m128i a, __mmask8 k, __m128i b);

VPMOVZXBQ __m128i _mm_maskz_cvtepu8_epi64( __mmask8 k, __m128i a);

VPMOVZXDQ __m128i _mm_mask_cvtepu32_epi64(__m128i a, __mmask8 k, __m128i b);

VPMOVZXDQ __m128i _mm_maskz_cvtepu32_epi64( __mmask8 k, __m128i a);

VPMOVZXWD __m128i _mm_mask_cvtepu16_epi32(__m128i a, __mmask16 k, __m128i b);

VPMOVZXWD __m128i _mm_maskz_cvtepu16_epi32(__mmask8 k, __m128i a);

VPMOVZXWQ __m128i _mm_mask_cvtepu16_epi64(__m128i a, __mmask8 k, __m128i b);

VPMOVZXWQ __m128i _mm_maskz_cvtepu16_epi64( __mmask8 k, __m128i a);

PMOVZXBW __m128i _mm_ cvtepu8_epi16 ( __m128i a);

PMOVZXBD __m128i _mm_ cvtepu8_epi32 ( __m128i a);

PMOVZXBQ __m128i _mm_ cvtepu8_epi64 ( __m128i a);

PMOVZXWD __m128i _mm_ cvtepu16_epi32 ( __m128i a);

PMOVZXWQ __m128i _mm_ cvtepu16_epi64 ( __m128i a);

PMOVZXDQ __m128i _mm_ cvtepu32_epi64 ( __m128i a);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="pmovzx.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Table
2-22, “Type 5 Class Exception Conditions.”

.PP
EVEX-encoded instruction, see Table
2-51, “Type E5 Class Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If VEX.vvvv != 1111B, or EVEX.vvvv != 1111B.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
