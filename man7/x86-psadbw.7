'\" t
.nh
.TH "X86-PSADBW" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
PSADBW - COMPUTE SUM OF ABSOLUTE DIFFERENCES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
NP 0F F6 /r1 PSADBW mm1, mm2/m64	A	V/V	SSE	T{
Computes the absolute differences of the packed unsigned byte integers from mm2 /m64 and mm1; differences are then summed to produce an unsigned word integer result.
T}
T{
66 0F F6 /r PSADBW xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Computes the absolute differences of the packed unsigned byte integers from xmm2 /m128 and xmm1; the 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results.
T}
T{
VEX.128.66.0F.WIG F6 /r VPSADBW xmm1, xmm2, xmm3/m128
T}	B	V/V	AVX	T{
Computes the absolute differences of the packed unsigned byte integers from xmm3 /m128 and xmm2; the 8 low differences and 8 high differences are then summed separately to produce two unsigned word integer results.
T}
T{
VEX.256.66.0F.WIG F6 /r VPSADBW ymm1, ymm2, ymm3/m256
T}	B	V/V	AVX2	T{
Computes the absolute differences of the packed unsigned byte integers from ymm3 /m256 and ymm2; then each consecutive 8 differences are summed separately to produce four unsigned word integer results.
T}
T{
EVEX.128.66.0F.WIG F6 /r VPSADBW xmm1, xmm2, xmm3/m128
T}	C	V/V	AVX512VL AVX512BW	T{
Computes the absolute differences of the packed unsigned byte integers from xmm3 /m128 and xmm2; then each consecutive 8 differences are summed separately to produce two unsigned word integer results.
T}
T{
EVEX.256.66.0F.WIG F6 /r VPSADBW ymm1, ymm2, ymm3/m256
T}	C	V/V	AVX512VL AVX512BW	T{
Computes the absolute differences of the packed unsigned byte integers from ymm3 /m256 and ymm2; then each consecutive 8 differences are summed separately to produce four unsigned word integer results.
T}
T{
EVEX.512.66.0F.WIG F6 /r VPSADBW zmm1, zmm2, zmm3/m512
T}	C	V/V	AVX512BW	T{
Computes the absolute differences of the packed unsigned byte integers from zmm3 /m512 and zmm2; then each consecutive 8 differences are summed separately to produce eight unsigned word integer results.
T}
.TE

.PP
.RS

.PP
1\&. See note in Section 2.5, “Intel® AVX and Intel® SSE Instruction
Exception Classification,” in the Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 2A, and Section
23.25.3, “Exception Conditions of Legacy SIMD Instructions Operating
on MMX Registers,” in the Intel® 64 and IA-32 Architectures
Software Developer’s Manual, Volume 3B.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Full Mem	ModRM:reg (w)	EVEX.vvvv	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Computes the absolute value of the difference of 8 unsigned byte
integers from the source operand (second operand) and from the
destination operand (first operand). These 8 differences are then summed
to produce an unsigned word integer result that is stored in the
destination operand. Figure 4-14
\[la]psadbw.html#fig\-4\-14\[ra] shows the
operation of the PSADBW instruction when using 64-bit operands.

.PP
When operating on 64-bit operands, the word integer result is stored in
the low word of the destination operand, and the remaining bytes in the
destination operand are cleared to all 0s.

.PP
When operating on 128-bit operands, two packed results are computed.
Here, the 8 low-order bytes of the source and destination operands are
operated on to produce a word result that is stored in the low word of
the destination operand, and the 8 high-order bytes are operated on to
produce a word result that is stored in bits 64 through 79 of the
destination operand. The remaining bytes of the destination operand are
cleared.

.PP
For 256-bit version, the third group of 8 differences are summed to
produce an unsigned word in bits[143:128] of the destination register
and the fourth group of 8 differences are summed to produce an unsigned
word in bits[207:192] of the destination register. The remaining words
of the destination are set to 0.

.PP
For 512-bit version, the fifth group result is stored in bits
[271:256] of the destination. The result from the sixth group is
stored in bits [335:320]\&. The results for the seventh and eighth group
are stored respectively in bits [399:384] and bits [463:447],
respectively. The remaining bits in the destination are set to 0.

.PP
In 64-bit mode and not encoded by VEX/EVEX prefix, using a REX prefix in
the form of REX.R permits this instruction to access additional
registers (XMM8-XMM15).

.PP
Legacy SSE version: The source operand can be an MMX technology register
or a 64-bit memory location. The destination operand is an MMX
technology register.

.PP
128-bit Legacy SSE version: The first source operand and destination
register are XMM registers. The second source operand is an XMM register
or a 128-bit memory location. Bits (MAXVL-1:128) of the corresponding
ZMM destination register remain unchanged.

.PP
VEX.128 and EVEX.128 encoded versions: The first source operand and
destination register are XMM registers. The second source operand is an
XMM register or a 128-bit memory location. Bits (MAXVL-1:128) of the
corresponding ZMM register are zeroed.

.PP
VEX.256 and EVEX.256 encoded versions: The first source operand and
destination register are YMM registers. The second source operand is an
YMM register or a 256-bit memory location. Bits (MAXVL-1:256) of the
corresponding ZMM register are zeroed.

.PP
EVEX.512 encoded version: The first source operand and destination
register are ZMM registers. The second source operand is a ZMM register
or a 512-bit memory location.

.SH OPERATION
.SS VPSADBW (EVEX ENCODED VERSIONS)  href="psadbw.html#vpsadbw--evex-encoded-versions-"
class="anchor">¶

.EX
VL = 128, 256, 512
TEMP0 := ABS(SRC1[7:0] - SRC2[7:0])
(* Repeat operation for bytes 1 through 15 *)
TEMP15 := ABS(SRC1[127:120] - SRC2[127:120])
DEST[15:0] := SUM(TEMP0:TEMP7)
DEST[63:16] := 000000000000H
DEST[79:64] := SUM(TEMP8:TEMP15)
DEST[127:80] := 00000000000H
IF VL >= 256
    (* Repeat operation for bytes 16 through 31*)
    TEMP31 := ABS(SRC1[255:248] - SRC2[255:248])
    DEST[143:128] := SUM(TEMP16:TEMP23)
    DEST[191:144] := 000000000000H
    DEST[207:192] := SUM(TEMP24:TEMP31)
    DEST[223:208] := 00000000000H
FI;
IF VL >= 512
(* Repeat operation for bytes 32 through 63*)
    TEMP63 := ABS(SRC1[511:504] - SRC2[511:504])
    DEST[271:256] := SUM(TEMP0:TEMP7)
    DEST[319:272] := 000000000000H
    DEST[335:320] := SUM(TEMP8:TEMP15)
    DEST[383:336] := 00000000000H
    DEST[399:384] := SUM(TEMP16:TEMP23)
    DEST[447:400] := 000000000000H
    DEST[463:448] := SUM(TEMP24:TEMP31)
    DEST[511:464] := 00000000000H
FI;
DEST[MAXVL-1:VL] := 0
.EE

.SS VPSADBW (VEX.256 ENCODED VERSION)  href="psadbw.html#vpsadbw--vex-256-encoded-version-"
class="anchor">¶

.EX
TEMP0 := ABS(SRC1[7:0] - SRC2[7:0])
(* Repeat operation for bytes 2 through 30*)
TEMP31 := ABS(SRC1[255:248] - SRC2[255:248])
DEST[15:0] := SUM(TEMP0:TEMP7)
DEST[63:16] := 000000000000H
DEST[79:64] := SUM(TEMP8:TEMP15)
DEST[127:80] := 00000000000H
DEST[143:128] := SUM(TEMP16:TEMP23)
DEST[191:144] := 000000000000H
DEST[207:192] := SUM(TEMP24:TEMP31)
DEST[223:208] := 00000000000H
DEST[MAXVL-1:256] := 0
.EE

.SS VPSADBW (VEX.128 ENCODED VERSION)  href="psadbw.html#vpsadbw--vex-128-encoded-version-"
class="anchor">¶

.EX
TEMP0 := ABS(SRC1[7:0] - SRC2[7:0])
(* Repeat operation for bytes 2 through 14 *)
TEMP15 := ABS(SRC1[127:120] - SRC2[127:120])
DEST[15:0] := SUM(TEMP0:TEMP7)
DEST[63:16] := 000000000000H
DEST[79:64] := SUM(TEMP8:TEMP15)
DEST[127:80] := 00000000000H
DEST[MAXVL-1:128] := 0
.EE

.SS PSADBW (128-BIT LEGACY SSE VERSION)  href="psadbw.html#psadbw--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
TEMP0 := ABS(DEST[7:0] - SRC[7:0])
(* Repeat operation for bytes 2 through 14 *)
TEMP15 := ABS(DEST[127:120] - SRC[127:120])
DEST[15:0] := SUM(TEMP0:TEMP7)
DEST[63:16] := 000000000000H
DEST[79:64] := SUM(TEMP8:TEMP15)
DEST[127:80] := 00000000000
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS PSADBW (64-BIT OPERAND)
.EX
TEMP0 := ABS(DEST[7:0] - SRC[7:0])
(* Repeat operation for bytes 2 through 6 *)
TEMP7 := ABS(DEST[63:56] - SRC[63:56])
DEST[15:0] := SUM(TEMP0:TEMP7)
DEST[63:16] := 000000000000H
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="psadbw.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VPSADBW __m512i _mm512_sad_epu8( __m512i a, __m512i b)

PSADBW __m64 _mm_sad_pu8(__m64 a,__m64 b)

(V)PSADBW __m128i _mm_sad_epu8(__m128i a, __m128i b)

VPSADBW __m256i _mm256_sad_epu8( __m256i a, __m256i b)
.EE

.SH FLAGS AFFECTED
None.

.SH SIMD FLOATING-POINT EXCEPTIONS  href="psadbw.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Table
2-21, “Type 4 Class Exception Conditions.”

.PP
EVEX-encoded instruction, see Exceptions Type E4NF.nb in
Table 2-50, “Type E4NF Class Exception
Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
