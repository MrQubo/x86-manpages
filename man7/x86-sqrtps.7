'\" t
.nh
.TH "X86-SQRTPS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
SQRTPS - SQUARE ROOT OF SINGLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
NP 0F 51 /r SQRTPS xmm1, xmm2/m128
T}	A	V/V	SSE	T{
Computes Square Roots of the packed single precision floating-point values in xmm2/m128 and stores the result in xmm1.
T}
T{
VEX.128.0F.WIG 51 /r VSQRTPS xmm1, xmm2/m128
T}	A	V/V	AVX	T{
Computes Square Roots of the packed single precision floating-point values in xmm2/m128 and stores the result in xmm1.
T}
T{
VEX.256.0F.WIG 51/r VSQRTPS ymm1, ymm2/m256
T}	A	V/V	AVX	T{
Computes Square Roots of the packed single precision floating-point values in ymm2/m256 and stores the result in ymm1.
T}
T{
EVEX.128.0F.W0 51 /r VSQRTPS xmm1 {k1}{z}, xmm2/m128/m32bcst
T}	B	V/V	AVX512VL AVX512F	T{
Computes Square Roots of the packed single precision floating-point values in xmm2/m128/m32bcst and stores the result in xmm1 subject to writemask k1.
T}
T{
EVEX.256.0F.W0 51 /r VSQRTPS ymm1 {k1}{z}, ymm2/m256/m32bcst
T}	B	V/V	AVX512VL AVX512F	T{
Computes Square Roots of the packed single precision floating-point values in ymm2/m256/m32bcst and stores the result in ymm1 subject to writemask k1.
T}
T{
EVEX.512.0F.W0 51/r VSQRTPS zmm1 {k1}{z}, zmm2/m512/m32bcst{er}
T}	B	V/V	AVX512F	T{
Computes Square Roots of the packed single precision floating-point values in zmm2/m512/m32bcst and stores the result in zmm1 subject to writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	Full	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Performs a SIMD computation of the square roots of the four, eight or
sixteen packed single precision floating-point values in the source
operand (second operand) stores the packed single precision
floating-point results in the destination operand.

.PP
EVEX.512 encoded versions: The source operand is a ZMM/YMM/XMM register,
a 512/256/128-bit memory location or a 512/256/128-bit vector
broadcasted from a 32-bit memory location. The destination operand is a
ZMM/YMM/XMM register updated according to the writemask.

.PP
VEX.256 encoded version: The source operand is a YMM register or a
256-bit memory location. The destination operand is a YMM register. The
upper bits (MAXVL-1:256) of the corresponding ZMM register destination
are zeroed.

.PP
VEX.128 encoded version: the source operand second source operand or a
128-bit memory location. The destination operand is an XMM register. The
upper bits (MAXVL-1:128) of the corresponding ZMM register destination
are zeroed.

.PP
128-bit Legacy SSE version: The second source can be an XMM register or
128-bit memory location. The destination is not distinct from the first
source XMM register and the upper bits (MAXVL-1:128) of the
corresponding ZMM register destination are unmodified.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.SH OPERATION
.SS VSQRTPS (EVEX ENCODED VERSIONS)  href="sqrtps.html#vsqrtps--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
IF (VL = 512) AND (EVEX.b = 1) AND (SRC *is register*)
    THEN
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(EVEX.RC);
    ELSE
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(MXCSR.RC);
FI;
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask* THEN
            IF (EVEX.b = 1) AND (SRC *is memory*)
                THEN DEST[i+31:i] := SQRT(SRC[31:0])
                ELSE DEST[i+31:i] := SQRT(SRC[i+31:i])
            FI;
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[i+31:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VSQRTPS (VEX.256 ENCODED VERSION)  href="sqrtps.html#vsqrtps--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SQRT(SRC[31:0])
DEST[63:32] := SQRT(SRC[63:32])
DEST[95:64] := SQRT(SRC[95:64])
DEST[127:96] := SQRT(SRC[127:96])
DEST[159:128] := SQRT(SRC[159:128])
DEST[191:160] := SQRT(SRC[191:160])
DEST[223:192] := SQRT(SRC[223:192])
DEST[255:224] := SQRT(SRC[255:224])
.EE

.SS VSQRTPS (VEX.128 ENCODED VERSION)  href="sqrtps.html#vsqrtps--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SQRT(SRC[31:0])
DEST[63:32] := SQRT(SRC[63:32])
DEST[95:64] := SQRT(SRC[95:64])
DEST[127:96] := SQRT(SRC[127:96])
DEST[MAXVL-1:128] := 0
.EE

.SS SQRTPS (128-BIT LEGACY SSE VERSION)  href="sqrtps.html#sqrtps--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[31:0] := SQRT(SRC[31:0])
DEST[63:32] := SQRT(SRC[63:32])
DEST[95:64] := SQRT(SRC[95:64])
DEST[127:96] := SQRT(SRC[127:96])
DEST[MAXVL-1:128] (Unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="sqrtps.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VSQRTPS __m512 _mm512_sqrt_round_ps(__m512 a, int r);

VSQRTPS __m512 _mm512_mask_sqrt_round_ps(__m512 s, __mmask16 k, __m512 a, int r);

VSQRTPS __m512 _mm512_maskz_sqrt_round_ps( __mmask16 k, __m512 a, int r);

VSQRTPS __m256 _mm256_sqrt_ps (__m256 a);

VSQRTPS __m256 _mm256_mask_sqrt_ps(__m256 s, __mmask8 k, __m256 a, int r);

VSQRTPS __m256 _mm256_maskz_sqrt_ps( __mmask8 k, __m256 a, int r);

SQRTPS __m128 _mm_sqrt_ps (__m128 a);

VSQRTPS __m128 _mm_mask_sqrt_ps(__m128 s, __mmask8 k, __m128 a, int r);

VSQRTPS __m128 _mm_maskz_sqrt_ps( __mmask8 k, __m128 a, int r);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="sqrtps.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Precision, Denormal.

.SH OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Table
2-19, “Type 2 Class Exception Conditions,” additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.vvvv != 1111B.
.TE

.PP
EVEX-encoded instruction, see Table
2-46, “Type E2 Class Exception Conditions,” additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If EVEX.vvvv != 1111B.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
