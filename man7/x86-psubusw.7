'\" t
.nh
.TH "X86-PSUBUSB-PSUBUSW" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
PSUBUSB-PSUBUSW - SUBTRACT PACKED UNSIGNED INTEGERS WITH UNSIGNED SATURATION
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
NP 0F D8 /r1 PSUBUSB mm, mm/m64	A	V/V	MMX	T{
Subtract unsigned packed bytes in mm/m64 from unsigned packed bytes in mm and saturate result.
T}
T{
66 0F D8 /r PSUBUSB xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Subtract packed unsigned byte integers in xmm2/m128 from packed unsigned byte integers in xmm1 and saturate result.
T}
NP 0F D9 /r1 PSUBUSW mm, mm/m64	A	V/V	MMX	T{
Subtract unsigned packed words in mm/m64 from unsigned packed words in mm and saturate result.
T}
T{
66 0F D9 /r PSUBUSW xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Subtract packed unsigned word integers in xmm2/m128 from packed unsigned word integers in xmm1 and saturate result.
T}
T{
VEX.128.66.0F.WIG D8 /r VPSUBUSB xmm1, xmm2, xmm3/m128
T}	B	V/V	AVX	T{
Subtract packed unsigned byte integers in xmm3/m128 from packed unsigned byte integers in xmm2 and saturate result.
T}
T{
VEX.128.66.0F.WIG D9 /r VPSUBUSW xmm1, xmm2, xmm3/m128
T}	B	V/V	AVX	T{
Subtract packed unsigned word integers in xmm3/m128 from packed unsigned word integers in xmm2 and saturate result.
T}
T{
VEX.256.66.0F.WIG D8 /r VPSUBUSB ymm1, ymm2, ymm3/m256
T}	B	V/V	AVX2	T{
Subtract packed unsigned byte integers in ymm3/m256 from packed unsigned byte integers in ymm2 and saturate result.
T}
T{
VEX.256.66.0F.WIG D9 /r VPSUBUSW ymm1, ymm2, ymm3/m256
T}	B	V/V	AVX2	T{
Subtract packed unsigned word integers in ymm3/m256 from packed unsigned word integers in ymm2 and saturate result.
T}
T{
EVEX.128.66.0F.WIG D8 /r VPSUBUSB xmm1 {k1}{z}, xmm2, xmm3/m128
T}	C	V/V	AVX512VL AVX512BW	T{
Subtract packed unsigned byte integers in xmm3/m128 from packed unsigned byte integers in xmm2, saturate results and store in xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F.WIG D8 /r VPSUBUSB ymm1 {k1}{z}, ymm2, ymm3/m256
T}	C	V/V	AVX512VL AVX512BW	T{
Subtract packed unsigned byte integers in ymm3/m256 from packed unsigned byte integers in ymm2, saturate results and store in ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F.WIG D8 /r VPSUBUSB zmm1 {k1}{z}, zmm2, zmm3/m512
T}	C	V/V	AVX512BW	T{
Subtract packed unsigned byte integers in zmm3/m512 from packed unsigned byte integers in zmm2, saturate results and store in zmm1 using writemask k1.
T}
T{
EVEX.128.66.0F.WIG D9 /r VPSUBUSW xmm1 {k1}{z}, xmm2, xmm3/m128
T}	C	V/V	AVX512VL AVX512BW	T{
Subtract packed unsigned word integers in xmm3/m128 from packed unsigned word integers in xmm2 and saturate results and store in xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F.WIG D9 /r VPSUBUSW ymm1 {k1}{z}, ymm2, ymm3/m256
T}	C	V/V	AVX512VL AVX512BW	T{
Subtract packed unsigned word integers in ymm3/m256 from packed unsigned word integers in ymm2, saturate results and store in ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F.WIG D9 /r VPSUBUSW zmm1 {k1}{z}, zmm2, zmm3/m512
T}	C	V/V	AVX512BW	T{
Subtract packed unsigned word integers in zmm3/m512 from packed unsigned word integers in zmm2, saturate results and store in zmm1 using writemask k1.
T}
.TE

.PP
.RS

.PP
1\&. See note in Section 2.5, “Intel® AVX and Intel® SSE Instruction
Exception Classification,” in the Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 2A, and Section
23.25.3, “Exception Conditions of Legacy SIMD Instructions Operating
on MMX Registers,” in the Intel® 64 and IA-32 Architectures
Software Developer’s Manual, Volume 3B.

.RE

.SH INSTRUCTION OPERAND ENCODING  href="./psubusb:psubusw.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Full Mem	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Performs a SIMD subtract of the packed unsigned integers of the source
operand (second operand) from the packed unsigned integers of the
destination operand (first operand), and stores the packed unsigned
integer results in the destination operand. See
Figure 9-4 in the Intel® 64
and IA-32 Architectures Software Developer’s Manual, Volume 1, for an
illustration of a SIMD operation. Overflow is handled with unsigned
saturation, as described in the following paragraphs.

.PP
These instructions can operate on either 64-bit or 128-bit operands.

.PP
The (V)PSUBUSB instruction subtracts packed unsigned byte integers. When
an individual byte result is less than zero, the saturated value of 00H
is written to the destination operand.

.PP
The (V)PSUBUSW instruction subtracts packed unsigned word integers. When
an individual word result is less than zero, the saturated value of
0000H is written to the destination operand.

.PP
In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the
form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).

.PP
Legacy SSE version 64-bit operand: The destination operand must be an
MMX technology register and the source operand can be either an MMX
technology register or a 64-bit memory location.

.PP
128-bit Legacy SSE version: The second source operand is an XMM register
or a 128-bit memory location. The first source operand and destination
operands are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: The second source operand is an XMM register or
a 128-bit memory location. The first source operand and destination
operands are XMM registers. Bits (MAXVL-1:128) of the destination YMM
register are zeroed.

.PP
VEX.256 encoded versions: The second source operand is an YMM register
or an 256-bit memory location. The first source operand and destination
operands are YMM registers. Bits (MAXVL-1:256) of the corresponding ZMM
register are zeroed.

.PP
EVEX encoded version: The second source operand is an ZMM/YMM/XMM
register or an 512/256/128-bit memory location. The first source operand
and destination operands are ZMM/YMM/XMM registers. The destination is
conditionally updated with writemask k1.

.SH OPERATION
.SS PSUBUSB (WITH 64-BIT OPERANDS)  href="./psubusb:psubusw.html#psubusb--with-64-bit-operands-"
class="anchor">¶

.EX
DEST[7:0] := SaturateToUnsignedByte (DEST[7:0] − SRC (7:0] );
(* Repeat add operation for 2nd through 7th bytes *)
DEST[63:56] := SaturateToUnsignedByte (DEST[63:56] − SRC[63:56];
.EE

.SS PSUBUSW (WITH 64-BIT OPERANDS)  href="./psubusb:psubusw.html#psubusw--with-64-bit-operands-"
class="anchor">¶

.EX
DEST[15:0] := SaturateToUnsignedWord (DEST[15:0] − SRC[15:0] );
(* Repeat add operation for 2nd and 3rd words *)
DEST[63:48] := SaturateToUnsignedWord (DEST[63:48] − SRC[63:48] );
.EE

.SS VPSUBUSB (EVEX ENCODED VERSIONS)  href="./psubusb:psubusw.html#vpsubusb--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (16, 128), (32, 256), (64, 512)
FOR j := 0 TO KL-1
    i := j * 8;
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i] := SaturateToUnsignedByte (SRC1[i+7:i] - SRC2[i+7:i])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+7:i] remains unchanged*
                ELSE *zeroing-masking*
                        ; zeroing-masking
                    DEST[i+7:i] := 0;
            FI
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0;
.EE

.SS VPSUBUSW (EVEX ENCODED VERSIONS)  href="./psubusb:psubusw.html#vpsubusw--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j := 0 TO KL-1
    i := j * 16;
    IF k1[j] OR *no writemask*
        THEN DEST[i+15:i] := SaturateToUnsignedWord (SRC1[i+15:i] - SRC2[i+15:i])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+15:i] remains unchanged*
                ELSE *zeroing-masking*
                        ; zeroing-masking
                    DEST[i+15:i] := 0;
            FI
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0;
.EE

.SS VPSUBUSB (VEX.256 ENCODED VERSION)  href="./psubusb:psubusw.html#vpsubusb--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[7:0] := SaturateToUnsignedByte (SRC1[7:0] - SRC2[7:0]);
(* Repeat subtract operation for 2nd through 31st bytes *)
DEST[255:148] := SaturateToUnsignedByte (SRC1[255:248] - SRC2[255:248]);
DEST[MAXVL-1:256] := 0;
.EE

.SS VPSUBUSB (VEX.128 ENCODED VERSION)  href="./psubusb:psubusw.html#vpsubusb--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[7:0] := SaturateToUnsignedByte (SRC1[7:0] - SRC2[7:0]);
(* Repeat subtract operation for 2nd through 14th bytes *)
DEST[127:120] := SaturateToUnsignedByte (SRC1[127:120] - SRC2[127:120]);
DEST[MAXVL-1:128] := 0
.EE

.SS PSUBUSB (128-BIT LEGACY SSE VERSION)  href="./psubusb:psubusw.html#psubusb--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[7:0] := SaturateToUnsignedByte (DEST[7:0] - SRC[7:0]);
(* Repeat subtract operation for 2nd through 14th bytes *)
DEST[127:120] := SaturateToUnsignedByte (DEST[127:120] - SRC[127:120]);
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS VPSUBUSW (VEX.256 ENCODED VERSION)  href="./psubusb:psubusw.html#vpsubusw--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[15:0] := SaturateToUnsignedWord (SRC1[15:0] - SRC2[15:0]);
(* Repeat subtract operation for 2nd through 15th words *)
DEST[255:240] := SaturateToUnsignedWord (SRC1[255:240] - SRC2[255:240]);
DEST[MAXVL-1:256] := 0;
.EE

.SS VPSUBUSW (VEX.128 ENCODED VERSION)  href="./psubusb:psubusw.html#vpsubusw--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[15:0] := SaturateToUnsignedWord (SRC1[15:0] - SRC2[15:0]);
(* Repeat subtract operation for 2nd through 7th words *)
DEST[127:112] := SaturateToUnsignedWord (SRC1[127:112] - SRC2[127:112]);
DEST[MAXVL-1:128] := 0
.EE

.SS PSUBUSW (128-BIT LEGACY SSE VERSION)  href="./psubusb:psubusw.html#psubusw--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[15:0] := SaturateToUnsignedWord (DEST[15:0] - SRC[15:0]);
(* Repeat subtract operation for 2nd through 7th words *)
DEST[127:112] := SaturateToUnsignedWord (DEST[127:112] - SRC[127:112]);
DEST[MAXVL-1:128] (Unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENTS <a
href="./psubusb:psubusw.html#intel-c-c++-compiler-intrinsic-equivalents"
class="anchor">¶

.EX
VPSUBUSB __m512i _mm512_subs_epu8(__m512i a, __m512i b);

VPSUBUSB __m512i _mm512_mask_subs_epu8(__m512i s, __mmask64 k, __m512i a, __m512i b);

VPSUBUSB __m512i _mm512_maskz_subs_epu8( __mmask64 k, __m512i a, __m512i b);

VPSUBUSB __m256i _mm256_mask_subs_epu8(__m256i s, __mmask32 k, __m256i a, __m256i b);

VPSUBUSB __m256i _mm256_maskz_subs_epu8( __mmask32 k, __m256i a, __m256i b);

VPSUBUSB __m128i _mm_mask_subs_epu8(__m128i s, __mmask16 k, __m128i a, __m128i b);

VPSUBUSB __m128i _mm_maskz_subs_epu8( __mmask16 k, __m128i a, __m128i b);

VPSUBUSW __m512i _mm512_subs_epu16(__m512i a, __m512i b);

VPSUBUSW __m512i _mm512_mask_subs_epu16(__m512i s, __mmask32 k, __m512i a, __m512i b);

VPSUBUSW __m512i _mm512_maskz_subs_epu16( __mmask32 k, __m512i a, __m512i b);

VPSUBUSW __m256i _mm256_mask_subs_epu16(__m256i s, __mmask16 k, __m256i a, __m256i b);

VPSUBUSW __m256i _mm256_maskz_subs_epu16( __mmask16 k, __m256i a, __m256i b);

VPSUBUSW __m128i _mm_mask_subs_epu16(__m128i s, __mmask8 k, __m128i a, __m128i b);

VPSUBUSW __m128i _mm_maskz_subs_epu16( __mmask8 k, __m128i a, __m128i b);

PSUBUSB __m64 _mm_subs_pu8(__m64 m1, __m64 m2)

(V)PSUBUSB __m128i _mm_subs_epu8(__m128i m1, __m128i m2)

VPSUBUSB __m256i _mm256_subs_epu8(__m256i m1, __m256i m2)

PSUBUSW __m64 _mm_subs_pu16(__m64 m1, __m64 m2)

(V)PSUBUSW __m128i _mm_subs_epu16(__m128i m1, __m128i m2)

VPSUBUSW __m256i _mm256_subs_epu16(__m256i m1, __m256i m2)
.EE

.SH FLAGS AFFECTED
None.

.SH NUMERIC EXCEPTIONS
None.

.SH OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Table
2-21, “Type 4 Class Exception Conditions.”

.PP
EVEX-encoded instruction, see Table
2-49, “Type E4 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
