'\" t
.nh
.TH "X86-VSQRTPH" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VSQRTPH - COMPUTE SQUARE ROOT OF PACKED FP16 VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBInstruction En bit Mode Flag Support Instruction En bit Mode Flag Support 64/32 CPUID Feature Instruction En bit Mode Flag CPUID Feature Instruction En bit Mode Flag Op/ 64/32 CPUID Feature Instruction En bit Mode Flag 64/32 CPUID Feature Instruction En bit Mode Flag CPUID Feature Instruction En bit Mode Flag Op/ 64/32 CPUID Feature\fP	\fB\fP	\fBSupport\fP	\fB\fP	\fBDescription\fP
T{
EVEX.128.NP.MAP5.W0 51 /r VSQRTPH xmm1{k1}{z}, xmm2/m128/m16bcst
T}	A	V/V	AVX512-FP16 AVX512VL	T{
Compute square roots of the packed FP16 values in xmm2/m128/m16bcst, and store the result in xmm1 subject to writemask k1.
T}
T{
EVEX.256.NP.MAP5.W0 51 /r VSQRTPH ymm1{k1}{z}, ymm2/m256/m16bcst
T}	A	V/V	AVX512-FP16 AVX512VL	T{
Compute square roots of the packed FP16 values in ymm2/m256/m16bcst, and store the result in ymm1 subject to writemask k1.
T}
T{
EVEX.512.NP.MAP5.W0 51 /r VSQRTPH zmm1{k1}{z}, zmm2/m512/m16bcst {er}
T}	A	V/V	AVX512-FP16	T{
Compute square roots of the packed FP16 values in zmm2/m512/m16bcst, and store the result in zmm1 subject to writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Full	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SS DESCRIPTION
This instruction performs a packed FP16 square-root computation on the
values from source operand and stores the packed FP16 result in the
destination operand. The destination elements are updated according to
the write-mask.

.SS OPERATION
.SS VSQRTPH DEST{K1}, SRC
.EX
VL = 128, 256 or 512
KL := VL/16
FOR i := 0 to KL-1:
    IF k1[i] or *no writemask*:
        IF SRC is memory and (EVEX.b = 1):
            tsrc := src.fp16[0]
        ELSE:
            tsrc := src.fp16[i]
        DEST.fp16[i] := SQRT(tsrc)
    ELSE IF *zeroing*:
        DEST.fp16[i] := 0
    //else DEST.fp16[i] remains unchanged
DEST[MAXVL-1:VL] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vsqrtph.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VSQRTPH __m128h _mm_mask_sqrt_ph (__m128h src, __mmask8 k, __m128h a);

VSQRTPH __m128h _mm_maskz_sqrt_ph (__mmask8 k, __m128h a);

VSQRTPH __m128h _mm_sqrt_ph (__m128h a);

VSQRTPH __m256h _mm256_mask_sqrt_ph (__m256h src, __mmask16 k, __m256h a);

VSQRTPH __m256h _mm256_maskz_sqrt_ph (__mmask16 k, __m256h a);

VSQRTPH __m256h _mm256_sqrt_ph (__m256h a);

VSQRTPH __m512h _mm512_mask_sqrt_ph (__m512h src, __mmask32 k, __m512h a);

VSQRTPH __m512h _mm512_maskz_sqrt_ph (__mmask32 k, __m512h a);

VSQRTPH __m512h _mm512_sqrt_ph (__m512h a);

VSQRTPH __m512h _mm512_mask_sqrt_round_ph (__m512h src, __mmask32 k, __m512h a, const int rounding);

VSQRTPH __m512h _mm512_maskz_sqrt_round_ph (__mmask32 k, __m512h a, const int rounding);

VSQRTPH __m512h _mm512_sqrt_round_ph (__m512h a, const int rounding);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vsqrtph.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Precision, Denormal.

.SS OTHER EXCEPTIONS
EVEX-encoded instruction, see Table
2-46, “Type E2 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
