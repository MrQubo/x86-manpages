'\" t
.nh
.TH "X86-VREDUCESS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VREDUCESS - PERFORM A REDUCTION TRANSFORMATION ON A SCALAR FLOAT32 VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.LLIG.66.0F3A.W0 57 /r /ib VREDUCESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8
T}	A	V/V	AVX512DQ	T{
Perform a reduction transformation on a scalar single-precision floating-point value in xmm3/m32 by subtracting a number of fraction bits specified by the imm8 field. Also, upper single-precision floating-point values (bits[127:32]) from xmm2 are copied to xmm1[127:32]\&. Stores the result in xmm1 register.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vreducess.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SS DESCRIPTION
Perform a reduction transformation of the binary encoded
single-precision floating-point value in the low dword element of the
second source operand (the third operand) and store the reduced result
in binary floating-point format to the low dword element of the
destination operand (the first operand) under the writemask k1. Bits
127:32 of the destination operand are copied from respective dword
elements of the first source operand (the second operand).

.PP
The reduction transformation subtracts the integer part and the leading
M fractional bits from the binary floating-point source value, where M
is a unsigned integer specified by imm8[7:4], see Figure
5-28
\[la]vreducepd.html#fig\-5\-28\[ra]\&. Specifically, the reduction
transformation can be expressed as:

.PP
dest = src – (ROUND(2M*src))*2-M;

.PP
where “Round()” treats “src”, “2M”, and their product as
binary floating-point numbers with normalized significand and biased
exponents.

.PP
The magnitude of the reduced result can be expressed by considering src=
2p*man2,

.PP
where ‘man2’ is the normalized significand and ‘p’ is the unbiased
exponent

.PP
Then if RC = RNE: 0&lt;=|Reduced Result|&lt;=2p-M-1

.PP
Then if RC ≠ RNE: 0&lt;=|Reduced Result|&lt;2p-M

.PP
This instruction might end up with a precision exception set. However,
in case of SPE set (i.e., Suppress Precision Exception, which is
imm8[3]=1), no precision exception is reported.

.PP
Handling of special case of input values are listed in Table
5-29
\[la]vreducepd.html#tbl\-5\-29\[ra]\&.

.SS OPERATION
.EX
ReduceArgumentSP(SRC[31:0], imm8[7:0])
{
    // Check for NaN
    IF (SRC [31:0] = NAN) THEN
        RETURN (Convert SRC[31:0] to QNaN); FI
    M := imm8[7:4]; // Number of fraction bits of the normalized significand to be subtracted
    RC := imm8[1:0];// Round Control for ROUND() operation
    RC source := imm[2];
    SPE := imm[3];// Suppress Precision Exception
    TMP[31:0] := 2-M *{ROUND(2M*SRC[31:0], SPE, RC_source, RC)}; // ROUND() treats SRC and 2M as standard binary FP values
    TMP[31:0] := SRC[31:0] – TMP[31:0]; // subtraction under the same RC,SPE controls
RETURN TMP[31:0]; // binary encoded FP with biased exponent and normalized significand
}
.EE

.SS VREDUCESS
.EX
IF k1[0] or *no writemask*
    THEN DEST[31:0] := ReduceArgumentSP(SRC2[31:0], imm8[7:0])
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing-masking
                THEN DEST[31:0] = 0
        FI;
FI;
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vreducess.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VREDUCESS __m128 _mm_mask_reduce_ss( __m128 a, __m128 b, int imm, int sae)

VREDUCESS __m128 _mm_mask_reduce_ss(__m128 s, __mmask16 k, __m128 a, __m128 b, int imm, int sae)

VREDUCESS __m128 _mm_maskz_reduce_ss(__mmask16 k, __m128 a, __m128 b, int imm, int sae)
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vreducess.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Precision.

.PP
If SPE is enabled, precision exception is not reported (regardless of
MXCSR exception mask).

.SS OTHER EXCEPTIONS
See Table 2-47, “Type E3 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
