'\" t
.nh
.TH "X86-VGETEXPSS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VGETEXPSS - CONVERT EXPONENTS OF SCALAR SINGLE PRECISION FLOATING-POINT VALUE TO SINGLEPRECISION FLOATING-POINT VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 Bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.LLIG.66.0F38.W0 43 /r VGETEXPSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}
T}	A	V/V	AVX512F	T{
Convert the biased exponent (bits 30:23) of the low single-precision floating-point value in xmm3/m32 to a single-precision floating-point value representing unbiased integer exponent. Stores the result to xmm1 under the writemask k1 and merge with the other elements of xmm2.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vgetexpss.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SS DESCRIPTION
Extracts the biased exponent from the normalized single-precision
floating-point representation of the low double-word data element of the
source operand (the third operand) as unbiased signed integer value, or
convert the denormal representation of input data to unbiased negative
integer values. The integer value of the unbiased exponent is converted
to single-precision floating-point value and written to the destination
operand (the first operand) as single-precision floating-point numbers.
Bits (127:32) of the XMM register destination are copied from
corresponding bits in the first source operand.

.PP
The destination must be a XMM register, the source operand can be a XMM
register or a float32 memory location.

.PP
If writemasking is used, the low doubleword element of the destination
operand is conditionally updated depending on the value of writemask
register k1. If writemasking is not used, the low doubleword element of
the destination operand is unconditionally updated.

.PP
Each GETEXP operation converts the exponent value into a floating-point
number (permitting input value in denormal representation). Special
cases of input values are listed in Table
5-17
\[la]vgetexpps.html#tbl\-5\-17\[ra]\&.

.PP
The formula is:

.PP
GETEXP(x) = floor(log2(|x|))

.PP
Notation \fBfloor(x)\fP stands for maximal integer not exceeding real
number x.

.PP
Software usage of VGETEXPxx and VGETMANTxx instructions generally
involve a combination of GETEXP operation and GETMANT operation (see
VGETMANTPD). Thus VGETEXPxx instruction do not require software to
handle SIMD floating-point exceptions.

.SS OPERATION
.EX
// NormalizeExpTinySPFP(SRC[31:0]) is defined in the Operation section of VGETEXPPS
// ConvertExpSPFP(SRC[31:0]) is defined in the Operation section of VGETEXPPS
.EE

.SS VGETEXPSS (EVEX ENCODED VERSION)  href="vgetexpss.html#vgetexpss--evex-encoded-version-"
class="anchor">¶

.EX
IF k1[0] OR *no writemask*
    THEN DEST[31:0] :=
            ConvertExpDPFP(SRC2[31:0])
    ELSE
        IF *merging-masking*
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing-masking
                DEST[31:0]:= 0
            FI
    FI;
ENDFOR
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vgetexpss.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VGETEXPSS __m128 _mm_getexp_ss( __m128 a, __m128 b);

VGETEXPSS __m128 _mm_mask_getexp_ss(__m128 s, __mmask8 k, __m128 a, __m128 b);

VGETEXPSS __m128 _mm_maskz_getexp_ss( __mmask8 k, __m128 a, __m128 b);

VGETEXPSS __m128 _mm_getexp_round_ss( __m128 a, __m128 b, int sae);

VGETEXPSS __m128 _mm_mask_getexp_round_ss(__m128 s, __mmask8 k, __m128 a, __m128 b, int sae);

VGETEXPSS __m128 _mm_maskz_getexp_round_ss( __mmask8 k, __m128 a, __m128 b, int sae);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vgetexpss.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Denormal

.SS OTHER EXCEPTIONS
See Table 2-47, “Type E3 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
