'\" t
.nh
.TH "X86-PUSHA-PUSHAD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
PUSHA-PUSHAD - PUSH ALL GENERAL-PURPOSE REGISTERS
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
60	PUSHA	ZO	Invalid	Valid	T{
Push AX, CX, DX, BX, original SP, BP, SI, and DI.
T}
60	PUSHAD	ZO	Invalid	Valid	T{
Push EAX, ECX, EDX, EBX, original ESP, EBP, ESI, and EDI.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="./pusha:pushad.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
ZO	N/A	N/A	N/A	N/A
.TE

.SH DESCRIPTION
Pushes the contents of the general-purpose registers onto the stack. The
registers are stored on the stack in the following order: EAX, ECX, EDX,
EBX, ESP (original value), EBP, ESI, and EDI (if the current
operand-size attribute is 32) and AX, CX, DX, BX, SP (original value),
BP, SI, and DI (if the operand-size attribute is 16). These instructions
perform the reverse operation of the POPA/POPAD instructions. The value
pushed for the ESP or SP register is its value before prior to pushing
the first register (see the “Operation” section below).

.PP
The PUSHA (push all) and PUSHAD (push all double) mnemonics reference
the same opcode. The PUSHA instruction is intended for use when the
operand-size attribute is 16 and the PUSHAD instruction for when the
operand-size attribute is 32. Some assemblers may force the operand size
to 16 when PUSHA is used and to 32 when PUSHAD is used. Others may treat
these mnemonics as synonyms (PUSHA/PUSHAD) and use the current setting
of the operand-size attribute to determine the size of values to be
pushed from the stack, regardless of the mnemonic used.

.PP
In the real-address mode, if the ESP or SP register is 1, 3, or 5 when
PUSHA/PUSHAD executes: an #SS exception is generated but not delivered
(the stack error reported prevents #SS delivery). Next, the processor
generates a #DF exception and enters a shutdown state as described in
the #DF discussion in Chapter 6 of the Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 3A.

.PP
This instruction executes as described in compatibility mode and legacy
mode. It is not valid in 64-bit mode.

.SH OPERATION
.EX
IF 64-bit Mode
    THEN #UD
FI;
IF OperandSize = 32 (* PUSHAD instruction *)
    THEN
        Temp := (ESP);
        Push(EAX);
        Push(ECX);
        Push(EDX);
        Push(EBX);
        Push(Temp);
        Push(EBP);
        Push(ESI);
        Push(EDI);
    ELSE (* OperandSize = 16, PUSHA instruction *)
        Temp := (SP);
        Push(AX);
        Push(CX);
        Push(DX);
        Push(BX);
        Push(Temp);
        Push(BP);
        Push(SI);
        Push(DI);
FI;
.EE

.SH FLAGS AFFECTED
None.

.SH PROTECTED MODE EXCEPTIONS  href="./pusha:pushad.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If the starting or ending stack address is outside the stack segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If an unaligned memory reference is made while the current privilege level is 3 and alignment checking is enabled.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS  href="./pusha:pushad.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If the ESP or SP register contains 7, 9, 11, 13, or 15.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS  href="./pusha:pushad.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the ESP or SP register contains 7, 9, 11, 13, or 15.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If an unaligned memory reference is made while alignment checking is enabled.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS  href="./pusha:pushad.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS  href="./pusha:pushad.html#64-bit-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If in 64-bit mode.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
