'\" t
.nh
.TH "X86-VRSQRT28SS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VRSQRT28SS - APPROXIMATION TO THE RECIPROCAL SQUARE ROOT OF SCALAR SINGLE PRECISION FLOATING-POINT VALUE WITH LESS THAN 2^-28 RELATIVE ERROR
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.LLIG.66.0F38.W0 CD /r VRSQRT28SS xmm1 {k1}{z}, xmm2, xmm3/m32 {sae}
T}	A	V/V	AVX512ER	T{
Computes approximate reciprocal square root (&lt;2^-28 relative error) of the scalar single-precision floating-point value from xmm3/m32 and stores result in xmm1with writemask k1. Also, upper 3 single-precision floating-point value (bits[127:32]) from xmm2 is copied to xmm1[127:32]\&.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vrsqrt28ss.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En Tuple Type Operand 1 Operand 2 Operand 3 Operand 4\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP
T{
A Tuple1 Scalar ModRM:reg (w) EVEX.vvvv (r) ModRM:r/m (r) N/A
T}					
.TE

.SS DESCRIPTION
Computes the reciprocal square root of the low float32 value in the
second source operand (the third operand) and store the result to the
destination operand (the first operand). The approximate reciprocal
square root is evaluated with less than 2^-28 of maximum relative error
prior to final rounding. The final result is rounded to &lt; 2^-23
relative error before written to the low float32 element of the
destination according to the writemask k1. Bits 127:32 of the
destination is copied from the corresponding bits of the first source
operand (the second operand).

.PP
If any source element is NaN, the quietized NaN source value is returned
for that element. Negative (non-zero) source numbers, as well as -∞,
return the canonical NaN and set the Invalid Flag (#I).

.PP
A value of -0 must return -∞ and set the DivByZero flags (#Z). Negative
numbers should return NaN and set the Invalid flag (#I). Note however
that the instruction flush input denormals to zero of the same sign, so
negative denormals return -∞ and set the DivByZero flag.

.PP
The first source operand is an XMM register. The second source operand
is an XMM register or a 32-bit memory location. The destination operand
is a XMM register.

.SS A NUMERICALLY EXACT IMPLEMENTATION OF VRSQRT28XX CAN BE FOUND AT HTTPS://SOFTWARE.INTEL.COM/EN-US/ARTI- <a
href="vrsqrt28ss.html#a-numerically-exact-implementation-of-vrsqrt28xx-can-be-found-at-https---software-intel-com-en-us-arti-"
class="anchor">¶

.SS CLES/REFERENCE-IMPLEMENTATIONS-FOR-IA-APPROXIMATION-INSTRUCTIONS-VRCP14-VRSQRT14-VRCP28-VRSQRT28-VEXP2. <a
href="vrsqrt28ss.html#cles-reference-implementations-for-ia-approximation-instructions-vrcp14-vrsqrt14-vrcp28-vrsqrt28-vexp2-"
class="anchor">¶

.SS OPERATION
.SS VRSQRT28SS (EVEX ENCODED VERSIONS)  href="vrsqrt28ss.html#vrsqrt28ss--evex-encoded-versions-"
class="anchor">¶

.EX
    IF k1[0] OR *no writemask* THEN
                DEST[31: 0] := (1.0/ SQRT(SRC[31: 0]));
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[31: 0] remains unchanged*
            ELSE ; zeroing-masking
                    DEST[31: 0] := 0
        FI;
    FI;
ENDFOR;
DEST[127:32] := SRC1[127: 32]
DEST[MAXVL-1:128] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vrsqrt28ss.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VRSQRT28SS __m128 _mm_rsqrt28_round_ss(__m128 a, __m128 b, int rounding);

VRSQRT28SS __m128 _mm_mask_rsqrt28_round_ss(__m128 s, __mmask8 m,__m128 a,__m128 b, int rounding);

VRSQRT28SS __m128 _mm_maskz_rsqrt28_round_ss(__mmask8 m,__m128 a,__m128 b, int rounding);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vrsqrt28ss.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid (if SNaN input), Divide-by-zero.

.SS OTHER EXCEPTIONS
See Table 2-47, “Type E3 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
