'\" t
.nh
.TH "X86-ROUNDSD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
ROUNDSD - ROUND SCALAR DOUBLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode*/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 3A 0B /r ib ROUNDSD xmm1, xmm2/m64, imm8
T}	RMI	V/V	SSE4_1	T{
Round the low packed double precision floating-point value in xmm2/m64 and place the result in xmm1. The rounding mode is determined by imm8.
T}
T{
VEX.LIG.66.0F3A.WIG 0B /r ib VROUNDSD xmm1, xmm2, xmm3/m64, imm8
T}	RVMI	V/V	AVX	T{
Round the low packed double precision floating-point value in xmm3/m64 and place the result in xmm1. The rounding mode is determined by imm8. Upper packed double precision floating-point value (bits[127:64]) from xmm2 is copied to xmm1[127:64]\&.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RMI	ModRM:reg (w)	ModRM:r/m (r)	imm8	N/A
RVMI	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	imm8
.TE

.SH DESCRIPTION
Round the double precision floating-point value in the lower qword of
the source operand (second operand) using the rounding mode specified in
the immediate operand (third operand) and place the result in the
destination operand (first operand). The rounding process rounds a
double precision floating-point input to an integer value and returns
the integer result as a double precision floating-point value in the
lowest position. The upper double precision floating-point value in the
destination is retained.

.PP
The immediate operand specifies control fields for the rounding
operation, three bit fields are defined and shown in Figure
4-24
\[la]roundpd.html#fig\-4\-24\[ra]\&. Bit 3 of the immediate byte controls
processor behavior for a precision exception, bit 2 selects the source
of rounding mode control. Bits 1:0 specify a non-sticky rounding-mode
value (Table 4-18 lists the encoded
values for rounding-mode field).

.PP
The Precision Floating-Point Exception is signaled according to the
immediate operand. If any source operand is an SNaN then it will be
converted to a QNaN. If DAZ is set to ‘1 then denormals will be
converted to zero before rounding.

.PP
128-bit Legacy SSE version: The first source operand and the destination
operand are the same. Bits (MAXVL-1:64) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: Bits (MAXVL-1:128) of the destination YMM
register are zeroed.

.SH OPERATION
.EX
IF (imm[2] = ‘1)
    THEN // rounding mode is determined by MXCSR.RC
        DEST[63:0] := ConvertDPFPToInteger_M(SRC[63:0]);
    ELSE // rounding mode is determined by IMM8.RC
        DEST[63:0] := ConvertDPFPToInteger_Imm(SRC[63:0]);
FI;
DEST[127:63] remains unchanged ;
.EE

.SS ROUNDSD (128-BIT LEGACY SSE VERSION)  href="roundsd.html#roundsd--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[63:0] := RoundToInteger(SRC[63:0], ROUND_CONTROL)
DEST[MAXVL-1:64] (Unmodified)
.EE

.SS VROUNDSD (VEX.128 ENCODED VERSION)  href="roundsd.html#vroundsd--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[63:0] := RoundToInteger(SRC2[63:0], ROUND_CONTROL)
DEST[127:64] := SRC1[127:64]
DEST[MAXVL-1:128] := 0
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="roundsd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
ROUNDSD __m128d mm_round_sd(__m128d dst, __m128d s1, int iRoundMode);

ROUNDSD __m128d mm_floor_sd(__m128d dst, __m128d s1);

ROUNDSD __m128d mm_ceil_sd(__m128d dst, __m128d s1);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="roundsd.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid (signaled only if SRC = SNaN).

.PP
Precision (signaled only if imm[3] = ‘0; if imm[3] = ‘1, then the
Precision Mask in the MXSCSR is ignored and precision exception is not
signaled.)

.PP
Note that Denormal is not signaled by ROUNDSD.

.SH OTHER EXCEPTIONS
See Table 2-20, “Type 3 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
