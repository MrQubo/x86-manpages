'\" t
.nh
.TH "X86-FRSTOR" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
FRSTOR - RESTORE X87 FPU STATE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode\fP	\fB\fP	\fBMode\fP	\fBLeg Mode\fP	\fBDescription\fP
DD /4				T{
Load FPU state from m94byte or m108byte.
T}
.TE

.SH DESCRIPTION
Loads the FPU state (operating environment and register stack) from the
memory area specified with the source operand. This state data is
typically written to the specified memory location by a previous
FSAVE/FNSAVE instruction.

.PP
The FPU operating environment consists of the FPU control word, status
word, tag word, instruction pointer, data pointer, and last opcode.
Figures 8-9 through 8-12 in the Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 1, show the layout in
memory of the stored environment, depending on the operating mode of the
processor (protected or real) and the current operand-size attribute
(16-bit or 32-bit). In virtual-8086 mode, the real mode layouts are
used. The contents of the FPU register stack are stored in the 80 bytes
immediately following the operating environment image.

.PP
The FRSTOR instruction should be executed in the same operating mode as
the corresponding FSAVE/FNSAVE instruction.

.PP
If one or more unmasked exception bits are set in the new FPU status
word, a floating-point exception will be generated upon execution of the
next floating-point instruction (except for the no-wait floating-point
instructions, see the section titled “Software Exception Handling” in
Chapter 8 of the Intel® 64 and IA-32 Architectures Software
Developer’s Manual, Volume 1). To avoid raising exceptions when loading
a new operating environment, clear all the exception flags in the FPU
status word that is being loaded.

.PP
This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.

.SH OPERATION
.EX
FPUControlWord := SRC[FPUControlWord];
FPUStatusWord := SRC[FPUStatusWord];
FPUTagWord := SRC[FPUTagWord];
FPUDataPointer := SRC[FPUDataPointer];
FPUInstructionPointer := SRC[FPUInstructionPointer];
FPULastInstructionOpcode := SRC[FPULastInstructionOpcode];
ST(0) := SRC[ST(0)];
ST(1) := SRC[ST(1)];
ST(2) := SRC[ST(2)];
ST(3) := SRC[ST(3)];
ST(4) := SRC[ST(4)];
ST(5) := SRC[ST(5)];
ST(6) := SRC[ST(6)];
ST(7) := SRC[ST(7)];
.EE

.SH FPU FLAGS AFFECTED
The C0, C1, C2, C3 flags are loaded.

.SH FLOATING-POINT EXCEPTIONS
None; however, if an unmasked exception is loaded in the status word, it
is generated upon execution of the next “waiting” floating-point
instruction.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
