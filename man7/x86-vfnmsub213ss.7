'\" t
.nh
.TH "X86-VFNMSUB132SS-VFNMSUB213SS-VFNMSUB231SS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VFNMSUB132SS-VFNMSUB213SS-VFNMSUB231SS - FUSED NEGATIVE MULTIPLY-SUBTRACT OFSCALAR SINGLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 Bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
VEX.LIG.66.0F38.W0 9F /r VFNMSUB132SS xmm1, xmm2, xmm3/m32
T}	A	V/V	FMA	T{
Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, negate the multiplication result and subtract xmm2 and put result in xmm1.
T}
T{
VEX.LIG.66.0F38.W0 AF /r VFNMSUB213SS xmm1, xmm2, xmm3/m32
T}	A	V/V	FMA	T{
Multiply scalar single-precision floating-point value from xmm1 and xmm2, negate the multiplication result and subtract xmm3/m32 and put result in xmm1.
T}
T{
VEX.LIG.66.0F38.W0 BF /r VFNMSUB231SS xmm1, xmm2, xmm3/m32
T}	A	V/V	FMA	T{
Multiply scalar single-precision floating-point value from xmm2 and xmm3/m32, negate the multiplication result and subtract xmm1 and put result in xmm1.
T}
T{
EVEX.LLIG.66.0F38.W0 9F /r VFNMSUB132SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}
T}	B	V/V	AVX512F	T{
Multiply scalar single-precision floating-point value from xmm1 and xmm3/m32, negate the multiplication result and subtract xmm2 and put result in xmm1.
T}
T{
EVEX.LLIG.66.0F38.W0 AF /r VFNMSUB213SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}
T}	B	V/V	AVX512F	T{
Multiply scalar single-precision floating-point value from xmm1 and xmm2, negate the multiplication result and subtract xmm3/m32 and put result in xmm1.
T}
T{
EVEX.LLIG.66.0F38.W0 BF /r VFNMSUB231SS xmm1 {k1}{z}, xmm2, xmm3/m32{er}
T}	B	V/V	AVX512F	T{
Multiply scalar single-precision floating-point value from xmm2 and xmm3/m32, negate the multiplication result and subtract xmm1 and put result in xmm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING <a
href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r, w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
B	Tuple1 Scalar	ModRM:reg (r, w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SS DESCRIPTION  href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#description"
class="anchor">¶

.PP
VFNMSUB132SS: Multiplies the low packed single-precision floating-point
value from the first source operand to the low packed single-precision
floating-point value in the third source operand. From negated infinite
precision intermediate result, the low single-precision floating-point
value in the second source operand, performs rounding and stores the
resulting packed single-precision floating-point value to the
destination operand (first source operand).

.PP
VFNMSUB213SS: Multiplies the low packed single-precision floating-point
value from the second source operand to the low packed single-precision
floating-point value in the first source operand. From negated infinite
precision intermediate result, the low single-precision floating-point
value in the third source operand, performs rounding and stores the
resulting packed single-precision floating-point value to the
destination operand (first source operand).

.PP
VFNMSUB231SS: Multiplies the low packed single-precision floating-point
value from the second source to the low packed single-precision
floating-point value in the third source operand. From negated infinite
precision intermediate result, the low single-precision floating-point
value in the first source operand, performs rounding and stores the
resulting packed single-precision floating-point value to the
destination operand (first source operand).

.PP
VEX.128 and EVEX encoded version: The destination operand (also first
source operand) is encoded in reg_field. The second source operand is
encoded in VEX.vvvv/EVEX.vvvv. The third source operand is encoded in
rm_field. Bits 127:32 of the destination are unchanged. Bits
MAXVL-1:128 of the destination register are zeroed.

.PP
EVEX encoded version: The low doubleword element of the destination is
updated according to the writemask.

.PP
Compiler tools may optionally support a complementary mnemonic for each
instruction mnemonic listed in the opcode/instruction column of the
summary table. The behavior of the complementary mnemonic in situations

.PP
involving NANs are governed by the definition of the instruction
mnemonic defined in the opcode/instruction column.

.SS OPERATION  href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#operation"
class="anchor">¶

.EX
In the operations below, “*” and “-” symbols represent multiplication and subtraction with infinite precision inputs and outputs (no
rounding).
.EE

.SS VFNMSUB132SS DEST, SRC2, SRC3 (EVEX ENCODED VERSION) <a
href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#vfnmsub132ss-dest--src2--src3--evex-encoded-version-"
class="anchor">¶

.EX
IF (EVEX.b = 1) and SRC3 *is a register*
    THEN
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(EVEX.RC);
    ELSE
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(MXCSR.RC);
FI;
IF k1[0] or *no writemask*
    THEN DEST[31:0] := RoundFPControl(-(DEST[31:0]*SRC3[31:0]) - SRC2[31:0])
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing-masking
                THEN DEST[31:0] := 0
        FI;
FI;
DEST[127:32] := DEST[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS VFNMSUB213SS DEST, SRC2, SRC3 (EVEX ENCODED VERSION) <a
href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#vfnmsub213ss-dest--src2--src3--evex-encoded-version-"
class="anchor">¶

.EX
IF (EVEX.b = 1) and SRC3 *is a register*
    THEN
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(EVEX.RC);
    ELSE
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(MXCSR.RC);
FI;
IF k1[0] or *no writemask*
    THEN DEST[31:0] := RoundFPControl(-(SRC2[31:0]*DEST[31:0]) - SRC3[31:0])
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing-masking
                THEN DEST[31:0] := 0
        FI;
FI;
DEST[127:32] := DEST[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS VFNMSUB231SS DEST, SRC2, SRC3 (EVEX ENCODED VERSION) <a
href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#vfnmsub231ss-dest--src2--src3--evex-encoded-version-"
class="anchor">¶

.EX
IF (EVEX.b = 1) and SRC3 *is a register*
    THEN
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(EVEX.RC);
    ELSE
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(MXCSR.RC);
FI;
IF k1[0] or *no writemask*
    THEN DEST[31:0] := RoundFPControl(-(SRC2[31:0]*SRC3[63:0]) - DEST[31:0])
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing-masking
                THEN DEST[31:0] := 0
        FI;
FI;
DEST[127:32] := DEST[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS VFNMSUB132SS DEST, SRC2, SRC3 (VEX ENCODED VERSION) <a
href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#vfnmsub132ss-dest--src2--src3--vex-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := RoundFPControl_MXCSR(- (DEST[31:0]*SRC3[31:0]) - SRC2[31:0])
DEST[127:32] := DEST[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS VFNMSUB213SS DEST, SRC2, SRC3 (VEX ENCODED VERSION) <a
href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#vfnmsub213ss-dest--src2--src3--vex-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := RoundFPControl_MXCSR(- (SRC2[31:0]*DEST[31:0]) - SRC3[31:0])
DEST[127:32] := DEST[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS VFNMSUB231SS DEST, SRC2, SRC3 (VEX ENCODED VERSION) <a
href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#vfnmsub231ss-dest--src2--src3--vex-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := RoundFPControl_MXCSR(- (SRC2[31:0]*SRC3[31:0]) - DEST[31:0])
DEST[127:32] := DEST[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT <a
href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VFNMSUBxxxSS __m128 _mm_fnmsub_round_ss(__m128 a, __m128 b, __m128 c, int r);

VFNMSUBxxxSS __m128 _mm_mask_fnmsub_ss(__m128 a, __mmask8 k, __m128 b, __m128 c);

VFNMSUBxxxSS __m128 _mm_maskz_fnmsub_ss(__mmask8 k, __m128 a, __m128 b, __m128 c);

VFNMSUBxxxSS __m128 _mm_mask3_fnmsub_ss(__m128 a, __m128 b, __m128 c, __mmask8 k);

VFNMSUBxxxSS __m128 _mm_mask_fnmsub_round_ss(__m128 a, __mmask8 k, __m128 b, __m128 c, int r);

VFNMSUBxxxSS __m128 _mm_maskz_fnmsub_round_ss(__mmask8 k, __m128 a, __m128 b, __m128 c, int r);

VFNMSUBxxxSS __m128 _mm_mask3_fnmsub_round_ss(__m128 a, __m128 b, __m128 c, __mmask8 k, int r);

VFNMSUBxxxSS __m128 _mm_fnmsub_ss (__m128 a, __m128 b, __m128 c);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS <a
href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Overflow, Underflow, Invalid, Precision, Denormal.

.SS OTHER EXCEPTIONS  href="./vfnmsub132ss:vfnmsub213ss:vfnmsub231ss.html#other-exceptions"
class="anchor">¶

.PP
VEX-encoded instructions, see Table
2-20, “Type 3 Class Exception Conditions.”

.PP
EVEX-encoded instructions, see Table
2-47, “Type E3 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
