'\" t
.nh
.TH "X86-VPMOVDB-VPMOVSDB-VPMOVUSDB" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VPMOVDB-VPMOVSDB-VPMOVUSDB - DOWN CONVERT DWORD TO BYTE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.128.F3.0F38.W0 31 /r VPMOVDB xmm1/m32 {k1}{z}, xmm2
T}	A	V/V	AVX512VL AVX512F	T{
Converts 4 packed double-word integers from xmm2 into 4 packed byte integers in xmm1/m32 with truncation under writemask k1.
T}
T{
EVEX.128.F3.0F38.W0 21 /r VPMOVSDB xmm1/m32 {k1}{z}, xmm2
T}	A	V/V	AVX512VL AVX512F	T{
Converts 4 packed signed double-word integers from xmm2 into 4 packed signed byte integers in xmm1/m32 using signed saturation under writemask k1.
T}
T{
EVEX.128.F3.0F38.W0 11 /r VPMOVUSDB xmm1/m32 {k1}{z}, xmm2
T}	A	V/V	AVX512VL AVX512F	T{
Converts 4 packed unsigned double-word integers from xmm2 into 4 packed unsigned byte integers in xmm1/m32 using unsigned saturation under writemask k1.
T}
T{
EVEX.256.F3.0F38.W0 31 /r VPMOVDB xmm1/m64 {k1}{z}, ymm2
T}	A	V/V	AVX512VL AVX512F	T{
Converts 8 packed double-word integers from ymm2 into 8 packed byte integers in xmm1/m64 with truncation under writemask k1.
T}
T{
EVEX.256.F3.0F38.W0 21 /r VPMOVSDB xmm1/m64 {k1}{z}, ymm2
T}	A	V/V	AVX512VL AVX512F	T{
Converts 8 packed signed double-word integers from ymm2 into 8 packed signed byte integers in xmm1/m64 using signed saturation under writemask k1.
T}
T{
EVEX.256.F3.0F38.W0 11 /r VPMOVUSDB xmm1/m64 {k1}{z}, ymm2
T}	A	V/V	AVX512VL AVX512F	T{
Converts 8 packed unsigned double-word integers from ymm2 into 8 packed unsigned byte integers in xmm1/m64 using unsigned saturation under writemask k1.
T}
T{
EVEX.512.F3.0F38.W0 31 /r VPMOVDB xmm1/m128 {k1}{z}, zmm2
T}	A	V/V	AVX512F	T{
Converts 16 packed double-word integers from zmm2 into 16 packed byte integers in xmm1/m128 with truncation under writemask k1.
T}
T{
EVEX.512.F3.0F38.W0 21 /r VPMOVSDB xmm1/m128 {k1}{z}, zmm2
T}	A	V/V	AVX512F	T{
Converts 16 packed signed double-word integers from zmm2 into 16 packed signed byte integers in xmm1/m128 using signed saturation under writemask k1.
T}
T{
EVEX.512.F3.0F38.W0 11 /r VPMOVUSDB xmm1/m128 {k1}{z}, zmm2
T}	A	V/V	AVX512F	T{
Converts 16 packed unsigned double-word integers from zmm2 into 16 packed unsigned byte integers in xmm1/m128 using unsigned saturation under writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="./vpmovdb:vpmovsdb:vpmovusdb.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Quarter Mem	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SS DESCRIPTION  href="./vpmovdb:vpmovsdb:vpmovusdb.html#description"
class="anchor">¶

.PP
VPMOVDB down converts 32-bit integer elements in the source operand (the
second operand) into packed bytes using truncation. VPMOVSDB converts
signed 32-bit integers into packed signed bytes using signed saturation.
VPMOVUSDB convert unsigned double-word values into unsigned byte values
using unsigned saturation.

.PP
The source operand is a ZMM/YMM/XMM register. The destination operand is
a XMM register or a 128/64/32-bit memory location.

.PP
Down-converted byte elements are written to the destination operand (the
first operand) from the least-significant byte. Byte elements of the
destination operand are updated according to the writemask. Bits
(MAXVL-1:128/64/32) of the register destination are zeroed.

.PP
EVEX.vvvv is reserved and must be 1111b otherwise instructions will
#UD.

.SS OPERATION  href="./vpmovdb:vpmovsdb:vpmovusdb.html#operation"
class="anchor">¶

.SS VPMOVDB INSTRUCTION (EVEX ENCODED VERSIONS) WHEN DEST IS A REGISTER <a
href="./vpmovdb:vpmovsdb:vpmovusdb.html#vpmovdb-instruction--evex-encoded-versions--when-dest-is-a-register"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 8
    m := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i] := TruncateDoubleWordToByte (SRC[m+31:m])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+7:i] remains unchanged*
                ELSE *zeroing-masking*
                        ; zeroing-masking
                    DEST[i+7:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL/4] := 0;
.EE

.SS VPMOVDB INSTRUCTION (EVEX ENCODED VERSIONS) WHEN DEST IS MEMORY <a
href="./vpmovdb:vpmovsdb:vpmovusdb.html#vpmovdb-instruction--evex-encoded-versions--when-dest-is-memory"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 8
    m := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i] := TruncateDoubleWordToByte (SRC[m+31:m])
        ELSE *DEST[i+7:i] remains unchanged* ; merging-masking
    FI;
ENDFOR
.EE

.SS VPMOVSDB INSTRUCTION (EVEX ENCODED VERSIONS) WHEN DEST IS A REGISTER <a
href="./vpmovdb:vpmovsdb:vpmovusdb.html#vpmovsdb-instruction--evex-encoded-versions--when-dest-is-a-register"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 8
    m := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i] := SaturateSignedDoubleWordToByte (SRC[m+31:m])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+7:i] remains unchanged*
                ELSE *zeroing-masking*
                        ; zeroing-masking
                    DEST[i+7:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL/4] := 0;
.EE

.SS VPMOVSDB INSTRUCTION (EVEX ENCODED VERSIONS) WHEN DEST IS MEMORY <a
href="./vpmovdb:vpmovsdb:vpmovusdb.html#vpmovsdb-instruction--evex-encoded-versions--when-dest-is-memory"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 8
    m := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i] := SaturateSignedDoubleWordToByte (SRC[m+31:m])
        ELSE *DEST[i+7:i] remains unchanged* ; merging-masking
    FI;
ENDFOR
.EE

.SS VPMOVUSDB INSTRUCTION (EVEX ENCODED VERSIONS) WHEN DEST IS A REGISTER <a
href="./vpmovdb:vpmovsdb:vpmovusdb.html#vpmovusdb-instruction--evex-encoded-versions--when-dest-is-a-register"
class="anchor">¶

.EX
    (KL, VL) = (4, 128), (8, 256), (16, 512)
    FOR j := 0 TO KL-1
        i := j * 8
        m := j * 32
        IF k1[j] OR *no writemask*
            THEN DEST[i+7:i] := SaturateUnsignedDoubleWordToByte (SRC[m+31:m])
            ELSE
                IF *merging-masking* ; merging-masking
                    THEN *DEST[i+7:i] remains unchanged*
                    ELSE *zeroing-masking*
                            ; zeroing-masking
                        DEST[i+7:i] := 0
                FI
        FI;
    ENDFOR
    DEST[MAXVL-1:VL/4] := 0;
VPMOVUSDB instruction (EVEX encoded versions) when dest is memory
    (KL, VL) = (4, 128), (8, 256), (16, 512)
    FOR j := 0 TO KL-1
        i := j * 8
        m := j * 32
        IF k1[j] OR *no writemask*
            THEN DEST[i+7:i] := SaturateUnsignedDoubleWordToByte (SRC[m+31:m])
            ELSE *DEST[i+7:i] remains unchanged* ; merging-masking
        FI;
    ENDFOR
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENTS <a
href="./vpmovdb:vpmovsdb:vpmovusdb.html#intel-c-c++-compiler-intrinsic-equivalents"
class="anchor">¶

.EX
VPMOVDB __m128i _mm512_cvtepi32_epi8( __m512i a);

VPMOVDB __m128i _mm512_mask_cvtepi32_epi8(__m128i s, __mmask16 k, __m512i a);

VPMOVDB __m128i _mm512_maskz_cvtepi32_epi8( __mmask16 k, __m512i a);

VPMOVDB void _mm512_mask_cvtepi32_storeu_epi8(void * d, __mmask16 k, __m512i a);

VPMOVSDB __m128i _mm512_cvtsepi32_epi8( __m512i a);

VPMOVSDB __m128i _mm512_mask_cvtsepi32_epi8(__m128i s, __mmask16 k, __m512i a);

VPMOVSDB __m128i _mm512_maskz_cvtsepi32_epi8( __mmask16 k, __m512i a);

VPMOVSDB void _mm512_mask_cvtsepi32_storeu_epi8(void * d, __mmask16 k, __m512i a);

VPMOVUSDB __m128i _mm512_cvtusepi32_epi8( __m512i a);

VPMOVUSDB __m128i _mm512_mask_cvtusepi32_epi8(__m128i s, __mmask16 k, __m512i a);

VPMOVUSDB __m128i _mm512_maskz_cvtusepi32_epi8( __mmask16 k, __m512i a);

VPMOVUSDB void _mm512_mask_cvtusepi32_storeu_epi8(void * d, __mmask16 k, __m512i a);

VPMOVUSDB __m128i _mm256_cvtusepi32_epi8(__m256i a);

VPMOVUSDB __m128i _mm256_mask_cvtusepi32_epi8(__m128i a, __mmask8 k, __m256i b);

VPMOVUSDB __m128i _mm256_maskz_cvtusepi32_epi8( __mmask8 k, __m256i b);

VPMOVUSDB void _mm256_mask_cvtusepi32_storeu_epi8(void * , __mmask8 k, __m256i b);

VPMOVUSDB __m128i _mm_cvtusepi32_epi8(__m128i a);

VPMOVUSDB __m128i _mm_mask_cvtusepi32_epi8(__m128i a, __mmask8 k, __m128i b);

VPMOVUSDB __m128i _mm_maskz_cvtusepi32_epi8( __mmask8 k, __m128i b);

VPMOVUSDB void _mm_mask_cvtusepi32_storeu_epi8(void * , __mmask8 k, __m128i b);

VPMOVSDB __m128i _mm256_cvtsepi32_epi8(__m256i a);

VPMOVSDB __m128i _mm256_mask_cvtsepi32_epi8(__m128i a, __mmask8 k, __m256i b);

VPMOVSDB __m128i _mm256_maskz_cvtsepi32_epi8( __mmask8 k, __m256i b);

VPMOVSDB void _mm256_mask_cvtsepi32_storeu_epi8(void * , __mmask8 k, __m256i b);

VPMOVSDB __m128i _mm_cvtsepi32_epi8(__m128i a);

VPMOVSDB __m128i _mm_mask_cvtsepi32_epi8(__m128i a, __mmask8 k, __m128i b);

VPMOVSDB __m128i _mm_maskz_cvtsepi32_epi8( __mmask8 k, __m128i b);

VPMOVSDB void _mm_mask_cvtsepi32_storeu_epi8(void * , __mmask8 k, __m128i b);

VPMOVDB __m128i _mm256_cvtepi32_epi8(__m256i a);

VPMOVDB __m128i _mm256_mask_cvtepi32_epi8(__m128i a, __mmask8 k, __m256i b);

VPMOVDB __m128i _mm256_maskz_cvtepi32_epi8( __mmask8 k, __m256i b);

VPMOVDB void _mm256_mask_cvtepi32_storeu_epi8(void * , __mmask8 k, __m256i b);

VPMOVDB __m128i _mm_cvtepi32_epi8(__m128i a);

VPMOVDB __m128i _mm_mask_cvtepi32_epi8(__m128i a, __mmask8 k, __m128i b);

VPMOVDB __m128i _mm_maskz_cvtepi32_epi8( __mmask8 k, __m128i b);

VPMOVDB void _mm_mask_cvtepi32_storeu_epi8(void * , __mmask8 k, __m128i b);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS <a
href="./vpmovdb:vpmovsdb:vpmovusdb.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SS OTHER EXCEPTIONS  href="./vpmovdb:vpmovsdb:vpmovusdb.html#other-exceptions"
class="anchor">¶

.PP
EVEX-encoded instruction, see Table
2-53, “Type E6 Class Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If EVEX.vvvv != 1111B.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
