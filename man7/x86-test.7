'\" t
.nh
.TH "X86-TEST" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
TEST - LOGICAL COMPARE
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
A8 ib	TEST AL, imm8	I	Valid	Valid	T{
AND imm8 with AL; set SF, ZF, PF according to result.
T}
A9 iw	TEST AX, imm16	I	Valid	Valid	T{
AND imm16 with AX; set SF, ZF, PF according to result.
T}
A9 id	TEST EAX, imm32	I	Valid	Valid	T{
AND imm32 with EAX; set SF, ZF, PF according to result.
T}
REX.W + A9 id	TEST RAX, imm32	I	Valid	N.E.	T{
AND imm32 sign-extended to 64-bits with RAX; set SF, ZF, PF according to result.
T}
F6 /0 ib	TEST r/m8, imm8	MI	Valid	Valid	T{
AND imm8 with r/m8; set SF, ZF, PF according to result.
T}
REX + F6 /0 ib	TEST r/m81, imm8	MI	Valid	N.E.	T{
AND imm8 with r/m8; set SF, ZF, PF according to result.
T}
F7 /0 iw	TEST r/m16, imm16	MI	Valid	Valid	T{
AND imm16 with r/m16; set SF, ZF, PF according to result.
T}
F7 /0 id	TEST r/m32, imm32	MI	Valid	Valid	T{
AND imm32 with r/m32; set SF, ZF, PF according to result.
T}
REX.W + F7 /0 id	TEST r/m64, imm32	MI	Valid	N.E.	T{
AND imm32 sign-extended to 64-bits with r/m64; set SF, ZF, PF according to result.
T}
84 /r	TEST r/m8, r8	MR	Valid	Valid	T{
AND r8 with r/m8; set SF, ZF, PF according to result.
T}
REX + 84 /r	TEST r/m81, r81	MR	Valid	N.E.	T{
AND r8 with r/m8; set SF, ZF, PF according to result.
T}
85 /r	TEST r/m16, r16	MR	Valid	Valid	T{
AND r16 with r/m16; set SF, ZF, PF according to result.
T}
85 /r	TEST r/m32, r32	MR	Valid	Valid	T{
AND r32 with r/m32; set SF, ZF, PF according to result.
T}
REX.W + 85 /r	TEST r/m64, r64	MR	Valid	N.E.	T{
AND r64 with r/m64; set SF, ZF, PF according to result.
T}
.TE

.PP
.RS

.PP
1\&. In 64-bit mode, r/m8 can not be encoded to access the following
byte registers if a REX prefix is used: AH, BH, CH, DH.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
I	AL/AX/EAX/RAX	imm8/16/32	N/A	N/A
MI	ModRM:r/m (r)	imm8/16/32	N/A	N/A
MR	ModRM:r/m (r)	ModRM:reg (r)	N/A	N/A
.TE

.SH DESCRIPTION
Computes the bit-wise logical AND of first operand (source 1 operand)
and the second operand (source 2 operand) and sets the SF, ZF, and PF
status flags according to the result. The result is then discarded.

.PP
In 64-bit mode, using a REX prefix in the form of REX.R permits access
to additional registers (R8-R15). Using a REX prefix in the form of
REX.W promotes operation to 64 bits. See the summary chart at the
beginning of this section for encoding data and limits.

.SH OPERATION
.EX
TEMP := SRC1 AND SRC2;
SF := MSB(TEMP);
IF TEMP = 0
    THEN ZF := 1;
    ELSE ZF := 0;
FI:
PF := BitwiseXNOR(TEMP[0:7]);
CF := 0;
OF := 0;
(* AF is undefined *)
.EE

.SH FLAGS AFFECTED
The OF and CF flags are set to 0. The SF, ZF, and PF flags are set
according to the result (see the “Operation” section above). The state
of the AF flag is undefined.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
