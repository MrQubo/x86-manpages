'\" t
.nh
.TH "X86-VGETMANTSS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VGETMANTSS - EXTRACT FLOAT32 VECTOR OF NORMALIZED MANTISSA FROM FLOAT32 SCALAR
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 Bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.LLIG.66.0F3A.W0 27 /r ib VGETMANTSS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8
T}	A	V/V	AVX512F	T{
Extract the normalized mantissa from the low float32 element of xmm3/m32 using imm8 for sign control and mantissa interval normalization, store the mantissa to xmm1 under the writemask k1 and merge with the other elements of xmm2.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vgetmantss.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SS DESCRIPTION
Convert the single-precision floating values in the low doubleword
element of the second source operand (the third operand) to
single-precision floating-point value with the mantissa normalization
and sign control specified by the imm8 byte, see Figure
5-15
\[la]vgetmantpd.html#fig\-5\-15\[ra]\&. The converted result is written to the
low doubleword element of the destination operand (the first operand)
using writemask k1. Bits (127:32) of the XMM register destination are
copied from corresponding bits in the first source operand. The
normalized mantissa is specified by interv (imm8[1:0]) and the sign
control (sc) is specified by bits 3:2 of the immediate byte.

.PP
The conversion operation is:

.PP
GetMant(x) = ±2k|x.significand|

.PP
where:

.PP
1 &lt;= |x.significand| &lt; 2

.PP
Unbiased exponent k can be either 0 or -1, depending on the interval
range defined by interv, the range of the significand and whether the
exponent of the source is even or odd. The sign of the final result is
determined by sc and the source sign. The encoded value of imm8[1:0]
and sign control are shown in Figure 5-15
\[la]vgetmantpd.html#fig\-5\-15\[ra]\&.

.PP
The converted single-precision floating-point result is encoded
according to the sign control, the unbiased exponent k (adding bias) and
a mantissa normalized to the range specified by interv.

.PP
The GetMant() function follows Table 5-18
\[la]vgetmantpd.html#tbl\-5\-18\[ra]
when dealing with floating-point special numbers.

.PP
If writemasking is used, the low doubleword element of the destination
operand is conditionally updated depending on the value of writemask
register k1. If writemasking is not used, the low doubleword element of
the destination operand is unconditionally updated.

.SS OPERATION
.EX
// getmant_fp32(src, sign_control, normalization_interval) is defined in the operation section of VGETMANTPS
.EE

.SS VGETMANTSS (EVEX ENCODED VERSION)  href="vgetmantss.html#vgetmantss--evex-encoded-version-"
class="anchor">¶

.EX
SignCtrl[1:0] := IMM8[3:2];
Interv[1:0] := IMM8[1:0];
IF k1[0] OR *no writemask*
    THEN DEST[31:0] :=
            getmant_fp32(src, sign_control, normalization_interval)
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing-masking
                DEST[31:0] := 0
        FI
FI;
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vgetmantss.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VGETMANTSS __m128 _mm_getmant_ss( __m128 a, __m128 b, enum intv, enum sgn);

VGETMANTSS __m128 _mm_mask_getmant_ss(__m128 s, __mmask8 k, __m128 a, __m128 b, enum intv, enum sgn);

VGETMANTSS __m128 _mm_maskz_getmant_ss( __mmask8 k, __m128 a, __m128 b, enum intv, enum sgn);

VGETMANTSS __m128 _mm_getmant_round_ss( __m128 a, __m128 b, enum intv, enum sgn, int r);

VGETMANTSS __m128 _mm_mask_getmant_round_ss(__m128 s, __mmask8 k, __m128 a, __m128 b, enum intv, enum sgn, int r);

VGETMANTSS __m128 _mm_maskz_getmant_round_ss( __mmask8 k, __m128 a, __m128 b, enum intv, enum sgn, int r);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vgetmantss.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Denormal, Invalid

.SS OTHER EXCEPTIONS
See Table 2-47, “Type E3 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
