'\" t
.nh
.TH "X86-FBLD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
FBLD - LOAD BINARY CODED DECIMAL
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
DF /4	FBLD m80bcd	Valid	Valid	T{
Convert BCD value to floating-point and push onto the FPU stack.
T}
.TE

.SH DESCRIPTION
Converts the BCD source operand into double extended-precision
floating-point format and pushes the value onto the FPU stack. The
source operand is loaded without rounding errors. The sign of the source
operand is preserved, including that of −0.

.PP
The packed BCD digits are assumed to be in the range 0 through 9; the
instruction does not check for invalid digits (AH through FH).
Attempting to load an invalid encoding produces an undefined result.

.PP
This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.

.SH OPERATION
.EX
TOP := TOP − 1;
ST(0) := ConvertToDoubleExtendedPrecisionFP(SRC);
.EE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
C1	T{
Set to 1 if stack overflow occurred; otherwise, set to 0.
T}
C0, C2, C3	Undefined.
.TE

.SH FLOATING-POINT EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#IS	Stack overflow occurred.
.TE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
