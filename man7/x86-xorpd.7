'\" t
.nh
.TH "X86-XORPD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
XORPD - BITWISE LOGICAL XOR OF PACKED DOUBLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 57/r XORPD xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Return the bitwise logical XOR of packed double precision floating-point values in xmm1 and xmm2/mem.
T}
T{
VEX.128.66.0F.WIG 57 /r VXORPD xmm1,xmm2, xmm3/m128
T}	B	V/V	AVX	T{
Return the bitwise logical XOR of packed double precision floating-point values in xmm2 and xmm3/mem.
T}
T{
VEX.256.66.0F.WIG 57 /r VXORPD ymm1, ymm2, ymm3/m256
T}	B	V/V	AVX	T{
Return the bitwise logical XOR of packed double precision floating-point values in ymm2 and ymm3/mem.
T}
T{
EVEX.128.66.0F.W1 57 /r VXORPD xmm1 {k1}{z}, xmm2, xmm3/m128/m64bcst
T}	C	V/V	AVX512VL AVX512DQ	T{
Return the bitwise logical XOR of packed double precision floating-point values in xmm2 and xmm3/m128/m64bcst subject to writemask k1.
T}
T{
EVEX.256.66.0F.W1 57 /r VXORPD ymm1 {k1}{z}, ymm2, ymm3/m256/m64bcst
T}	C	V/V	AVX512VL AVX512DQ	T{
Return the bitwise logical XOR of packed double precision floating-point values in ymm2 and ymm3/m256/m64bcst subject to writemask k1.
T}
T{
EVEX.512.66.0F.W1 57 /r VXORPD zmm1 {k1}{z}, zmm2, zmm3/m512/m64bcst
T}	C	V/V	AVX512DQ	T{
Return the bitwise logical XOR of packed double precision floating-point values in zmm2 and zmm3/m512/m64bcst subject to writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Full	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SS DESCRIPTION
Performs a bitwise logical XOR of the two, four or eight packed double
precision floating-point values from the first source operand and the
second source operand, and stores the result in the destination operand.

.PP
EVEX.512 encoded version: The first source operand is a ZMM register.
The second source operand can be a ZMM register or a vector memory
location. The destination operand is a ZMM register conditionally
updated with write-mask k1.

.PP
VEX.256 and EVEX.256 encoded versions: The first source operand is a YMM
register. The second source operand is a YMM register or a 256-bit
memory location. The destination operand is a YMM register
(conditionally updated with writemask k1 in case of EVEX). The upper
bits (MAXVL-1:256) of the corresponding ZMM register destination are
zeroed.

.PP
VEX.128 and EVEX.128 encoded versions: The first source operand is an
XMM register. The second source operand is an XMM register or 128-bit
memory location. The destination operand is an XMM register
(conditionally updated with writemask k1 in case of EVEX). The upper
bits (MAXVL-1:128) of the corresponding ZMM register destination are
zeroed.

.PP
128-bit Legacy SSE version: The second source can be an XMM register or
an 128-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL-1:128) of the
corresponding register destination are unmodified.

.SS OPERATION
.SS VXORPD (EVEX ENCODED VERSIONS)
.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask* THEN
            IF (EVEX.b == 1) AND (SRC2 *is memory*)
                THEN DEST[i+63:i] := SRC1[i+63:i] BITWISE XOR SRC2[63:0];
                ELSE DEST[i+63:i] := SRC1[i+63:i] BITWISE XOR SRC2[i+63:i];
            FI;
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE *zeroing-masking*
                        ; zeroing-masking
                    DEST[i+63:i] = 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VXORPD (VEX.256 ENCODED VERSION)  href="xorpd.html#vxorpd--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[63:0] := SRC1[63:0] BITWISE XOR SRC2[63:0]
DEST[127:64] := SRC1[127:64] BITWISE XOR SRC2[127:64]
DEST[191:128] := SRC1[191:128] BITWISE XOR SRC2[191:128]
DEST[255:192] := SRC1[255:192] BITWISE XOR SRC2[255:192]
DEST[MAXVL-1:256] := 0
.EE

.SS VXORPD (VEX.128 ENCODED VERSION)  href="xorpd.html#vxorpd--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[63:0] := SRC1[63:0] BITWISE XOR SRC2[63:0]
DEST[127:64] := SRC1[127:64] BITWISE XOR SRC2[127:64]
DEST[MAXVL-1:128] := 0
.EE

.SS XORPD (128-BIT LEGACY SSE VERSION)  href="xorpd.html#xorpd--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[63:0] := DEST[63:0] BITWISE XOR SRC[63:0]
DEST[127:64] := DEST[127:64] BITWISE XOR SRC[127:64]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="xorpd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VXORPD __m512d _mm512_xor_pd (__m512d a, __m512d b);

VXORPD __m512d _mm512_mask_xor_pd (__m512d a, __mmask8 m, __m512d b);

VXORPD __m512d _mm512_maskz_xor_pd (__mmask8 m, __m512d a);

VXORPD __m256d _mm256_xor_pd (__m256d a, __m256d b);

VXORPD __m256d _mm256_mask_xor_pd (__m256d a, __mmask8 m, __m256d b);

VXORPD __m256d _mm256_maskz_xor_pd (__mmask8 m, __m256d a);

XORPD __m128d _mm_xor_pd (__m128d a, __m128d b);

VXORPD __m128d _mm_mask_xor_pd (__m128d a, __mmask8 m, __m128d b);

VXORPD __m128d _mm_maskz_xor_pd (__mmask8 m, __m128d a);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS
None.

.SS OTHER EXCEPTIONS
Non-EVEX-encoded instructions, see Table
2-21, “Type 4 Class Exception Conditions.”

.PP
EVEX-encoded instructions, see Table
2-49, “Type E4 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
