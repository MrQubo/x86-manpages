'\" t
.nh
.TH "X86-HADDPD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
HADDPD - PACKED DOUBLE PRECISION FLOATING-POINT HORIZONTAL ADD
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32-bit Mode\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 7C /r HADDPD xmm1, xmm2/m128
T}	RM	V/V	SSE3	T{
Horizontal add packed double precision floating-point values from xmm2/m128 to xmm1.
T}
T{
VEX.128.66.0F.WIG 7C /r VHADDPD xmm1,xmm2, xmm3/m128
T}	RVM	V/V	AVX	T{
Horizontal add packed double precision floating-point values from xmm2 and xmm3/mem.
T}
T{
VEX.256.66.0F.WIG 7C /r VHADDPD ymm1, ymm2, ymm3/m256
T}	RVM	V/V	AVX	T{
Horizontal add packed double precision floating-point values from ymm2 and ymm3/mem.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
RVM	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Adds the double precision floating-point values in the high and low
quadwords of the destination operand and stores the result in the low
quadword of the destination operand.

.PP
Adds the double precision floating-point values in the high and low
quadwords of the source operand and stores the result in the high
quadword of the destination operand.

.PP
In 64-bit mode, use of the REX.R prefix permits this instruction to
access additional registers (XMM8-XMM15).

.PP
See Figure 3-17
\[la]haddpd.html#fig\-3\-17\[ra] for HADDPD; see Figure
3-18
\[la]haddpd.html#fig\-3\-18\[ra] for VHADDPD.

.PP
128-bit Legacy SSE version: The second source can be an XMM register or
an 128-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL-1:128) of the
corresponding YMM register destination are unmodified.

.PP
VEX.128 encoded version: the first source operand is an XMM register or
128-bit memory location. The destination operand is an XMM register. The
upper bits (MAXVL-1:128) of the corresponding YMM register destination
are zeroed.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256-bit memory
location. The destination operand is a YMM register.

.SH OPERATION
.SS HADDPD (128-BIT LEGACY SSE VERSION)  href="haddpd.html#haddpd--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[63:0] := SRC1[127:64] + SRC1[63:0]
DEST[127:64] := SRC2[127:64] + SRC2[63:0]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS VHADDPD (VEX.128 ENCODED VERSION)  href="haddpd.html#vhaddpd--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[63:0] := SRC1[127:64] + SRC1[63:0]
DEST[127:64] := SRC2[127:64] + SRC2[63:0]
DEST[MAXVL-1:128] := 0
.EE

.SS VHADDPD (VEX.256 ENCODED VERSION)  href="haddpd.html#vhaddpd--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[63:0] := SRC1[127:64] + SRC1[63:0]
DEST[127:64] := SRC2[127:64] + SRC2[63:0]
DEST[191:128] := SRC1[255:192] + SRC1[191:128]
DEST[255:192] := SRC2[255:192] + SRC2[191:128]
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="haddpd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VHADDPD __m256d _mm256_hadd_pd (__m256d a, __m256d b);

HADDPD __m128d _mm_hadd_pd (__m128d a, __m128d b);
.EE

.SH EXCEPTIONS
When the source operand is a memory operand, the operand must be aligned
on a 16-byte boundary or a general-protection exception (#GP) will be
generated.

.SH NUMERIC EXCEPTIONS
Overflow, Underflow, Invalid, Precision, Denormal.

.SH OTHER EXCEPTIONS
See Table 2-19, “Type 2 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
