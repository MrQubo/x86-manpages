'\" t
.nh
.TH "X86-VPERMD-VPERMW" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VPERMD-VPERMW - PERMUTE PACKED DOUBLEWORD-WORD ELEMENTS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
VEX.256.66.0F38.W0 36 /r VPERMD ymm1, ymm2, ymm3/m256
T}	A	V/V	AVX2	T{
Permute doublewords in ymm3/m256 using indices in ymm2 and store the result in ymm1.
T}
T{
EVEX.256.66.0F38.W0 36 /r VPERMD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
T}	B	V/V	AVX512VL AVX512F	T{
Permute doublewords in ymm3/m256/m32bcst using indexes in ymm2 and store the result in ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F38.W0 36 /r VPERMD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
T}	B	V/V	AVX512F	T{
Permute doublewords in zmm3/m512/m32bcst using indices in zmm2 and store the result in zmm1 using writemask k1.
T}
T{
EVEX.128.66.0F38.W1 8D /r VPERMW xmm1 {k1}{z}, xmm2, xmm3/m128
T}	C	V/V	AVX512VL AVX512BW	T{
Permute word integers in xmm3/m128 using indexes in xmm2 and store the result in xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F38.W1 8D /r VPERMW ymm1 {k1}{z}, ymm2, ymm3/m256
T}	C	V/V	AVX512VL AVX512BW	T{
Permute word integers in ymm3/m256 using indexes in ymm2 and store the result in ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F38.W1 8D /r VPERMW zmm1 {k1}{z}, zmm2, zmm3/m512
T}	C	V/V	AVX512BW	T{
Permute word integers in zmm3/m512 using indexes in zmm2 and store the result in zmm1 using writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="./vpermd:vpermw.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
B	Full	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Full Mem	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SS DESCRIPTION
Copies doublewords (or words) from the second source operand (the third
operand) to the destination operand (the first operand) according to the
indices in the first source operand (the second operand). Note that this
instruction permits a doubleword (word) in the source operand to be
copied to more than one location in the destination operand.

.PP
VEX.256 encoded VPERMD: The first and second operands are YMM registers,
the third operand can be a YMM register or memory location. Bits
(MAXVL-1:256) of the corresponding destination register are zeroed.

.PP
EVEX encoded VPERMD: The first and second operands are ZMM/YMM
registers, the third operand can be a ZMM/YMM register, a 512/256-bit
memory location or a 512/256-bit vector broadcasted from a 32-bit memory
location. The elements in the destination are updated using the
writemask k1.

.PP
VPERMW: first and second operands are ZMM/YMM/XMM registers, the third
operand can be a ZMM/YMM/XMM register, or a 512/256/128-bit memory
location. The destination is updated using the writemask k1.

.PP
EVEX.128 encoded versions: Bits (MAXVL-1:128) of the corresponding ZMM
register are zeroed.

.SS OPERATION
.SS VPERMD (EVEX ENCODED VERSIONS)  href="./vpermd:vpermw.html#vpermd--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (8, 256), (16, 512)
IF VL = 256 THEN n := 2; FI;
IF VL = 512 THEN n := 3; FI;
FOR j := 0 TO KL-1
    i := j * 32
    id := 32*SRC1[i+n:i]
    IF k1[j] OR *no writemask*
        THEN
            IF (EVEX.b = 1) AND (SRC2 *is memory*)
                THEN DEST[i+31:i] := SRC2[31:0];
                ELSE DEST[i+31:i] := SRC2[id+31:id];
            FI;
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[i+31:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VPERMD (VEX.256 ENCODED VERSION)  href="./vpermd:vpermw.html#vpermd--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := (SRC2[255:0] >> (SRC1[2:0] * 32))[31:0];
DEST[63:32] := (SRC2[255:0] >> (SRC1[34:32] * 32))[31:0];
DEST[95:64] := (SRC2[255:0] >> (SRC1[66:64] * 32))[31:0];
DEST[127:96] := (SRC2[255:0] >> (SRC1[98:96] * 32))[31:0];
DEST[159:128] := (SRC2[255:0] >> (SRC1[130:128] * 32))[31:0];
DEST[191:160] := (SRC2[255:0] >> (SRC1[162:160] * 32))[31:0];
DEST[223:192] := (SRC2[255:0] >> (SRC1[194:192] * 32))[31:0];
DEST[255:224] := (SRC2[255:0] >> (SRC1[226:224] * 32))[31:0];
DEST[MAXVL-1:256] := 0
.EE

.SS VPERMW (EVEX ENCODED VERSIONS)  href="./vpermd:vpermw.html#vpermw--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (8, 128), (16, 256), (32, 512)
IF VL = 128 THEN n := 2; FI;
IF VL = 256 THEN n := 3; FI;
IF VL = 512 THEN n := 4; FI;
FOR j := 0 TO KL-1
    i := j * 16
    id := 16*SRC1[i+n:i]
    IF k1[j] OR *no writemask*
        THEN DEST[i+15:i] := SRC2[id+15:id]
        ELSE
            IF *merging-masking*
                        ; merging-masking
                THEN *DEST[i+15:i] remains unchanged*
                ELSE
                        ; zeroing-masking
                    DEST[i+15:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="./vpermd:vpermw.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VPERMD __m512i _mm512_permutexvar_epi32( __m512i idx, __m512i a);

VPERMD __m512i _mm512_mask_permutexvar_epi32(__m512i s, __mmask16 k, __m512i idx, __m512i a);

VPERMD __m512i _mm512_maskz_permutexvar_epi32( __mmask16 k, __m512i idx, __m512i a);

VPERMD __m256i _mm256_permutexvar_epi32( __m256i idx, __m256i a);

VPERMD __m256i _mm256_mask_permutexvar_epi32(__m256i s, __mmask8 k, __m256i idx, __m256i a);

VPERMD __m256i _mm256_maskz_permutexvar_epi32( __mmask8 k, __m256i idx, __m256i a);

VPERMW __m512i _mm512_permutexvar_epi16( __m512i idx, __m512i a);

VPERMW __m512i _mm512_mask_permutexvar_epi16(__m512i s, __mmask32 k, __m512i idx, __m512i a);

VPERMW __m512i _mm512_maskz_permutexvar_epi16( __mmask32 k, __m512i idx, __m512i a);

VPERMW __m256i _mm256_permutexvar_epi16( __m256i idx, __m256i a);

VPERMW __m256i _mm256_mask_permutexvar_epi16(__m256i s, __mmask16 k, __m256i idx, __m256i a);

VPERMW __m256i _mm256_maskz_permutexvar_epi16( __mmask16 k, __m256i idx, __m256i a);

VPERMW __m128i _mm_permutexvar_epi16( __m128i idx, __m128i a);

VPERMW __m128i _mm_mask_permutexvar_epi16(__m128i s, __mmask8 k, __m128i idx, __m128i a);

VPERMW __m128i _mm_maskz_permutexvar_epi16( __mmask8 k, __m128i idx, __m128i a);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="./vpermd:vpermw.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None

.SS OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Table
2-21, “Type 4 Class Exception Conditions.”

.PP
EVEX-encoded VPERMD, see Table 2-50,
“Type E4NF Class Exception Conditions.”

.PP
EVEX-encoded VPERMW, see Exceptions Type E4NF.nb in
Table 2-50, “Type E4NF Class Exception
Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.L = 0.
	If EVEX.L’L = 0 for VPERMD.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
