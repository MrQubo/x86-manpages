'\" t
.nh
.TH "X86-PEXTRB-PEXTRD-PEXTRQ" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
PEXTRB-PEXTRD-PEXTRQ - EXTRACT BYTE-DWORD-QWORD
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/ En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 3A 14 /r ib PEXTRB reg/m8, xmm2, imm8
T}	A	V/V	SSE4_1	T{
Extract a byte integer value from xmm2 at the source byte offset specified by imm8 into reg or m8. The upper bits of r32 or r64 are zeroed.
T}
T{
66 0F 3A 16 /r ib PEXTRD r/m32, xmm2, imm8
T}	A	V/V	SSE4_1	T{
Extract a dword integer value from xmm2 at the source dword offset specified by imm8 into r/m32.
T}
T{
66 REX.W 0F 3A 16 /r ib PEXTRQ r/m64, xmm2, imm8
T}	A	V/N.E.	SSE4_1	T{
Extract a qword integer value from xmm2 at the source qword offset specified by imm8 into r/m64.
T}
T{
VEX.128.66.0F3A.W0 14 /r ib VPEXTRB reg/m8, xmm2, imm8
T}	A	V1/V	AVX	T{
Extract a byte integer value from xmm2 at the source byte offset specified by imm8 into reg or m8. The upper bits of r64/r32 is filled with zeros.
T}
T{
VEX.128.66.0F3A.W0 16 /r ib VPEXTRD r32/m32, xmm2, imm8
T}	A	V/V	AVX	T{
Extract a dword integer value from xmm2 at the source dword offset specified by imm8 into r32/m32.
T}
T{
VEX.128.66.0F3A.W1 16 /r ib VPEXTRQ r64/m64, xmm2, imm8
T}	A	V/I2	AVX	T{
Extract a qword integer value from xmm2 at the source dword offset specified by imm8 into r64/m64.
T}
T{
EVEX.128.66.0F3A.WIG 14 /r ib VPEXTRB reg/m8, xmm2, imm8
T}	B	V/V	AVX512BW	T{
Extract a byte integer value from xmm2 at the source byte offset specified by imm8 into reg or m8. The upper bits of r64/r32 is filled with zeros.
T}
T{
EVEX.128.66.0F3A.W0 16 /r ib VPEXTRD r32/m32, xmm2, imm8
T}	B	V/V	AVX512DQ	T{
Extract a dword integer value from xmm2 at the source dword offset specified by imm8 into r32/m32.
T}
T{
EVEX.128.66.0F3A.W1 16 /r ib VPEXTRQ r64/m64, xmm2, imm8
T}	B	V/N.E.2	AVX512DQ	T{
Extract a qword integer value from xmm2 at the source dword offset specified by imm8 into r64/m64.
T}
.TE

.PP
.RS

.PP
1\&. In 64-bit mode, VEX.W1 is ignored for VPEXTRB (similar to legacy
REX.W=1 prefix in PEXTRB).

.PP
2\&. VEX.W/EVEX.W in non-64 bit is ignored; the instructions behaves as
if the W0 version is used.

.RE

.SH INSTRUCTION OPERAND ENCODING  href="./pextrb:pextrd:pextrq.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:r/m (w)	ModRM:reg (r)	imm8	N/A
B	Tuple1 Scalar	ModRM:r/m (w)	ModRM:reg (r)	imm8	N/A
.TE

.SH DESCRIPTION
Extract a byte/dword/qword integer value from the source XMM register at
a byte/dword/qword offset determined from imm8[3:0]\&. The destination
can be a register or byte/dword/qword memory location. If the
destination is a register, the upper bits of the register are zero
extended.

.PP
In legacy non-VEX encoded version and if the destination operand is a
register, the default operand size in 64-bit mode for PEXTRB/PEXTRD is
64 bits, the bits above the least significant byte/dword data are filled
with zeros. PEXTRQ is not encodable in non-64-bit modes and requires
REX.W in 64-bit mode.

.PP
Note: In VEX.128 encoded versions, VEX.vvvv is reserved and must be
1111b, VEX.L must be 0, otherwise the instruction will #UD. In EVEX.128
encoded versions, EVEX.vvvv is reserved and must be 1111b, EVEX.L”L must
be 0, otherwise the instruction will #UD. If the destination operand is
a register, the default operand size in 64-bit mode for VPEXTRB/VPEXTRD
is 64 bits, the bits above the least significant byte/word/dword data
are filled with zeros.

.SH OPERATION
.EX
CASE of
    PEXTRB: SEL := COUNT[3:0];
        TEMP := (Src >> SEL*8) AND FFH;
        IF (DEST = Mem8)
            THEN
            Mem8 := TEMP[7:0];
        ELSE IF (64-Bit Mode and 64-bit register selected)
            THEN
                R64[7:0] := TEMP[7:0];
                r64[63:8] := ZERO_FILL; };
        ELSE
                R32[7:0] := TEMP[7:0];
                r32[31:8] := ZERO_FILL; };
        FI;
    PEXTRD:SEL := COUNT[1:0];
        TEMP := (Src >> SEL*32) AND FFFF_FFFFH;
        DEST := TEMP;
    PEXTRQ: SEL := COUNT[0];
        TEMP := (Src >> SEL*64);
        DEST := TEMP;
EASC:
.EE

.SS VPEXTRTD/VPEXTRQ  href="./pextrb:pextrd:pextrq.html#vpextrtd-vpextrq"
class="anchor">¶

.EX
IF (64-Bit Mode and 64-bit dest operand)
THEN
    Src_Offset := imm8[0]
    r64/m64 := (Src >> Src_Offset * 64)
ELSE
    Src_Offset := imm8[1:0]
    r32/m32 := ((Src >> Src_Offset *32) AND 0FFFFFFFFh);
FI
.EE

.SS VPEXTRB ( DEST=M8)  href="./pextrb:pextrd:pextrq.html#vpextrb---dest=m8-"
class="anchor">¶

.EX
SRC_Offset := imm8[3:0]
Mem8 := (Src >> Src_Offset*8)
.EE

.SS VPEXTRB ( DEST=REG)  href="./pextrb:pextrd:pextrq.html#vpextrb---dest=reg-"
class="anchor">¶

.EX
IF (64-Bit Mode )
THEN
    SRC_Offset := imm8[3:0]
    DEST[7:0] := ((Src >> Src_Offset*8) AND 0FFh)
    DEST[63:8] := ZERO_FILL;
ELSE
    SRC_Offset := imm8[3:0];
    DEST[7:0] := ((Src >> Src_Offset*8) AND 0FFh);
    DEST[31:8] := ZERO_FILL;
FI
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT <a
href="./pextrb:pextrd:pextrq.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
PEXTRB int _mm_extract_epi8 (__m128i src, const int ndx);

PEXTRD int _mm_extract_epi32 (__m128i src, const int ndx);

PEXTRQ __int64 _mm_extract_epi64 (__m128i src, const int ndx);
.EE

.SH FLAGS AFFECTED  href="./pextrb:pextrd:pextrq.html#flags-affected"
class="anchor">¶

.PP
None.

.SH SIMD FLOATING-POINT EXCEPTIONS  href="./pextrb:pextrd:pextrq.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS  href="./pextrb:pextrd:pextrq.html#other-exceptions"
class="anchor">¶

.PP
Non-EVEX-encoded instruction, see Table
2-22, “Type 5 Class Exception Conditions.”

.PP
EVEX-encoded instruction, see Table
2-57, “Type E9NF Class Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.L = 1 or EVEX.L’L &gt; 0.
	T{
If VEX.vvvv != 1111B or EVEX.vvvv != 1111B.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
