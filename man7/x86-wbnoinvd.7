'\" t
.nh
.TH "X86-WBNOINVD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
WBNOINVD - WRITE BACK AND DO NOT INVALIDATE CACHE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode / Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
F3 0F 09 WBNOINVD	ZO	V/V	WBNOINVD	T{
Write back and do not flush internal caches; initiate writing-back without flushing of external caches.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="wbnoinvd.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
ZO	N/A	N/A	N/A	N/A	N/A
.TE

.SH DESCRIPTION
The WBNOINVD instruction writes back all modified cache lines in the
processor’s internal cache to main memory but does not invalidate
(flush) the internal caches.

.PP
After executing this instruction, the processor does not wait for the
external caches to complete their write-back operation before proceeding
with instruction execution. It is the responsibility of hardware to
respond to the cache write-back signal. The amount of time or cycles for
WBNOINVD to complete will vary due to size and other factors of
different cache hierarchies. As a consequence, the use of the WBNOINVD
instruction can have an impact on logical processor interrupt/event
response time.

.PP
The WBNOINVD instruction is a privileged instruction. When the processor
is running in protected mode, the CPL of a program or procedure must be
0 to execute this instruction. This instruction is also a serializing
instruction (see “Serializing Instructions” in Chapter 9 of the
Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 3A).

.PP
This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.

.SH OPERATION
.EX
WriteBack(InternalCaches);
Continue; (* Continue execution *)
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="wbnoinvd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
WBNOINVD void _wbnoinvd(void);
.EE

.SH FLAGS AFFECTED
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the current privilege level is not 0.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS  href="wbnoinvd.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS  href="wbnoinvd.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
WBNOINVD cannot be executed at the virtual-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS  href="wbnoinvd.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
