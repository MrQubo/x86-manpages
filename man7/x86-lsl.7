'\" t
.nh
.TH "X86-LSL" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
LSL - LOAD SEGMENT LIMIT
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
0F 03 /r	LSL r16, r16/m16	RM	Valid	Valid	T{
Load: r16 := segment limit, selector r16/m16.
T}
0F 03 /r	LSL r32, r32/m161	RM	Valid	Valid	T{
Load: r32 := segment limit, selector r32/m16.
T}
REX.W + 0F 03 /r	LSL r64, r32/m161	RM	Valid	Valid	T{
Load: r64 := segment limit, selector r32/m16
T}
.TE

.PP
.RS

.PP
1\&. For all loads (regardless of destination sizing), only bits 16-0
are used. Other bits are ignored.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Loads the unscrambled segment limit from the segment descriptor
specified with the second operand (source operand) into the first
operand (destination operand) and sets the ZF flag in the EFLAGS
register. The source operand (which can be a register or a memory
location) contains the segment selector for the segment descriptor being
accessed. The destination operand is a general-purpose register.

.PP
The processor performs access checks as part of the loading process.
Once loaded in the destination register, software can compare the
segment limit with the offset of a pointer.

.PP
The segment limit is a 20-bit value contained in bytes 0 and 1 and in
the first 4 bits of byte 6 of the segment descriptor. If the descriptor
has a byte granular segment limit (the granularity flag is set to 0),
the destination operand is loaded with a byte granular value (byte
limit). If the descriptor has a page granular segment limit (the
granularity flag is set to 1), the LSL instruction will translate the
page granular limit (page limit) into a byte limit before loading it
into the destination operand. The translation is performed by shifting
the 20-bit “raw” limit left 12 bits and filling the low-order 12 bits
with 1s.

.PP
When the operand size is 32 bits, the 32-bit byte limit is stored in the
destination operand. When the operand size is 16 bits, a valid 32-bit
limit is computed; however, the upper 16 bits are truncated and only the
low-order 16 bits are loaded into the destination operand.

.PP
This instruction performs the following checks before it loads the
segment limit into the destination register:
.IP \(bu 2
Checks that the segment selector is not NULL.
.IP \(bu 2
Checks that the segment selector points to a descriptor that is
within the limits of the GDT or LDT being accessed
.IP \(bu 2
Checks that the descriptor type is valid for this instruction. All
code and data segment descriptors are valid for (can be accessed
with) the LSL instruction. The valid special segment and gate
descriptor types are given in the following table.
.IP \(bu 2
If the segment is not a conforming code segment, the instruction
checks that the specified segment descriptor is visible at the CPL
(that is, if the CPL and the RPL of the segment selector are less
than or equal to the DPL of the segment selector).

.PP
If the segment descriptor cannot be accessed or is an invalid type for
the instruction, the ZF flag is cleared and no value is loaded in the
destination operand.

.PP
.RS

.PP
1\&. In this case, the descriptor comprises 16 bytes; bits 12:8 of the
upper 4 bytes must be 0.

.RE

.SH OPERATION
.EX
IF SRC(Offset) > descriptor table limit
    THEN ZF := 0; FI;
Read segment descriptor;
IF SegmentDescriptor(Type) ≠ conforming code segment
and (CPL > DPL) OR (RPL > DPL)
or Segment type is not valid for instruction
        THEN
            ZF := 0;
        ELSE
            temp := SegmentLimit([SRC]);
            IF (SegmentDescriptor(G) = 1)
                THEN temp := (temp << 12) OR 00000FFFH;
            ELSE IF OperandSize = 32
                THEN DEST := temp; FI;
            ELSE IF OperandSize = 64 (* REX.W used *)
                THEN DEST := temp(* Zero-extended *); FI;
            ELSE (* OperandSize = 16 *)
                DEST := temp AND FFFFH;
            FI;
FI;
.EE

.SH FLAGS AFFECTED
The ZF flag is set to 1 if the segment limit is loaded successfully;
otherwise, it is set to 0.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and the memory operand effective address is unaligned while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
The LSL instruction cannot be executed in real-address mode.
T}
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
The LSL instruction cannot be executed in virtual-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If the memory operand effective address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory operand effective address is in a non-canonical form.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and the memory operand effective address is unaligned while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
