'\" t
.nh
.TH "X86-VCVTUSI2SS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VCVTUSI2SS - CONVERT UNSIGNED INTEGER TO SCALAR SINGLE PRECISION FLOATING-POINT VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 Bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.LLIG.F3.0F.W0 7B /r VCVTUSI2SS xmm1, xmm2, r/m32{er}
T}	A	V/V	AVX512F	T{
Convert one signed doubleword integer from r/m32 to one single precision floating-point value in xmm1.
T}
T{
EVEX.LLIG.F3.0F.W1 7B /r VCVTUSI2SS xmm1, xmm2, r/m64{er}
T}	A	V/N.E.1	AVX512F	T{
Convert one signed quadword integer from r/m64 to one single precision floating-point value in xmm1.
T}
.TE

.PP
.RS

.PP
1\&. For this specific instruction, EVEX.W in non-64 bit is ignored;
the instruction behaves as if the W0 version is used.

.RE

.SH INSTRUCTION OPERAND ENCODING  href="vcvtusi2ss.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Tuple1 Scalar	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SS DESCRIPTION
Converts a unsigned doubleword integer (or unsigned quadword integer if
operand size is 64 bits) in the source operand (second operand) to a
single precision floating-point value in the destination operand (first
operand). The source operand can be a general-purpose register or a
memory location. The destination operand is an XMM register. The result
is stored in the low doubleword of the destination operand. When a
conversion is inexact, the value returned is rounded according to the
rounding control bits in the MXCSR register or the embedded rounding
control bits.

.PP
The second source operand can be a general-purpose register or a
32/64-bit memory location. The first source and destination operands are
XMM registers. Bits (127:32) of the XMM register destination are copied
from corresponding bits in the first source operand. Bits (MAXVL-1:128)
of the destination register are zeroed.

.PP
EVEX.W1 version: promotes the instruction to use 64-bit input value in
64-bit mode.

.SS OPERATION
.SS VCVTUSI2SS (EVEX ENCODED VERSION)  href="vcvtusi2ss.html#vcvtusi2ss--evex-encoded-version-"
class="anchor">¶

.EX
IF (SRC2 *is register*) AND (EVEX.b = 1)
    THEN
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(EVEX.RC);
    ELSE
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(MXCSR.RC);
FI;
IF 64-Bit Mode And OperandSize = 64
THEN
    DEST[31:0] := Convert_UInteger_To_Single_Precision_Floating_Point(SRC[63:0]);
ELSE
    DEST[31:0] := Convert_UInteger_To_Single_Precision_Floating_Point(SRC[31:0]);
FI;
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vcvtusi2ss.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VCVTUSI2SS __m128 _mm_cvtu32_ss( __m128 s, unsigned a);

VCVTUSI2SS __m128 _mm_cvt_roundu32_ss( __m128 s, unsigned a, int r);

VCVTUSI2SS __m128 _mm_cvtu64_ss( __m128 s, unsigned __int64 a);

VCVTUSI2SS __m128 _mm_cvt_roundu64_ss( __m128 s, unsigned __int64 a, int r);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vcvtusi2ss.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Precision.

.SS OTHER EXCEPTIONS
See Table 2-48, “Type E3NF Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
