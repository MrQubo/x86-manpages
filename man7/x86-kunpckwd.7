'\" t
.nh
.TH "X86-KUNPCKBW-KUNPCKWD-KUNPCKDQ" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
KUNPCKBW-KUNPCKWD-KUNPCKDQ - UNPACK FOR MASK REGISTERS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
VEX.L1.66.0F.W0 4B /r KUNPCKBW k1, k2, k3
T}	RVR	V/V	AVX512F	T{
Unpack 8-bit masks in k2 and k3 and write word result in k1.
T}
T{
VEX.L1.0F.W0 4B /r KUNPCKWD k1, k2, k3
T}	RVR	V/V	AVX512BW	T{
Unpack 16-bit masks in k2 and k3 and write doubleword result in k1.
T}
T{
VEX.L1.0F.W1 4B /r KUNPCKDQ k1, k2, k3
T}	RVR	V/V	AVX512BW	T{
Unpack 32-bit masks in k2 and k3 and write quadword result in k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="./kunpckbw:kunpckwd:kunpckdq.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l 
l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP
RVR	ModRM:reg (w)	VEX.1vvv (r)	ModRM:r/m (r, ModRM:[7:6] must be 11b)
.TE

.SH DESCRIPTION  href="./kunpckbw:kunpckwd:kunpckdq.html#description"
class="anchor">¶

.PP
Unpacks the lower 8/16/32 bits of the second and third operands (source
operands) into the low part of the first operand (destination operand),
starting from the low bytes. The result is zero-extended in the
destination.

.SH OPERATION  href="./kunpckbw:kunpckwd:kunpckdq.html#operation"
class="anchor">¶

.SS KUNPCKBW  href="./kunpckbw:kunpckwd:kunpckdq.html#kunpckbw"
class="anchor">¶

.EX
DEST[7:0] := SRC2[7:0]
DEST[15:8] := SRC1[7:0]
DEST[MAX_KL-1:16] := 0
.EE

.SS KUNPCKWD  href="./kunpckbw:kunpckwd:kunpckdq.html#kunpckwd"
class="anchor">¶

.EX
DEST[15:0] := SRC2[15:0]
DEST[31:16] := SRC1[15:0]
DEST[MAX_KL-1:32] := 0
.EE

.SS KUNPCKDQ  href="./kunpckbw:kunpckwd:kunpckdq.html#kunpckdq"
class="anchor">¶

.EX
DEST[31:0] := SRC2[31:0]
DEST[63:32] := SRC1[31:0]
DEST[MAX_KL-1:64] := 0
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT <a
href="./kunpckbw:kunpckwd:kunpckdq.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
KUNPCKBW __mmask16 _mm512_kunpackb(__mmask16 a, __mmask16 b);

KUNPCKDQ __mmask64 _mm512_kunpackd(__mmask64 a, __mmask64 b);

KUNPCKWD __mmask32 _mm512_kunpackw(__mmask32 a, __mmask32 b);
.EE

.SH FLAGS AFFECTED  href="./kunpckbw:kunpckwd:kunpckdq.html#flags-affected"
class="anchor">¶

.PP
None.

.SH SIMD FLOATING-POINT EXCEPTIONS <a
href="./kunpckbw:kunpckwd:kunpckdq.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS  href="./kunpckbw:kunpckwd:kunpckdq.html#other-exceptions"
class="anchor">¶

.PP
See Table 2-63, “TYPE K20 Exception
Definition (VEX-Encoded OpMask Instructions w/o Memory Arg).”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
