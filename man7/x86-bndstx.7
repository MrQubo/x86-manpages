'\" t
.nh
.TH "X86-BNDSTX" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
BNDSTX - STORE EXTENDED BOUNDS USING ADDRESS TRANSLATION
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
NP 0F 1B /r BNDSTX mib, bnd	MR	V/V	MPX	T{
Store the bounds in bnd and the pointer value in the index register of mib to a bound table entry (BTE) with address translation using the base of mib.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP
MR	T{
SIB.base (r): Address of pointer SIB.index(r)
T}	ModRM:reg (r)	N/A
.TE

.SH DESCRIPTION
BNDSTX uses the linear address constructed from the displacement and
base register of the SIB-addressing form of the memory operand (mib) to
perform address translation to store to a bound table entry. The bounds
in the source operand bnd are written to the lower and upper bounds in
the BTE. The content of the index register of mib is written to the
pointer value field in the BTE.

.PP
This instruction does not cause memory access to the linear address of
mib nor the effective address referenced by the base, and does not read
or write any flags.

.PP
Segment overrides apply to the linear address computation with the base
of mib, and are used during address translation to generate the address
of the bound table entry. By default, the address of the BTE is assumed
to be linear address. There are no segmentation checks performed on the
base of mib.

.PP
The base of mib will not be checked for canonical address violation as
it does not access memory.

.PP
Any encoding of this instruction that does not specify base or index
register will treat those registers as zero (constant). The reg-reg form
of this instruction will remain a NOP.

.PP
The scale field of the SIB byte has no effect on these instructions and
is ignored.

.PP
The bound register may be partially updated on memory faults. The order
in which memory operands are loaded is implementation specific.

.SH OPERATION
.EX
base := mib.SIB.base ? mib.SIB.base + Disp: 0;
ptr_value := mib.SIB.index ? mib.SIB.index : 0;
.EE

.SS OUTSIDE 64-BIT MODE
.EX
A_BDE[31:0] := (Zero_extend32(base[31:12] « 2) + (BNDCFG[31:12] «12 );
A_BT[31:0] := LoadFrom(A_BDE);
IF A_BT[0] equal 0 Then
    BNDSTATUS := A_BDE | 02H;
    #BR;
FI;
A_DEST[31:0] := (Zero_extend32(base[11:2] « 4) + (A_BT[31:2] « 2 ); // address of Bound table entry
A_DEST[8][31:0] := ptr_value;
A_DEST[0][31:0] := BND.LB;
A_DEST[4][31:0] := BND.UB;
.EE

.SS IN 64-BIT MODE
.EX
A_BDE[63:0] := (Zero_extend64(base[47+MAWA:20] « 3) + (BNDCFG[63:12] «12 );1
A_BT[63:0] := LoadFrom(A_BDE);
IF A_BT[0] equal 0 Then
    BNDSTATUS := A_BDE | 02H;
    #BR;
FI;
A_DEST[63:0] := (Zero_extend64(base[19:3] « 5) + (A_BT[63:3] « 3 ); // address of Bound table entry
A_DEST[16][63:0] := ptr_value;
A_DEST[0][63:0] := BND.LB;
A_DEST[8][63:0] := BND.UB;
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="bndstx.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
BNDSTX: _bnd_store_ptr_bounds(const void **ptr_addr, const void *ptr_val);
.EE

.SH FLAGS AFFECTED
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#BR	T{
If the bound directory entry is invalid.
T}
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	T{
If 67H prefix is not used and CS.D=0.
T}
	T{
If 67H prefix is used and CS.D=1.
T}
#GP(0)	T{
If a destination effective address of the Bound Table entry is outside the DS segment limit.
T}
	T{
If DS register contains a NULL segment selector.
T}
	T{
If the destination operand points to a non-writable segment
T}
#PF(fault	code) If a page fault occurs.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	If 16-bit addressing is used.
#GP(0)	T{
If a destination effective address of the Bound Table entry is outside the DS segment limit.
T}
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	If 16-bit addressing is used.
#GP(0)	T{
If a destination effective address of the Bound Table entry is outside the DS segment limit.
T}
#PF(fault	code) If a page fault occurs.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.PP
.RS

.PP
1\&. If CPL &lt; 3, the supervisor MAWA (MAWAS) is used; this value is
0. If CPL = 3, the user MAWA (MAWAU) is used; this value is enumerated
in CPUID.(EAX=07H,ECX=0H):ECX.MAWAU[bits 21:17]\&. See Appendix E.3.1
of Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 1.

.RE

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#BR	T{
If the bound directory entry is invalid.
T}
#UD	If ModRM is RIP relative.
	If the LOCK prefix is used.
	T{
If ModRM.r/m and REX encodes BND4-BND15 when Intel MPX is enabled.
T}
#GP(0)	If the memory address (A_BDE or A_BTE) is in a non-canonical form.
	T{
If the destination operand points to a non-writable segment
T}
#PF(fault	code) If a page fault occurs.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
