'\" t
.nh
.TH "X86-EMODT" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
EMODT - CHANGE THE TYPE OF AN EPC PAGE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
EAX = 0FH ENCLS[EMODT]	IR	V/V	SGX2	T{
This leaf function changes the type of an existing EPC page.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fB\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP
Op/En	EAX		RBX	RCX
IR	EMODT (In)	Return Error Code (Out)	Address of a SECINFO (In)	T{
Address of the destination EPC page (In)
T}
.TE

.SS DESCRIPTION
This leaf function modifies the type of an EPC page. The security
attributes are configured to prevent access to the EPC page at its new
type until a corresponding invocation of the EACCEPT leaf confirms the
modification. This instruction can only be executed when current
privilege level is 0.

.PP
RBX contains the effective address of a SECINFO structure while RCX
contains the effective address of an EPC page. The table below provides
additional information on the memory parameter of the EMODT leaf
function.

.SH EMODT MEMORY PARAMETER SEMANTICS  href="emodt.html#emodt-memory-parameter-semantics"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
SECINFO	EPCPAGE
T{
Read access permitted by Non Enclave
T}	T{
Read/Write access permitted by Enclave
T}
.TE

.PP
The instruction faults if any of the following:

.SH EMODT FAULTING CONDITIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
T{
The operands are not properly aligned.
T}	T{
If unsupported security attributes are set.
T}
T{
The Enclave is not initialized.
T}	T{
SECS is locked by another thread.
T}
T{
The EPC page is locked by another thread.
T}	T{
RCX does not contain an effective address of an EPC page in the running enclave.
T}
The EPC page is not valid.	
.TE

.PP
The error codes are:

.SS CONCURRENCY RESTRICTIONS
.SS OPERATION
.SH TEMP VARIABLES IN EMODT OPERATIONAL FLOW  href="emodt.html#temp-variables-in-emodt-operational-flow"
class="anchor">¶

.TS
allbox;
l l l l 
l l l l .
\fBName\fP	\fBType\fP	\fBSize (bits)\fP	\fBDescription\fP
TMP_SECS	Effective Address	32/64	T{
Physical address of SECS to which EPC operand belongs.
T}
SCRATCH_SECINFO	SECINFO	512	T{
Scratch storage for holding the contents of DS:RBX.
T}
.TE

.PP
IF (DS:RBX is not 64Byte Aligned)

.PP
THEN #GP(0); FI;

.PP
IF (DS:RCX is not 4KByte Aligned)

.PP
THEN #GP(0); FI;

.PP
IF (DS:RCX does not resolve within an EPC)

.PP
THEN #PF(DS:RCX); FI;

.PP
SCRATCH_SECINFO := DS:RBX;

.PP
(* Check for misconfigured SECINFO flags*)

.PP
IF ( (SCRATCH_SECINFO reserved fields are not zero ) or

.PP
!(SCRATCH_SECINFO.FLAGS.PT is PT_TCS or SCRATCH_SECINFO.FLAGS.PT is
PT_TRIM) )

.PP
THEN #GP(0); FI;

.PP
(* Check concurrency with SGX1 instructions on the EPC page *)

.PP
IF (other SGX1 instructions accessing EPC page)

.PP
THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_EPC_PAGE_CONFLICT;

.PP
GOTO DONE;

.PP
FI;

.PP
IF (EPCM(DS:RCX).VALID is 0)

.PP
THEN #PF(DS:RCX); FI;

.PP
(* Check the EPC page for concurrency *)

.PP
IF (EPC page in use by another SGX2 instruction)

.PP
THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_EPC_PAGE_CONFLICT;

.PP
GOTO DONE;

.PP
FI;

.PP
IF (!(EPCM(DS:RCX).PT is PT_REG or

.PP
((EPCM(DS:RCX).PT is PT_TCS or PT_SS_FIRST or PT_SS_REST) and
SCRATCH_SECINFO.FLAGS.PT is PT_TRIM)))

.PP
THEN #PF(DS:RCX); FI;

.PP
IF (EPCM(DS:RCX).PENDING is not 0 or (EPCM(DS:RCX).MODIFIED is not 0) )

.PP
THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_PAGE_NOT_MODIFIABLE;

.PP
GOTO DONE;

.PP
FI;

.PP
TMP_SECS := GET_SECS_ADDRESS

.PP
IF (TMP_SECS.ATTRIBUTES.INIT = 0)

.PP
THEN #GP(0); FI;

.PP
(* Update EPCM fields *)

.PP
EPCM(DS:RCX).PR := 0;

.PP
EPCM(DS:RCX).MODIFIED := 1;

.PP
EPCM(DS:RCX).R := 0;

.PP
EPCM(DS:RCX).W := 0;

.PP
EPCM(DS:RCX).X := 0;

.PP
EPCM(DS:RCX).PT := SCRATCH_SECINFO.FLAGS.PT;

.PP
RFLAGS.ZF := 0;

.PP
RAX := 0;

.PP
DONE:

.PP
RFLAGS.CF,PF,AF,OF,SF := 0;

.SS FLAGS AFFECTED
Sets ZF if page is not modifiable or if other SGX2 instructions are
executing concurrently, otherwise cleared. Clears CF, PF, AF, OF, SF.

.SS PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the DS segment limit.
T}
	T{
If a memory operand is not properly aligned.
T}
	If a memory operand is locked.
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If a memory operand is not an EPC page.
T}
.TE

.SS 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand is non-canonical form.
T}
	T{
If a memory operand is not properly aligned.
T}
	If a memory operand is locked.
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If a memory operand is not an EPC page.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
