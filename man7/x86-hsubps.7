'\" t
.nh
.TH "X86-HSUBPS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
HSUBPS - PACKED SINGLE PRECISION FLOATING-POINT HORIZONTAL SUBTRACT
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32-bit Mode\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
F2 0F 7D /r HSUBPS xmm1, xmm2/m128
T}	RM	V/V	SSE3	T{
Horizontal subtract packed single precision floating-point values from xmm2/m128 to xmm1.
T}
T{
VEX.128.F2.0F.WIG 7D /r VHSUBPS xmm1, xmm2, xmm3/m128
T}	RVM	V/V	AVX	T{
Horizontal subtract packed single precision floating-point values from xmm2 and xmm3/mem.
T}
T{
VEX.256.F2.0F.WIG 7D /r VHSUBPS ymm1, ymm2, ymm3/m256
T}	RVM	V/V	AVX	T{
Horizontal subtract packed single precision floating-point values from ymm2 and ymm3/mem.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
RVM	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Subtracts the single precision floating-point value in the second dword
of the destination operand from the first dword of the destination
operand and stores the result in the first dword of the destination
operand.

.PP
Subtracts the single precision floating-point value in the fourth dword
of the destination operand from the third dword of the destination
operand and stores the result in the second dword of the destination
operand.

.PP
Subtracts the single precision floating-point value in the second dword
of the source operand from the first dword of the source operand and
stores the result in the third dword of the destination operand.

.PP
Subtracts the single precision floating-point value in the fourth dword
of the source operand from the third dword of the source operand and
stores the result in the fourth dword of the destination operand.

.PP
In 64-bit mode, use of the REX.R prefix permits this instruction to
access additional registers (XMM8-XMM15).

.PP
See Figure 3-23
\[la]hsubps.html#fig\-3\-23\[ra] for HSUBPS; see Figure
3-24
\[la]hsubps.html#fig\-3\-24\[ra] for VHSUBPS.

.PP
128-bit Legacy SSE version: The second source can be an XMM register or
an 128-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL-1:128) of the
corresponding YMM register destination are unmodified.

.PP
VEX.128 encoded version: the first source operand is an XMM register or
128-bit memory location. The destination operand is an XMM register. The
upper bits (MAXVL-1:128) of the corresponding YMM register destination
are zeroed.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256-bit memory
location. The destination operand is a YMM register.

.SH OPERATION
.SS HSUBPS (128-BIT LEGACY SSE VERSION)  href="hsubps.html#hsubps--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0] - SRC1[63:32]
DEST[63:32] := SRC1[95:64] - SRC1[127:96]
DEST[95:64] := SRC2[31:0] - SRC2[63:32]
DEST[127:96] := SRC2[95:64] - SRC2[127:96]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS VHSUBPS (VEX.128 ENCODED VERSION)  href="hsubps.html#vhsubps--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0] - SRC1[63:32]
DEST[63:32] := SRC1[95:64] - SRC1[127:96]
DEST[95:64] := SRC2[31:0] - SRC2[63:32]
DEST[127:96] := SRC2[95:64] - SRC2[127:96]
DEST[MAXVL-1:128] := 0
.EE

.SS VHSUBPS (VEX.256 ENCODED VERSION)  href="hsubps.html#vhsubps--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0] - SRC1[63:32]
DEST[63:32] := SRC1[95:64] - SRC1[127:96]
DEST[95:64] := SRC2[31:0] - SRC2[63:32]
DEST[127:96] := SRC2[95:64] - SRC2[127:96]
DEST[159:128] := SRC1[159:128] - SRC1[191:160]
DEST[191:160] := SRC1[223:192] - SRC1[255:224]
DEST[223:192] := SRC2[159:128] - SRC2[191:160]
DEST[255:224] := SRC2[223:192] - SRC2[255:224]
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="hsubps.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
HSUBPS __m128 _mm_hsub_ps(__m128 a, __m128 b);

VHSUBPS __m256 _mm256_hsub_ps (__m256 a, __m256 b);
.EE

.SH EXCEPTIONS
When the source operand is a memory operand, the operand must be aligned
on a 16-byte boundary or a general-protection exception (#GP) will be
generated.

.SH NUMERIC EXCEPTIONS
Overflow, Underflow, Invalid, Precision, Denormal.

.SH OTHER EXCEPTIONS
See Table 2-19, “Type 2 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
