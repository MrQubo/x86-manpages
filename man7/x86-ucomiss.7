'\" t
.nh
.TH "X86-UCOMISS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
UCOMISS - UNORDERED COMPARE SCALAR SINGLE PRECISION FLOATING-POINT VALUES AND SET EFLAGS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
NP 0F 2E /r UCOMISS xmm1, xmm2/m32
T}	A	V/V	SSE	T{
Compare low single precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.
T}
T{
VEX.LIG.0F.WIG 2E /r VUCOMISS xmm1, xmm2/m32
T}	A	V/V	AVX	T{
Compare low single precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.
T}
T{
EVEX.LLIG.0F.W0 2E /r VUCOMISS xmm1, xmm2/m32{sae}
T}	B	V/V	AVX512F	T{
Compare low single precision floating-point values in xmm1 and xmm2/mem32 and set the EFLAGS flags accordingly.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r)	ModRM:r/m (r)	N/A	N/A
B	Tuple1 Scalar	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Compares the single precision floating-point values in the low
doublewords of operand 1 (first operand) and operand 2 (second operand),
and sets the ZF, PF, and CF flags in the EFLAGS register according to
the result (unordered, greater than, less than, or equal). The OF, SF,
and AF flags in the EFLAGS register are set to 0. The unordered result
is returned if either source operand is a NaN (QNaN or SNaN).

.PP
Operand 1 is an XMM register; operand 2 can be an XMM register or a 32
bit memory location.

.PP
The UCOMISS instruction differs from the COMISS instruction in that it
signals a SIMD floating-point invalid operation exception (#I) only if a
source operand is an SNaN. The COMISS instruction signals an invalid
operation exception when a source operand is either a QNaN or SNaN.

.PP
The EFLAGS register is not updated if an unmasked SIMD floating-point
exception is generated.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b, otherwise
instructions will #UD.

.PP
Software should ensure VCOMISS is encoded with VEX.L=0. Encoding VCOMISS
with VEX.L=1 may encounter unpredictable behavior across different
processor generations.

.SH OPERATION
.SS (V)UCOMISS (ALL VERSIONS)
.EX
RESULT := UnorderedCompare(DEST[31:0] <> SRC[31:0]) {
(* Set EFLAGS *) CASE (RESULT) OF
    UNORDERED: ZF,PF,CF := 111;
    GREATER_THAN: ZF,PF,CF := 000;
    LESS_THAN: ZF,PF,CF := 001;
    EQUAL: ZF,PF,CF := 100;
ESAC;
OF, AF, SF := 0; }
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="ucomiss.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VUCOMISS int _mm_comi_round_ss(__m128 a, __m128 b, int imm, int sae);

UCOMISS int _mm_ucomieq_ss(__m128 a, __m128 b);

UCOMISS int _mm_ucomilt_ss(__m128 a, __m128 b);

UCOMISS int _mm_ucomile_ss(__m128 a, __m128 b);

UCOMISS int _mm_ucomigt_ss(__m128 a, __m128 b);

UCOMISS int _mm_ucomige_ss(__m128 a, __m128 b);

UCOMISS int _mm_ucomineq_ss(__m128 a, __m128 b);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="ucomiss.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid (if SNaN Operands), Denormal.

.SH OTHER EXCEPTIONS
VEX-encoded instructions, see Table
2-20, “Type 3 Class Exception Conditions,” additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.vvvv != 1111B.
.TE

.PP
EVEX-encoded instructions, see Table
2-48, “Type E3NF Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
