'\" t
.nh
.TH "X86-WRPKRU" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
WRPKRU - WRITE DATA TO USER PAGE KEY REGISTER
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
NP 0F 01 EF WRPKRU	ZO	V/V	OSPKE	Writes EAX into PKRU.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
ZO	N/A	N/A	N/A	N/A
.TE

.SH DESCRIPTION
Writes the value of EAX into PKRU. ECX and EDX must be 0 when WRPKRU is
executed; otherwise, a general-protection exception (#GP) occurs.

.PP
WRPKRU can be executed only if CR4.PKE = 1; otherwise, an invalid-opcode
exception (#UD) occurs. Software can discover the value of CR4.PKE by
examining CPUID.(EAX=07H,ECX=0H):ECX.OSPKE [bit 4]\&.

.PP
On processors that support the Intel 64 Architecture, the high-order
32-bits of RCX, RDX, and RAX are ignored.

.PP
WRPKRU will never execute speculatively. Memory accesses affected by
PKRU register will not execute (even speculatively) until all prior
executions of WRPKRU have completed execution and updated the PKRU
register.

.SH OPERATION
.EX
IF (ECX = 0 AND EDX = 0)
    THEN PKRU := EAX;
    ELSE #GP(0);
FI;
.EE

.SH FLAGS AFFECTED
None.

.SH C/C++ COMPILER INTRINSIC EQUIVALENT  href="wrpkru.html#c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
WRPKRU void _wrpkru(uint32_t);
.EE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	If ECX ≠ 0.
	If EDX ≠ 0.
#UD	If the LOCK prefix is used.
	If CR4.PKE = 0.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH VIRTUAL-8086 MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
