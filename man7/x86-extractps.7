'\" t
.nh
.TH "X86-EXTRACTPS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
EXTRACTPS - EXTRACT PACKED FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 3A 17 /r ib EXTRACTPS reg/m32, xmm1, imm8
T}	A	VV	SSE4_1	T{
Extract one single precision floating-point value from xmm1 at the offset specified by imm8 and store the result in reg or m32. Zero extend the results in 64-bit register if applicable.
T}
T{
VEX.128.66.0F3A.WIG 17 /r ib VEXTRACTPS reg/m32, xmm1, imm8
T}	A	V/V	AVX	T{
Extract one single precision floating-point value from xmm1 at the offset specified by imm8 and store the result in reg or m32. Zero extend the results in 64-bit register if applicable.
T}
T{
EVEX.128.66.0F3A.WIG 17 /r ib VEXTRACTPS reg/m32, xmm1, imm8
T}	B	V/V	AVX512F	T{
Extract one single precision floating-point value from xmm1 at the offset specified by imm8 and store the result in reg or m32. Zero extend the results in 64-bit register if applicable.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="extractps.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:r/m (w)	ModRM:reg (r)	imm8	N/A
B	Tuple1 Scalar	ModRM:r/m (w)	ModRM:reg (r)	imm8	N/A
.TE

.SH DESCRIPTION
Extracts a single precision floating-point value from the source operand
(second operand) at the 32-bit offset specified from imm8. Immediate
bits higher than the most significant offset for the vector length are
ignored.

.PP
The extracted single precision floating-point value is stored in the low
32-bits of the destination operand

.PP
In 64-bit mode, destination register operand has default operand size of
64 bits. The upper 32-bits of the register are filled with zero. REX.W
is ignored.

.PP
VEX.128 and EVEX encoded version: When VEX.W1 or EVEX.W1 form is used in
64-bit mode with a general purpose register (GPR) as a destination
operand, the packed single quantity is zero extended to 64 bits.

.PP
VEX.vvvv/EVEX.vvvv is reserved and must be 1111b otherwise instructions
will #UD.

.PP
128-bit Legacy SSE version: When a REX.W prefix is used in 64-bit mode
with a general purpose register (GPR) as a destination operand, the
packed single quantity is zero extended to 64 bits.

.PP
The source register is an XMM register. Imm8[1:0] determine the
starting DWORD offset from which to extract the 32-bit floating-point
value.

.PP
If VEXTRACTPS is encoded with VEX.L= 1, an attempt to execute the
instruction encoded with VEX.L= 1 will cause an #UD exception.

.SH OPERATION
.SS VEXTRACTPS (EVEX AND VEX.128 ENCODED VERSION)  href="extractps.html#vextractps--evex-and-vex-128-encoded-version-"
class="anchor">¶

.EX
SRC_OFFSET := IMM8[1:0]
IF (64-Bit Mode and DEST is register)
    DEST[31:0] := (SRC[127:0] >> (SRC_OFFSET*32)) AND 0FFFFFFFFh
    DEST[63:32] := 0
ELSE
    DEST[31:0] := (SRC[127:0] >> (SRC_OFFSET*32)) AND 0FFFFFFFFh
FI
.EE

.SS EXTRACTPS (128-BIT LEGACY SSE VERSION)  href="extractps.html#extractps--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
SRC_OFFSET := IMM8[1:0]
IF (64-Bit Mode and DEST is register)
    DEST[31:0] := (SRC[127:0] >> (SRC_OFFSET*32)) AND 0FFFFFFFFh
    DEST[63:32] := 0
ELSE
    DEST[31:0] := (SRC[127:0] >> (SRC_OFFSET*32)) AND 0FFFFFFFFh
FI
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="extractps.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
EXTRACTPS int _mm_extract_ps (__m128 a, const int nidx);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="extractps.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
VEX-encoded instructions, see Table
2-22, “Type 5 Class Exception Conditions.”

.PP
EVEX-encoded instructions, see Table
2-57, “Type E9NF Class Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	IF VEX.L = 0.
#UD	T{
If VEX.vvvv != 1111B or EVEX.vvvv != 1111B.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
