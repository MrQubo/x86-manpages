'\" t
.nh
.TH "X86-VREDUCEPD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VREDUCEPD - PERFORM REDUCTION TRANSFORMATION ON PACKED FLOAT64 VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.128.66.0F3A.W1 56 /r ib VREDUCEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8
T}	A	V/V	AVX512VL AVX512DQ	T{
Perform reduction transformation on packed double precision floating-point values in xmm2/m128/m32bcst by subtracting a number of fraction bits specified by the imm8 field. Stores the result in xmm1 register under writemask k1.
T}
T{
EVEX.256.66.0F3A.W1 56 /r ib VREDUCEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8
T}	A	V/V	AVX512VL AVX512DQ	T{
Perform reduction transformation on packed double precision floating-point values in ymm2/m256/m32bcst by subtracting a number of fraction bits specified by the imm8 field. Stores the result in ymm1 register under writemask k1.
T}
T{
EVEX.512.66.0F3A.W1 56 /r ib VREDUCEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8
T}	A	V/V	AVX512DQ	T{
Perform reduction transformation on double precision floating-point values in zmm2/m512/m32bcst by subtracting a number of fraction bits specified by the imm8 field. Stores the result in zmm1 register under writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vreducepd.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Full	ModRM:reg (w)	ModRM:r/m (r)	imm8	N/A
.TE

.SS DESCRIPTION
Perform reduction transformation of the packed binary encoded double
precision floating-point values in the source operand (the second
operand) and store the reduced results in binary floating-point format
to the destination operand (the first operand) under the writemask k1.

.PP
The reduction transformation subtracts the integer part and the leading
M fractional bits from the binary floating-point source value, where M
is a unsigned integer specified by imm8[7:4], see Figure
5-28
\[la]vreducepd.html#fig\-5\-28\[ra]\&. Specifically, the reduction
transformation can be expressed as:

.PP
dest = src – (ROUND(2M*src))*2-M;

.PP
where “Round()” treats “src”, “2M”, and their product as
binary floating-point numbers with normalized significand and biased
exponents.

.PP
The magnitude of the reduced result can be expressed by considering src=
2p*man2,

.PP
where ‘man2’ is the normalized significand and ‘p’ is the unbiased
exponent

.PP
Then if RC = RNE: 0&lt;=|Reduced Result|&lt;=2p-M-1

.PP
Then if RC ≠ RNE: 0&lt;=|Reduced Result|&lt;2p-M

.PP
This instruction might end up with a precision exception set. However,
in case of SPE set (i.e., Suppress Precision Exception, which is
imm8[3]=1), no precision exception is reported.

.PP
EVEX.vvvv is reserved and must be 1111b otherwise instructions will
#UD.

.PP
Handling of special case of input values are listed in Table
5-29
\[la]vreducepd.html#tbl\-5\-29\[ra]\&.

.PP
* Round control = (imm8.MS1)? MXCSR.RC: imm8.RC

.SS OPERATION
.EX
ReduceArgumentDP(SRC[63:0], imm8[7:0])
{
    // Check for NaN
    IF (SRC [63:0] = NAN) THEN
        RETURN (Convert SRC[63:0] to QNaN); FI;
    M := imm8[7:4]; // Number of fraction bits of the normalized significand to be subtracted
    RC := imm8[1:0];// Round Control for ROUND() operation
    RC source := imm[2];
    SPE := imm[3];// Suppress Precision Exception
    TMP[63:0] := 2-M *{ROUND(2M*SRC[63:0], SPE, RC_source, RC)}; // ROUND() treats SRC and 2M as standard binary FP values
    TMP[63:0] := SRC[63:0] – TMP[63:0]; // subtraction under the same RC,SPE controls
    RETURN TMP[63:0]; // binary encoded FP with biased exponent and normalized significand
}
.EE

.SS VREDUCEPD
.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask* THEN
            IF (EVEX.b == 1) AND (SRC *is memory*)
                THEN DEST[i+63:i] := ReduceArgumentDP(SRC[63:0], imm8[7:0]);
                ELSE DEST[i+63:i] := ReduceArgumentDP(SRC[i+63:i], imm8[7:0]);
            FI;
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[i+63:i] remains unchanged*
            ELSE
                    ; zeroing-masking
                DEST[i+63:i] = 0
        FI;
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vreducepd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VREDUCEPD __m512d _mm512_mask_reduce_pd( __m512d a, int imm, int sae)

VREDUCEPD __m512d _mm512_mask_reduce_pd(__m512d s, __mmask8 k, __m512d a, int imm, int sae)

VREDUCEPD __m512d _mm512_maskz_reduce_pd(__mmask8 k, __m512d a, int imm, int sae)

VREDUCEPD __m256d _mm256_mask_reduce_pd( __m256d a, int imm)

VREDUCEPD __m256d _mm256_mask_reduce_pd(__m256d s, __mmask8 k, __m256d a, int imm)

VREDUCEPD __m256d _mm256_maskz_reduce_pd(__mmask8 k, __m256d a, int imm)

VREDUCEPD __m128d _mm_mask_reduce_pd( __m128d a, int imm)

VREDUCEPD __m128d _mm_mask_reduce_pd(__m128d s, __mmask8 k, __m128d a, int imm)

VREDUCEPD __m128d _mm_maskz_reduce_pd(__mmask8 k, __m128d a, int imm)
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vreducepd.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Precision.

.PP
If SPE is enabled, precision exception is not reported (regardless of
MXCSR exception mask).

.SS OTHER EXCEPTIONS
See Table 2-46, “Type E2 Class
Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If EVEX.vvvv != 1111B.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
