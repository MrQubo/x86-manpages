'\" t
.nh
.TH "X86-FSUB-FSUBP-FISUB" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
FSUB-FSUBP-FISUB - SUBTRACT
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
D8 /4	FSUB m32fp	Valid	Valid	T{
Subtract m32fp from ST(0) and store result in ST(0).
T}
DC /4	FSUB m64fp	Valid	Valid	T{
Subtract m64fp from ST(0) and store result in ST(0).
T}
D8 E0+i	FSUB ST(0), ST(i)	Valid	Valid	T{
Subtract ST(i) from ST(0) and store result in ST(0).
T}
DC E8+i	FSUB ST(i), ST(0)	Valid	Valid	T{
Subtract ST(0) from ST(i) and store result in ST(i).
T}
DE E8+i	FSUBP ST(i), ST(0)	Valid	Valid	T{
Subtract ST(0) from ST(i), store result in ST(i), and pop register stack.
T}
DE E9	FSUBP	Valid	Valid	T{
Subtract ST(0) from ST(1), store result in ST(1), and pop register stack.
T}
DA /4	FISUB m32int	Valid	Valid	T{
Subtract m32int from ST(0) and store result in ST(0).
T}
DE /4	FISUB m16int	Valid	Valid	T{
Subtract m16int from ST(0) and store result in ST(0).
T}
.TE

.SH DESCRIPTION
Subtracts the source operand from the destination operand and stores the
difference in the destination location. The destination operand is
always an FPU data register; the source operand can be a register or a
memory location. Source operands in memory can be in single precision or
double precision floating-point format or in word or doubleword integer
format.

.PP
The no-operand version of the instruction subtracts the contents of the
ST(0) register from the ST(1) register and stores the result in ST(1).
The one-operand version subtracts the contents of a memory location
(either a floating-point or an integer value) from the contents of the
ST(0) register and stores the result in ST(0). The two-operand version,
subtracts the contents of the ST(0) register from the ST(i) register or
vice versa.

.PP
The FSUBP instructions perform the additional operation of popping the
FPU register stack following the subtraction. To pop the register stack,
the processor marks the ST(0) register as empty and increments the stack
pointer (TOP) by 1. The no-operand version of the floating-point
subtract instructions always results in the register stack being popped.
In some assemblers, the mnemonic for this instruction is FSUB rather
than FSUBP.

.PP
The FISUB instructions convert an integer source operand to double
extended-precision floating-point format before performing the
subtraction.

.PP
Table 3-38
\[la]./fsub:fsubp:fisub.html#tbl\-3\-38\[ra] shows the results
obtained when subtracting various classes of numbers from one another,
assuming that neither overflow nor underflow occurs. Here, the SRC value
is subtracted from the DEST value (DEST − SRC = result).

.PP
When the difference between two operands of like sign is 0, the result
is +0, except for the round toward −∞ mode, in which case the result is
−0. This instruction also guarantees that +0 − (−0) = +0, and that −0 −
(+0) = −0. When the source operand is an integer 0, it is treated as a
+0.

.PP
When one operand is ∞, the result is ∞ of the expected sign. If both
operands are ∞ of the same sign, an invalidoperation exception is
generated.

.PP
.RS

.PP
F Means finite floating-point value.

.PP
I Means integer.

.PP
* Indicatesfloating-pointinvalid-arithmetic-operand(#IA)exception.

.RE

.PP
This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.

.SH OPERATION
.EX
IF Instruction = FISUB
    THEN
        DEST := DEST − ConvertToDoubleExtendedPrecisionFP(SRC);
    ELSE (* Source operand is floating-point value *)
        DEST := DEST − SRC;
FI;
IF Instruction = FSUBP
    THEN
        PopRegisterStack;
FI;
.EE

.SH FPU FLAGS AFFECTED  href="./fsub:fsubp:fisub.html#fpu-flags-affected"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
C1	T{
Set to 0 if stack underflow occurred.
T}
	T{
Set if result was rounded up; cleared otherwise.
T}
C0, C2, C3	Undefined.
.TE

.SH FLOATING-POINT EXCEPTIONS  href="./fsub:fsubp:fisub.html#floating-point-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#IS	Stack underflow occurred.
#IA	T{
Operand is an SNaN value or unsupported format.
T}
	T{
Operands are infinities of like sign.
T}
#D	T{
Source operand is a denormal value.
T}
#U	T{
Result is too small for destination format.
T}
#O	T{
Result is too large for destination format.
T}
#P	T{
Value cannot be represented exactly in destination format.
T}
.TE

.SH PROTECTED MODE EXCEPTIONS  href="./fsub:fsubp:fisub.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS  href="./fsub:fsubp:fisub.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS  href="./fsub:fsubp:fisub.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS  href="./fsub:fsubp:fisub.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS  href="./fsub:fsubp:fisub.html#64-bit-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
