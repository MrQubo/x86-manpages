'\" t
.nh
.TH "X86-BNDMOV" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
BNDMOV - MOVE BOUNDS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 1A /r BNDMOV bnd1, bnd2/m64
T}	RM	N.E./V	MPX	T{
Move lower and upper bound from bnd2/m64 to bound register bnd1.
T}
T{
66 0F 1A /r BNDMOV bnd1, bnd2/m128
T}	RM	V/N.E.	MPX	T{
Move lower and upper bound from bnd2/m128 to bound register bnd1.
T}
T{
66 0F 1B /r BNDMOV bnd1/m64, bnd2
T}	MR	N.E./V	MPX	T{
Move lower and upper bound from bnd2 to bnd1/m64.
T}
T{
66 0F 1B /r BNDMOV bnd1/m128, bnd2
T}	MR	V/N.E.	MPX	T{
Move lower and upper bound from bnd2 to bound register bnd1/m128.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A
MR	ModRM:r/m (w)	ModRM:reg (r)	N/A
.TE

.SH DESCRIPTION
BNDMOV moves a pair of lower and upper bound values from the source
operand (the second operand) to the destination (the first operand).
Each operation is 128-bit move. The exceptions are same as the MOV
instruction. The memory format for loading/store bounds in 64-bit mode
is shown in Figure 3-5
\[la]bndmov.html#fig\-3\-5\[ra]\&.

.PP
This instruction does not change flags.

.SH OPERATION
.SS BNDMOV REGISTER TO REGISTER
.EX
DEST.LB := SRC.LB;
DEST.UB := SRC.UB;
.EE

.SS BNDMOV FROM MEMORY
.EX
IF 64-bit mode THEN
        DEST.LB := LOAD_QWORD(SRC);
        DEST.UB := LOAD_QWORD(SRC+8);
    ELSE
        DEST.LB := LOAD_DWORD_ZERO_EXT(SRC);
        DEST.UB := LOAD_DWORD_ZERO_EXT(SRC+4);
FI;
.EE

.SS BNDMOV TO MEMORY
.EX
IF 64-bit mode THEN
        DEST[63:0] := SRC.LB;
        DEST[127:64] := SRC.UB;
    ELSE
        DEST[31:0] := SRC.LB;
        DEST[63:32] := SRC.UB;
FI;
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="bndmov.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
BNDMOV void * _bnd_copy_ptr_bounds(const void *q, const void *r)
.EE

.SH FLAGS AFFECTED
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	T{
If 67H prefix is not used and CS.D=0.
T}
	T{
If 67H prefix is used and CS.D=1.
T}
#SS(0)	T{
If the memory operand effective address is outside the SS segment limit.
T}
#GP(0)	T{
If the memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the destination operand points to a non-writable segment
T}
	T{
If the DS, ES, FS, or GS segment register contains a NULL segment selector.
T}
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while CPL is 3.
T}
#PF(fault	code) If a page fault occurs.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	If 16-bit addressing is used.
#GP(0)	T{
If the memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If the memory operand effective address is outside the SS segment limit.
T}
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	If 16-bit addressing is used.
#GP(0)	T{
If the memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If the memory operand effective address is outside the SS segment limit.
T}
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while CPL is 3.
T}
#PF(fault	code) If a page fault occurs.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
	T{
If ModRM.r/m and REX encodes BND4-BND15 when Intel MPX is enabled.
T}
#SS(0)	T{
If the memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while CPL is 3.
T}
#PF(fault	code) If a page fault occurs.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
