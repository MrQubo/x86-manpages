'\" t
.nh
.TH "X86-CVTPS2PD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
CVTPS2PD - CONVERT PACKED SINGLE PRECISION FLOATING-POINT VALUES TO PACKED DOUBLE PRECISIONFLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
NP 0F 5A /r CVTPS2PD xmm1, xmm2/m64
T}	A	V/V	SSE2	T{
Convert two packed single precision floating-point values in xmm2/m64 to two packed double precision floating-point values in xmm1.
T}
T{
VEX.128.0F.WIG 5A /r VCVTPS2PD xmm1, xmm2/m64
T}	A	V/V	AVX	T{
Convert two packed single precision floating-point values in xmm2/m64 to two packed double precision floating-point values in xmm1.
T}
T{
VEX.256.0F.WIG 5A /r VCVTPS2PD ymm1, xmm2/m128
T}	A	V/V	AVX	T{
Convert four packed single precision floating-point values in xmm2/m128 to four packed double precision floating-point values in ymm1.
T}
T{
EVEX.128.0F.W0 5A /r VCVTPS2PD xmm1 {k1}{z}, xmm2/m64/m32bcst
T}	B	V/V	AVX512VL AVX512F	T{
Convert two packed single precision floating-point values in xmm2/m64/m32bcst to packed double precision floating-point values in xmm1 with writemask k1.
T}
T{
EVEX.256.0F.W0 5A /r VCVTPS2PD ymm1 {k1}{z}, xmm2/m128/m32bcst
T}	B	V/V	AVX512VL AVX512F	T{
Convert four packed single precision floating-point values in xmm2/m128/m32bcst to packed double precision floating-point values in ymm1 with writemask k1.
T}
T{
EVEX.512.0F.W0 5A /r VCVTPS2PD zmm1 {k1}{z}, ymm2/m256/m32bcst{sae}
T}	B	V/V	AVX512F	T{
Convert eight packed single precision floating-point values in ymm2/m256/b32bcst to eight packed double precision floating-point values in zmm1 with writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="cvtps2pd.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	Half	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Converts two, four or eight packed single precision floating-point
values in the source operand (second operand) to two, four or eight
packed double precision floating-point values in the destination operand
(first operand).

.PP
EVEX encoded versions: The source operand is a YMM/XMM/XMM (low 64-bits)
register, a 256/128/64-bit memory location or a 256/128/64-bit vector
broadcasted from a 32-bit memory location. The destination operand is a
ZMM/YMM/XMM register conditionally updated with writemask k1.

.PP
VEX.256 encoded version: The source operand is an XMM register or 128-
bit memory location. The destination operand is a YMM register. Bits
(MAXVL-1:256) of the corresponding destination ZMM register are zeroed.

.PP
VEX.128 encoded version: The source operand is an XMM register or 64-
bit memory location. The destination operand is a XMM register. The
upper Bits (MAXVL-1:128) of the corresponding ZMM register destination
are zeroed.

.PP
128-bit Legacy SSE version: The source operand is an XMM register or 64-
bit memory location. The destination operand is an XMM register. The
upper Bits (MAXVL-1:128) of the corresponding ZMM register destination
are unmodified.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.SH OPERATION
.SS VCVTPS2PD (EVEX ENCODED VERSIONS) WHEN SRC OPERAND IS A REGISTER <a
href="cvtps2pd.html#vcvtps2pd--evex-encoded-versions--when-src-operand-is-a-register"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    k := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] :=
            Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[k+31:k])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[i+63:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VCVTPS2PD (EVEX ENCODED VERSIONS) WHEN SRC OPERAND IS A MEMORY SOURCE <a
href="cvtps2pd.html#vcvtps2pd--evex-encoded-versions--when-src-operand-is-a-memory-source"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    k := j * 32
    IF k1[j] OR *no writemask*
        THEN
            IF (EVEX.b = 1)
                THEN
                    DEST[i+63:i] :=
            Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[31:0])
                ELSE
                    DEST[i+63:i] :=
            Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[k+31:k])
            FI;
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+63:i] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[i+63:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VCVTPS2PD (VEX.256 ENCODED VERSION)  href="cvtps2pd.html#vcvtps2pd--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[63:0] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[31:0])
DEST[127:64] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[63:32])
DEST[191:128] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[95:64])
DEST[255:192] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[127:96)
DEST[MAXVL-1:256] := 0
.EE

.SS VCVTPS2PD (VEX.128 ENCODED VERSION)  href="cvtps2pd.html#vcvtps2pd--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[63:0] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[31:0])
DEST[127:64] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[63:32])
DEST[MAXVL-1:128] := 0
.EE

.SS CVTPS2PD (128-BIT LEGACY SSE VERSION)  href="cvtps2pd.html#cvtps2pd--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[63:0] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[31:0])
DEST[127:64] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[63:32])
DEST[MAXVL-1:128] (unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="cvtps2pd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VCVTPS2PD __m512d _mm512_cvtps_pd( __m256 a);

VCVTPS2PD __m512d _mm512_mask_cvtps_pd( __m512d s, __mmask8 k, __m256 a);

VCVTPS2PD __m512d _mm512_maskz_cvtps_pd( __mmask8 k, __m256 a);

VCVTPS2PD __m512d _mm512_cvt_roundps_pd( __m256 a, int sae);

VCVTPS2PD __m512d _mm512_mask_cvt_roundps_pd( __m512d s, __mmask8 k, __m256 a, int sae);

VCVTPS2PD __m512d _mm512_maskz_cvt_roundps_pd( __mmask8 k, __m256 a, int sae);

VCVTPS2PD __m256d _mm256_mask_cvtps_pd( __m256d s, __mmask8 k, __m128 a);

VCVTPS2PD __m256d _mm256_maskz_cvtps_pd( __mmask8 k, __m128a);

VCVTPS2PD __m128d _mm_mask_cvtps_pd( __m128d s, __mmask8 k, __m128 a);

VCVTPS2PD __m128d _mm_maskz_cvtps_pd( __mmask8 k, __m128 a);

VCVTPS2PD __m256d _mm256_cvtps_pd (__m128 a)

CVTPS2PD __m128d _mm_cvtps_pd (__m128 a)
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="cvtps2pd.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Denormal.

.SH OTHER EXCEPTIONS
VEX-encoded instructions, see Table
2-20, “Type 3 Class Exception Conditions.”

.PP
EVEX-encoded instructions, see Table
2-47, “Type E3 Class Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If VEX.vvvv != 1111B or EVEX.vvvv != 1111B.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
