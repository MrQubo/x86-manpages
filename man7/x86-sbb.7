'\" t
.nh
.TH "X86-SBB" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
SBB - INTEGER SUBTRACTION WITH BORROW
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
1C ib	SBB AL, imm8	I	Valid	Valid	T{
Subtract with borrow imm8 from AL.
T}
1D iw	SBB AX, imm16	I	Valid	Valid	T{
Subtract with borrow imm16 from AX.
T}
1D id	SBB EAX, imm32	I	Valid	Valid	T{
Subtract with borrow imm32 from EAX.
T}
REX.W + 1D id	SBB RAX, imm32	I	Valid	N.E.	T{
Subtract with borrow sign-extended imm.32 to 64-bits from RAX.
T}
80 /3 ib	SBB r/m8, imm8	MI	Valid	Valid	T{
Subtract with borrow imm8 from r/m8.
T}
REX + 80 /3 ib	SBB r/m81, imm8	MI	Valid	N.E.	T{
Subtract with borrow imm8 from r/m8.
T}
81 /3 iw	SBB r/m16, imm16	MI	Valid	Valid	T{
Subtract with borrow imm16 from r/m16.
T}
81 /3 id	SBB r/m32, imm32	MI	Valid	Valid	T{
Subtract with borrow imm32 from r/m32.
T}
REX.W + 81 /3 id	SBB r/m64, imm32	MI	Valid	N.E.	T{
Subtract with borrow sign-extended imm32 to 64-bits from r/m64.
T}
83 /3 ib	SBB r/m16, imm8	MI	Valid	Valid	T{
Subtract with borrow sign-extended imm8 from r/m16.
T}
83 /3 ib	SBB r/m32, imm8	MI	Valid	Valid	T{
Subtract with borrow sign-extended imm8 from r/m32.
T}
REX.W + 83 /3 ib	SBB r/m64, imm8	MI	Valid	N.E.	T{
Subtract with borrow sign-extended imm8 from r/m64.
T}
18 /r	SBB r/m8, r8	MR	Valid	Valid	T{
Subtract with borrow r8 from r/m8.
T}
REX + 18 /r	SBB r/m81, r8	MR	Valid	N.E.	T{
Subtract with borrow r8 from r/m8.
T}
19 /r	SBB r/m16, r16	MR	Valid	Valid	T{
Subtract with borrow r16 from r/m16.
T}
19 /r	SBB r/m32, r32	MR	Valid	Valid	T{
Subtract with borrow r32 from r/m32.
T}
REX.W + 19 /r	SBB r/m64, r64	MR	Valid	N.E.	T{
Subtract with borrow r64 from r/m64.
T}
1A /r	SBB r8, r/m8	RM	Valid	Valid	T{
Subtract with borrow r/m8 from r8.
T}
REX + 1A /r	SBB r81, r/m81	RM	Valid	N.E.	T{
Subtract with borrow r/m8 from r8.
T}
1B /r	SBB r16, r/m16	RM	Valid	Valid	T{
Subtract with borrow r/m16 from r16.
T}
1B /r	SBB r32, r/m32	RM	Valid	Valid	T{
Subtract with borrow r/m32 from r32.
T}
REX.W + 1B /r	SBB r64, r/m64	RM	Valid	N.E.	T{
Subtract with borrow r/m64 from r64.
T}
.TE

.PP
.RS

.PP
1\&. In 64-bit mode, r/m8 can not be encoded to access the following
byte registers if a REX prefix is used: AH, BH, CH, DH.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
I	AL/AX/EAX/RAX	imm8/16/32	N/A	N/A
MI	ModRM:r/m (w)	imm8/16/32	N/A	N/A
MR	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Adds the source operand (second operand) and the carry (CF) flag, and
subtracts the result from the destination operand (first operand). The
result of the subtraction is stored in the destination operand. The
destination operand can be a register or a memory location; the source
operand can be an immediate, a register, or a memory location.

.PP
(However, two memory operands cannot be used in one instruction.) The
state of the CF flag represents a borrow from a previous subtraction.

.PP
When an immediate value is used as an operand, it is sign-extended to
the length of the destination operand format.

.PP
The SBB instruction does not distinguish between signed or unsigned
operands. Instead, the processor evaluates the result for both data
types and sets the OF and CF flags to indicate a borrow in the signed or
unsigned result, respectively. The SF flag indicates the sign of the
signed result.

.PP
The SBB instruction is usually executed as part of a multibyte or
multiword subtraction in which a SUB instruction is followed by a SBB
instruction.

.PP
This instruction can be used with a LOCK prefix to allow the instruction
to be executed atomically.

.PP
In 64-bit mode, the instruction’s default operation size is 32 bits.
Using a REX prefix in the form of REX.R permits access to additional
registers (R8-R15). Using a REX prefix in the form of REX.W promotes
operation to 64 bits. See the summary chart at the beginning of this
section for encoding data and limits.

.SH OPERATION
.EX
DEST := (DEST – (SRC + CF));
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="sbb.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
SBB extern unsigned char _subborrow_u8(unsigned char c_in, unsigned char src1, unsigned char src2, unsigned char *diff_out);

SBB extern unsigned char _subborrow_u16(unsigned char c_in, unsigned short src1, unsigned short src2, unsigned short *diff_out);

SBB extern unsigned char _subborrow_u32(unsigned char c_in, unsigned int src1, unsigned char int, unsigned int *diff_out);

SBB extern unsigned char _subborrow_u64(unsigned char c_in, unsigned __int64 src1, unsigned __int64 src2, unsigned __int64 *diff_out);
.EE

.SH FLAGS AFFECTED
The OF, SF, ZF, AF, PF, and CF flags are set according to the result.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the destination is located in a non-writable segment.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	T{
If the LOCK prefix is used but the destination is not a memory operand.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
