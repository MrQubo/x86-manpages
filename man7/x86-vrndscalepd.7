'\" t
.nh
.TH "X86-VRNDSCALEPD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VRNDSCALEPD - ROUND PACKED FLOAT64 VALUES TO INCLUDE A GIVEN NUMBER OF FRACTION BITS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.128.66.0F3A.W1 09 /r ib VRNDSCALEPD xmm1 {k1}{z}, xmm2/m128/m64bcst, imm8
T}	A	V/V	AVX512VL AVX512F	T{
Rounds packed double precision floating-point values in xmm2/m128/m64bcst to a number of fraction bits specified by the imm8 field. Stores the result in xmm1 register. Under writemask.
T}
T{
EVEX.256.66.0F3A.W1 09 /r ib VRNDSCALEPD ymm1 {k1}{z}, ymm2/m256/m64bcst, imm8
T}	A	V/V	AVX512VL AVX512F	T{
Rounds packed double precision floating-point values in ymm2/m256/m64bcst to a number of fraction bits specified by the imm8 field. Stores the result in ymm1 register. Under writemask.
T}
T{
EVEX.512.66.0F3A.W1 09 /r ib VRNDSCALEPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}, imm8
T}	A	V/V	AVX512F	T{
Rounds packed double precision floating-point values in zmm2/m512/m64bcst to a number of fraction bits specified by the imm8 field. Stores the result in zmm1 register using writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vrndscalepd.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Full	ModRM:reg (w)	ModRM:r/m (r)	imm8	N/A
.TE

.SS DESCRIPTION
Round the double precision floating-point values in the source operand
by the rounding mode specified in the immediate operand (see Figure
5-29
\[la]vrndscalepd.html#fig\-5\-29\[ra]) and places the result in the
destination operand.

.PP
The destination operand (the first operand) is a ZMM/YMM/XMM register
conditionally updated according to the writemask. The source operand
(the second operand) can be a ZMM/YMM/XMM register, a 512/256/128-bit
memory location, or a 512/256/128-bit vector broadcasted from a 64-bit
memory location.

.PP
The rounding process rounds the input to an integral value, plus number
bits of fraction that are specified by imm8[7:4] (to be included in
the result) and returns the result as a double precision floating-point
value.

.PP
It should be noticed that no overflow is induced while executing this
instruction (although the source is scaled by the imm8[7:4] value).

.PP
The immediate operand also specifies control fields for the rounding
operation, three bit fields are defined and shown in the “Immediate
Control Description” figure below. Bit 3 of the immediate byte controls
the processor behavior for a precision exception, bit 2 selects the
source of rounding mode control. Bits 1:0 specify a non-sticky
rounding-mode value (immediate control table below lists the encoded
values for rounding-mode field).

.PP
The Precision Floating-Point Exception is signaled according to the
immediate operand. If any source operand is an SNaN then it will be
converted to a QNaN. If DAZ is set to ‘1 then denormals will be
converted to zero before rounding.

.PP
The sign of the result of this instruction is preserved, including the
sign of zero.

.PP
The formula of the operation on each data element for VRNDSCALEPD is

.PP
ROUND(x) = 2-M*Round_to_INT(x*2M,
round_ctrl),

.PP
round_ctrl = imm[3:0];

.PP
M=imm[7:4];

.PP
The operation of x*2M is computed as if the exponent range
is unlimited (i.e., no overflow ever occurs).

.PP
VRNDSCALEPD is a more general form of the VEX-encoded VROUNDPD
instruction. In VROUNDPD, the formula of the operation on each element
is

.PP
ROUND(x) = Round_to_INT(x, round_ctrl),

.PP
round_ctrl = imm[3:0];

.PP
Note: EVEX.vvvv is reserved and must be 1111b, otherwise instructions
will #UD.

.PP
Handling of special case of input values are listed in Table
5-31
\[la]vrndscalepd.html#tbl\-5\-31\[ra]\&.

.SS OPERATION
.EX
RoundToIntegerDP(SRC[63:0], imm8[7:0]) {
    if (imm8[2] = 1)
        rounding_direction := MXCSR:RC
                    ; get round control from MXCSR
    else
        rounding_direction := imm8[1:0]
                    ; get round control from imm8[1:0]
    FI
    M := imm8[7:4] ; get the scaling factor
    case (rounding_direction)
    00: TMP[63:0] := round_to_nearest_even_integer(2M*SRC[63:0])
    01: TMP[63:0] := round_to_equal_or_smaller_integer(2M*SRC[63:0])
    10: TMP[63:0] := round_to_equal_or_larger_integer(2M*SRC[63:0])
    11: TMP[63:0] := round_to_nearest_smallest_magnitude_integer(2M*SRC[63:0])
    ESAC
    Dest[63:0] := 2-M* TMP[63:0]
                ; scale down back to 2-M
    if (imm8[3] = 0) Then ; check SPE
        if (SRC[63:0] != Dest[63:0]) Then
                    ; check precision lost
            set_precision()
                ; set #PE
        FI;
    FI;
    return(Dest[63:0])
}
.EE

.SS VRNDSCALEPD (EVEX ENCODED VERSIONS)  href="vrndscalepd.html#vrndscalepd--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
IF *src is a memory operand*
    THEN TMP_SRC := BROADCAST64(SRC, VL, k1)
    ELSE TMP_SRC := SRC
FI;
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := RoundToIntegerDP((TMP_SRC[i+63:i], imm8[7:0])
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[i+63:i] remains unchanged*
            ELSE ; zeroing-masking
                DEST[i+63:i] := 0
        FI;
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vrndscalepd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VRNDSCALEPD __m512d _mm512_roundscale_pd( __m512d a, int imm);

VRNDSCALEPD __m512d _mm512_roundscale_round_pd( __m512d a, int imm, int sae);

VRNDSCALEPD __m512d _mm512_mask_roundscale_pd(__m512d s, __mmask8 k, __m512d a, int imm);

VRNDSCALEPD __m512d _mm512_mask_roundscale_round_pd(__m512d s, __mmask8 k, __m512d a, int imm, int sae);

VRNDSCALEPD __m512d _mm512_maskz_roundscale_pd( __mmask8 k, __m512d a, int imm);

VRNDSCALEPD __m512d _mm512_maskz_roundscale_round_pd( __mmask8 k, __m512d a, int imm, int sae);

VRNDSCALEPD __m256d _mm256_roundscale_pd( __m256d a, int imm);

VRNDSCALEPD __m256d _mm256_mask_roundscale_pd(__m256d s, __mmask8 k, __m256d a, int imm);

VRNDSCALEPD __m256d _mm256_maskz_roundscale_pd( __mmask8 k, __m256d a, int imm);

VRNDSCALEPD __m128d _mm_roundscale_pd( __m128d a, int imm);

VRNDSCALEPD __m128d _mm_mask_roundscale_pd(__m128d s, __mmask8 k, __m128d a, int imm);

VRNDSCALEPD __m128d _mm_maskz_roundscale_pd( __mmask8 k, __m128d a, int imm);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vrndscalepd.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Precision.

.PP
If SPE is enabled, precision exception is not reported (regardless of
MXCSR exception mask).

.SS OTHER EXCEPTIONS
See Table 2-46, “Type E2 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
