'\" t
.nh
.TH "X86-PEXT" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
PEXT - PARALLEL BITS EXTRACT
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32-bit Mode\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
VEX.LZ.F3.0F38.W0 F5 /r PEXT r32a, r32b, r/m32
T}	RVM	V/V	BMI2	T{
Parallel extract of bits from r32b using mask in r/m32, result is written to r32a.
T}
T{
VEX.LZ.F3.0F38.W1 F5 /r PEXT r64a, r64b, r/m64
T}	RVM	V/N.E.	BMI2	T{
Parallel extract of bits from r64b using mask in r/m64, result is written to r64a.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RVM	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
PEXT uses a mask in the second source operand (the third operand) to
transfer either contiguous or non-contiguous bits in the first source
operand (the second operand) to contiguous low order bit positions in
the destination (the first operand). For each bit set in the MASK, PEXT
extracts the corresponding bits from the first source operand and writes
them into contiguous lower bits of destination operand. The remaining
upper bits of destination are zeroed.

.PP
This instruction is not supported in real mode and virtual-8086 mode.
The operand size is always 32 bits if not in 64-bit mode. In 64-bit mode
operand size 64 requires VEX.W1. VEX.W1 is ignored in non-64-bit modes.
An attempt to execute this instruction with VEX.L not equal to 0 will
cause #UD.

.SH OPERATION
.EX
TEMP := SRC1;
MASK := SRC2;
DEST := 0 ;
m := 0, k := 0;
DO WHILE m < OperandSize
    IF MASK[ m] = 1 THEN
        DEST[ k] := TEMP[ m];
        k := k+ 1;
    FI
    m := m+ 1;
OD
.EE

.SH FLAGS AFFECTED
None.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="pext.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
PEXT unsigned __int32 _pext_u32(unsigned __int32 src, unsigned __int32 mask);

PEXT unsigned __int64 _pext_u64(unsigned __int64 src, unsigned __int32 mask);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS
None.

.SH OTHER EXCEPTIONS
See Table 2-29, “Type 13 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
