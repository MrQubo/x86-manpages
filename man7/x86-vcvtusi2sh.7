'\" t
.nh
.TH "X86-VCVTUSI2SH" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VCVTUSI2SH - CONVERT UNSIGNED DOUBLEWORD INTEGER TO AN FP16 VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fBInstruction En Bit Mode Flag Support Instruction En Bit Mode Flag Support 64/32 CPUID Feature Instruction En Bit Mode Flag CPUID Feature Instruction En Bit Mode Flag Op/ 64/32 CPUID Feature Instruction En Bit Mode Flag 64/32 CPUID Feature Instruction En Bit Mode Flag CPUID Feature Instruction En Bit Mode Flag Op/ 64/32 CPUID Feature\fP	\fB\fP	\fBSupport\fP	\fB\fP	\fBDescription\fP
T{
EVEX.LLIG.F3.MAP5.W0 7B /r VCVTUSI2SH xmm1, xmm2, r32/m32 {er}
T}	A	V/V1	AVX512-FP16	T{
Convert an unsigned doubleword integer from r32/m32 to an FP16 value, and store the result in xmm1. Bits 127:16 from xmm2 are copied to xmm1[127:16]\&.
T}
T{
EVEX.LLIG.F3.MAP5.W1 7B /r VCVTUSI2SH xmm1, xmm2, r64/m64 {er}
T}	A	V/N.E.	AVX512-FP16	T{
Convert an unsigned quadword integer from r64/m64 to an FP16 value, and store the result in xmm1. Bits 127:16 from xmm2 are copied to xmm1[127:16]\&.
T}
.TE

.PP
.RS

.PP
1\&. Outside of 64b mode, the EVEX.W field is ignored. The instruction
behaves as if W=0 was used.

.RE

.SH INSTRUCTION OPERAND ENCODING  href="vcvtusi2sh.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Scalar	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SS DESCRIPTION
This instruction converts an unsigned doubleword integer (or unsigned
quadword integer if operand size is 64 bits) in the second source
operand to a FP16 value in the destination operand. The result is stored
in the low word of the destination operand. When conversion is inexact,
the value returned is rounded according to the rounding control bits in
the MXCSR register or embedded rounding controls.

.PP
The second source operand can be a general-purpose register or a
32/64-bit memory location. The first source and destination operands are
XMM registers. Bits 127:16 of the XMM register destination are copied
from corresponding bits in the first source operand. Bits MAXVL-1:128 of
the destination register are zeroed.

.PP
If the result of the convert operation is overflow and MXCSR.OM=0 then a
SIMD exception will be raised with OE=1, PE=1.

.SS OPERATION
.SS VCVTUSI2SH DEST, SRC1, SRC2  href="vcvtusi2sh.html#vcvtusi2sh-dest--src1--src2"
class="anchor">¶

.EX
IF *SRC2 is a register* and (EVEX.b = 1):
    SET_RM(EVEX.RC)
ELSE:
    SET_RM(MXCSR.RC)
IF 64-mode and OperandSize == 64:
    DEST.fp16[0] := Convert_unsigned_integer64_to_fp16(SRC2.qword)
ELSE:
    DEST.fp16[0] := Convert_unsigned_integer32_to_fp16(SRC2.dword)
DEST[127:16] := SRC1[127:16]
DEST[MAXVL-1:128] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vcvtusi2sh.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VCVTUSI2SH __m128h _mm_cvt_roundu32_sh (__m128h a, unsigned int b, int rounding);

VCVTUSI2SH __m128h _mm_cvt_roundu64_sh (__m128h a, unsigned __int64 b, int rounding);

VCVTUSI2SH __m128h _mm_cvtu32_sh (__m128h a, unsigned int b);

VCVTUSI2SH __m128h _mm_cvtu64_sh (__m128h a, unsigned __int64 b);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vcvtusi2sh.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Overflow, Precision.

.SS OTHER EXCEPTIONS
EVEX-encoded instructions, see Table
2-48, “Type E3NF Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
