'\" t
.nh
.TH "X86-SIDT" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
SIDT - STORE INTERRUPT DESCRIPTOR TABLE REGISTER
\fBOpcode1\fP

.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
0F 01 /1			Valid	Valid	Store IDTR to \fIm.\fP
.TE

.PP
1\&. See the IA-32 Architecture Compatibility section below.

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
M	ModRM:r/m (w)	N/A	N/A	N/A
.TE

.SH DESCRIPTION
Stores the content the interrupt descriptor table register (IDTR) in the
destination operand. The destination operand specifies a 6-byte memory
location.

.PP
In non-64-bit modes, the 16-bit limit field of the register is stored in
the low 2 bytes of the memory location and the 32-bit base address is
stored in the high 4 bytes.

.PP
In 64-bit mode, the operand size fixed at 8+2 bytes. The instruction
stores 8-byte base and 2-byte limit values.

.PP
SIDT is only useful in operating-system software; however, it can be
used in application programs without causing an exception to be
generated if CR4.UMIP = 0. See “LGDT/LIDT—Load Global/Interrupt
Descriptor Table Register” in Chapter 3, Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 2A, for information on
loading the GDTR and IDTR.

.SH IA-32 ARCHITECTURE COMPATIBILITY  href="sidt.html#ia-32-architecture-compatibility"
class="anchor">¶

.PP
The 16-bit form of SIDT is compatible with the Intel 286 processor if
the upper 8 bits are not referenced. The Intel 286 processor fills these
bits with 1s; processor generations later than the Intel 286 processor
fill these bits with 0s.

.SH OPERATION
.EX
IF instruction is SIDT
    THEN
        IF OperandSize =16 or OperandSize = 32 (* Legacy or Compatibility Mode *)
            THEN
                DEST[0:15] := IDTR(Limit);
                DEST[16:47] := IDTR(Base); FI; (* Full 32-bit base address stored *)
            ELSE (* 64-bit Mode *)
                DEST[0:15] := IDTR(Limit);
                DEST[16:79] := IDTR(Base); (* Full 64-bit base address stored *)
        FI;
FI;
.EE

.SH FLAGS AFFECTED
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the destination is located in a non-writable segment.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
	If CR4.UMIP = 1 and CPL &gt; 0.
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while CPL = 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	If CR4.UMIP = 1.
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#UD	If the LOCK prefix is used.
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
	If CR4.UMIP = 1 and CPL &gt; 0.
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while CPL = 3.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
