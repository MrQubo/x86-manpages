'\" t
.nh
.TH "X86-EPA" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
EPA - ADD VERSION ARRAY
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
EAX = 0AH ENCLS[EPA]	IR	V/V	SGX1	T{
This leaf function adds a Version Array to the EPC.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
\fB\fP	\fB\fP	\fB\fP	\fB\fP
Op/En	EAX	RBX	RCX
IR	EPA (In)	PT_VA (In, Constant)	T{
Effective address of the EPC page (In)
T}
.TE

.SS DESCRIPTION
This leaf function creates an empty version array in the EPC page whose
logical address is given by DS:RCX, and sets up EPCM attributes for that
page. At the time of execution of this instruction, the register RBX
must be set to PT_VA.

.PP
The table below provides additional information on the memory parameter
of EPA leaf function.

.SH EPA MEMORY PARAMETER SEMANTICS
.TS
allbox;
l 
l .
\fB\fP
EPCPAGE
T{
Write access permitted by Enclave
T}
.TE

.SS CONCURRENCY RESTRICTIONS
.SS OPERATION
.EX
IF (RBX ≠ PT_VA or DS:RCX is not 4KByte Aligned)
    THEN #GP(0); FI;
IF (DS:RCX does not resolve within an EPC)
    THEN #PF(DS:RCX); FI;
(* Check concurrency with other Intel SGX instructions *)
IF (Other Intel SGX instructions accessing the page)
    THEN
        IF (<<VMX non-root operation>> AND <<ENABLE_EPC_VIRTUALIZATION_EXTENSIONS>>)
            THEN
                VMCS.Exit_reason := SGX_CONFLICT;
                VMCS.Exit_qualification.code := EPC_PAGE_CONFLICT_EXCEPTION;
                VMCS.Exit_qualification.error := 0;
                VMCS.Guest-physical_address := << translation of DS:RCX produced by paging >>;
                VMCS.Guest-linear_address := DS:RCX;
            Deliver VMEXIT;
            ELSE
                #GP(0);
        FI;
FI;
(* Check EPC page must be empty *)
IF (EPCM(DS:RCX). VALID ≠ 0)
    THEN #PF(DS:RCX); FI;
(* Clears EPC page *)
DS:RCX[32767:0] := 0;
EPCM(DS:RCX).PT := PT_VA;
EPCM(DS:RCX).ENCLAVEADDRESS := 0;
EPCM(DS:RCX).BLOCKED := 0;
EPCM(DS:RCX).PENDING := 0;
EPCM(DS:RCX).MODIFIED := 0;
EPCM(DS:RCX).PR := 0;
EPCM(DS:RCX).RWX := 0;
EPCM(DS:RCX).VALID := 1;
.EE

.SS FLAGS AFFECTED
None

.SS PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the DS segment limit.
T}
	T{
If a memory operand is not properly aligned.
T}
	T{
If another Intel SGX instruction is accessing the EPC page.
T}
	If RBX is not set to PT_VA.
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If a memory operand is not an EPC page.
T}
	If the EPC page is valid.
.TE

.SS 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand is non-canonical form.
T}
	T{
If a memory operand is not properly aligned.
T}
	T{
If another Intel SGX instruction is accessing the EPC page.
T}
	If RBX is not set to PT_VA.
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If a memory operand is not an EPC page.
T}
	If the EPC page is valid.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
