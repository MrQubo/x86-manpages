'\" t
.nh
.TH "X86-POPCNT" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
POPCNT - RETURN THE COUNT OF NUMBER OF BITS SET TO 1
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
F3 0F B8 /r	POPCNT r16, r/m16	RM	Valid	Valid	POPCNT on r/m16
F3 0F B8 /r	POPCNT r32, r/m32	RM	Valid	Valid	POPCNT on r/m32
F3 REX.W 0F B8 /r	POPCNT r64, r/m64	RM	Valid	N.E.	POPCNT on r/m64
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
This instruction calculates the number of bits set to 1 in the second
operand (source) and returns the count in the first operand (a
destination register).

.SH OPERATION
.EX
Count = 0;
For (i=0; i < OperandSize; i++)
{ IF (SRC[ i] = 1) // i’th bit
    THEN Count++; FI;
}
DEST := Count;
.EE

.SH FLAGS AFFECTED
OF, SF, ZF, AF, CF, PF are all cleared. ZF is set if SRC = 0, otherwise
ZF is cleared.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="popcnt.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
POPCNT int _mm_popcnt_u32(unsigned int a);

POPCNT int64_t _mm_popcnt_u64(unsigned __int64 a);
.EE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS or GS segments.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF	(fault-code) For a page fault.
#AC(0)	T{
If an unaligned memory reference is made while the current privilege level is 3 and alignment checking is enabled.
T}
#UD	If CPUID.01H:ECX.POPCNT [Bit 23] = 0.
	If LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If any part of the operand lies outside of the effective address space from 0 to 0FFFFH.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If CPUID.01H:ECX.POPCNT [Bit 23] = 0.
	If LOCK prefix is used.
.TE

.SH VIRTUAL 8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If any part of the operand lies outside of the effective address space from 0 to 0FFFFH.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF	(fault-code) For a page fault.
#AC(0)	T{
If an unaligned memory reference is made while alignment checking is enabled.
T}
#UD	If CPUID.01H:ECX.POPCNT [Bit 23] = 0.
	If LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in Protected Mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#PF	(fault-code) For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If CPUID.01H:ECX.POPCNT [Bit 23] = 0.
	If LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
