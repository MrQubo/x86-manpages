'\" t
.nh
.TH "X86-MOVS-MOVSB-MOVSW-MOVSD-MOVSQ" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MOVS-MOVSB-MOVSW-MOVSD-MOVSQ - MOVE DATA FROM STRING TO STRING
\\

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
A4	MOVS \fIm8\fP, \fIm8\fP	ZO	Valid	Valid	T{
For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI.
T}
A5	MOVS \fIm16\fP, \fIm16\fP	ZO	Valid	Valid	T{
For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI.
T}
A5	MOVS \fIm32\fP, \fIm32\fP	ZO	Valid	Valid	T{
For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI.
T}
REX.W + A5	MOVS \fIm64\fP, \fIm64\fP	ZO	Valid	N.E.	Move qword from address (R|E)SI to (R|E)DI.
A4	MOVSB	ZO	Valid	Valid	T{
For legacy mode, Move byte from address DS:(E)SI to ES:(E)DI. For 64-bit mode move byte from address (R|E)SI to (R|E)DI.
T}
A5	MOVSW	ZO	Valid	Valid	T{
For legacy mode, move word from address DS:(E)SI to ES:(E)DI. For 64-bit mode move word at address (R|E)SI to (R|E)DI.
T}
A5	MOVSD	ZO	Valid	Valid	T{
For legacy mode, move dword from address DS:(E)SI to ES:(E)DI. For 64-bit mode move dword from address (R|E)SI to (R|E)DI.
T}
REX.W + A5	MOVSQ	ZO	Valid	N.E.	Move qword from address (R|E)SI to (R|E)DI.
.TE

.SH INSTRUCTION OPERAND ENCODING <a
href="./movs:movsb:movsw:movsd:movsq.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
ZO	N/A	N/A	N/A	N/A
.TE

.SH DESCRIPTION  href="./movs:movsb:movsw:movsd:movsq.html#description"
class="anchor">¶

.PP
Moves the byte, word, or doubleword specified with the second operand
(source operand) to the location specified with the first operand
(destination operand). Both the source and destination operands are
located in memory. The address of the source operand is read from the
DS:ESI or the DS:SI registers (depending on the address-size attribute
of the instruction, 32 or 16, respectively). The address of the
destination operand is read from the ES:EDI or the ES:DI registers
(again depending on the address-size attribute of the instruction). The
DS segment may be overridden with a segment override prefix, but the ES
segment cannot be overridden.

.PP
At the assembly-code level, two forms of this instruction are allowed:
the “explicit-operands” form and the “no-operands” form. The
explicit-operands form (specified with the MOVS mnemonic) allows the
source and destination operands to be specified explicitly. Here, the
source and destination operands should be symbols that indicate the size
and location of the source value and the destination, respectively. This
explicit-operands form is provided to allow documentation; however, note
that the documentation provided by this form can be misleading. That is,
the source and destination operand symbols must specify the correct
\fBtype\fP (size) of the operands (bytes, words, or doublewords), but they
do not have to specify the correct \fBlocation\fP\&. The locations of the
source and destination operands are always specified by the DS:(E)SI and
ES:(E)DI registers, which must be loaded correctly before the move
string instruction is executed.

.PP
The no-operands form provides “short forms” of the byte, word, and
doubleword versions of the MOVS instructions. Here also DS:(E)SI and
ES:(E)DI are assumed to be the source and destination operands,
respectively. The size of the source and destination operands is
selected with the mnemonic: MOVSB (byte move), MOVSW (word move), or
MOVSD (doubleword move).

.PP
After the move operation, the (E)SI and (E)DI registers are incremented
or decremented automatically according to the setting of the DF flag in
the EFLAGS register. (If the DF flag is 0, the (E)SI and (E)DI register
are incre-

.PP
mented; if the DF flag is 1, the (E)SI and (E)DI registers are
decremented.) The registers are incremented or decremented by 1 for byte
operations, by 2 for word operations, or by 4 for doubleword operations.

.PP
.RS

.PP
To improve performance, more recent processors support modifications
to the processor’s operation during the string store operations
initiated with MOVS and MOVSB. See Section 7.3.9.3 in the
Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 1, for additional information on fast-string operation.

.PP
The MOVS, MOVSB, MOVSW, and MOVSD instructions can be preceded by the
REP prefix (see “REP/REPE/REPZ /REPNE/REPNZ—Repeat String Operation
Prefix” for a description of the REP prefix) for block moves of ECX
bytes, words, or doublewords.

.PP
In 64-bit mode, the instruction’s default address size is 64 bits,
32-bit address size is supported using the prefix 67H. The 64-bit
addresses are specified by RSI and RDI; 32-bit address are specified
by ESI and EDI. Use of the REX.W prefix promotes doubleword operation
to 64 bits. See the summary chart at the beginning of this section for
encoding data and limits.

.RE

.SH OPERATION  href="./movs:movsb:movsw:movsd:movsq.html#operation"
class="anchor">¶

.EX
DEST := SRC;
Non-64-bit Mode:
IF (Byte move)
    THEN IF DF = 0
        THEN
            (E)SI := (E)SI + 1;
            (E)DI := (E)DI + 1;
        ELSE
            (E)SI := (E)SI – 1;
            (E)DI := (E)DI – 1;
        FI;
    ELSE IF (Word move)
        THEN IF DF = 0
            (E)SI := (E)SI + 2;
            (E)DI := (E)DI + 2;
            FI;
        ELSE
            (E)SI := (E)SI – 2;
            (E)DI := (E)DI – 2;
        FI;
    ELSE IF (Doubleword move)
        THEN IF DF = 0
            (E)SI := (E)SI + 4;
            (E)DI := (E)DI + 4;
            FI;
        ELSE
            (E)SI := (E)SI – 4;
            (E)DI := (E)DI – 4;
        FI;
FI;
64-bit Mode:
IF (Byte move)
    THEN IF DF = 0
        THEN
            (R|E)SI := (R|E)SI + 1;
            (R|E)DI := (R|E)DI + 1;
        ELSE
            (R|E)SI := (R|E)SI – 1;
            (R|E)DI := (R|E)DI – 1;
        FI;
    ELSE IF (Word move)
        THEN IF DF = 0
            (R|E)SI := (R|E)SI + 2;
            (R|E)DI := (R|E)DI + 2;
            FI;
        ELSE
            (R|E)SI := (R|E)SI – 2;
            (R|E)DI := (R|E)DI – 2;
        FI;
    ELSE IF (Doubleword move)
        THEN IF DF = 0
            (R|E)SI := (R|E)SI + 4;
            (R|E)DI := (R|E)DI + 4;
            FI;
        ELSE
            (R|E)SI := (R|E)SI – 4;
            (R|E)DI := (R|E)DI – 4;
        FI;
    ELSE IF (Quadword move)
        THEN IF DF = 0
            (R|E)SI := (R|E)SI + 8;
            (R|E)DI := (R|E)DI + 8;
            FI;
        ELSE
            (R|E)SI := (R|E)SI – 8;
            (R|E)DI := (R|E)DI – 8;
        FI;
FI;
.EE

.SH FLAGS AFFECTED  href="./movs:movsb:movsw:movsd:movsq.html#flags-affected"
class="anchor">¶

.PP
None.

.SH PROTECTED MODE EXCEPTIONS  href="./movs:movsb:movsw:movsd:movsq.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the destination is located in a non-writable segment.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS <a
href="./movs:movsb:movsw:movsd:movsq.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS <a
href="./movs:movsb:movsw:movsd:movsq.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS <a
href="./movs:movsb:movsw:movsd:movsq.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS  href="./movs:movsb:movsw:movsd:movsq.html#64-bit-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
