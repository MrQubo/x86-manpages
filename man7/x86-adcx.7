'\" t
.nh
.TH "X86-ADCX" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
ADCX - UNSIGNED INTEGER ADDITION OF TWO OPERANDS WITH CARRY FLAG
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
66 0F 38 F6 /r ADCX r32, r/m32	RM	V/V	ADX	T{
Unsigned addition of r32 with CF, r/m32 to r32, writes CF.
T}
T{
66 REX.w 0F 38 F6 /r ADCX r64, r/m64
T}	RM	V/N.E.	ADX	T{
Unsigned addition of r64 with CF, r/m64 to r64, writes CF.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Performs an unsigned addition of the destination operand (first
operand), the source operand (second operand) and the carry-flag (CF)
and stores the result in the destination operand. The destination
operand is a general-purpose register, whereas the source operand can be
a general-purpose register or memory location. The state of CF can
represent a carry from a previous addition. The instruction sets the CF
flag with the carry generated by the unsigned addition of the operands.

.PP
The ADCX instruction is executed in the context of multi-precision
addition, where we add a series of operands with a carry-chain. At the
beginning of a chain of additions, we need to make sure the CF is in a
desired initial state. Often, this initial state needs to be 0, which
can be achieved with an instruction to zero the CF (e.g. XOR).

.PP
This instruction is supported in real mode and virtual-8086 mode. The
operand size is always 32 bits if not in 64-bit mode.

.PP
In 64-bit mode, the default operation size is 32 bits. Using a REX
Prefix in the form of REX.R permits access to additional registers
(R8-15). Using REX Prefix in the form of REX.W promotes operation to 64
bits.

.PP
ADCX executes normally either inside or outside a transaction region.

.PP
Note: ADCX defines the OF flag differently than the ADD/ADC instructions
as defined in the Intel® 64 and IA-32 Architectures Software
Developer’s Manual, Volume 2A.

.SH OPERATION
.EX
IF OperandSize is 64-bit
    THEN CF:DEST[63:0] := DEST[63:0] + SRC[63:0] + CF;
    ELSE CF:DEST[31:0] := DEST[31:0] + SRC[31:0] + CF;
FI;
.EE

.SH FLAGS AFFECTED
CF is updated based on result. OF, SF, ZF, AF, and PF flags are
unmodified.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="adcx.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
unsigned char _addcarryx_u32 (unsigned char c_in, unsigned int src1, unsigned int src2, unsigned int *sum_out);

unsigned char _addcarryx_u64 (unsigned char c_in, unsigned __int64 src1, unsigned __int64 src2, unsigned __int64 *sum_out);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.ADX[bit 19] = 0.
T}
#SS(0)	T{
For an illegal address in the SS segment.
T}
#GP(0)	T{
For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a null segment selector.
T}
#PF(fault-code)	For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.ADX[bit 19] = 0.
T}
#SS(0)	T{
For an illegal address in the SS segment.
T}
#GP(0)	T{
If any part of the operand lies outside the effective address space from 0 to FFFFH.
T}
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.ADX[bit 19] = 0.
T}
#SS(0)	T{
For an illegal address in the SS segment.
T}
#GP(0)	T{
If any part of the operand lies outside the effective address space from 0 to FFFFH.
T}
#PF(fault-code)	For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
	T{
If CPUID.(EAX=07H, ECX=0H):EBX.ADX[bit 19] = 0.
T}
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#PF(fault-code)	For a page fault.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
