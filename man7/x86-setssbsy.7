'\" t
.nh
.TH "X86-SETSSBSY" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
SETSSBSY - MARK SHADOW STACK BUSY
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
F3 0F 01 E8 SETSSBSY	ZO	V/V	CET_SS	T{
Set busy flag in supervisor shadow stack token reference by IA32_PL0_SSP.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="setssbsy.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
ZO	N/A	N/A	N/A	N/A
.TE

.SH DESCRIPTION
The SETSSBSY instruction verifies the presence of a non-busy supervisor
shadow stack token at the address in the IA32_PL0_SSP MSR and marks it
busy. Following successful execution of the instruction, the SSP is set
to the value of the IA32_PL0_SSP MSR.

.SH OPERATION
.EX
IF (CR4.CET = 0)
    THEN #UD; FI;
IF (IA32_S_CET.SH_STK_EN = 0)
    THEN #UD; FI;
IF CPL > 0
    THEN GP(0); FI;
SSP_LA = IA32_PL0_SSP
If SSP_LA not aligned to 8 bytes
    THEN #GP(0); FI;
expected_token_value = SSP_LA
new_token_value = SSP_LA | BUSY_BIT
IF shadow_stack_lock_cmpxchg8B(SSP_LA, new_token_value, expected_token_value) != expected_token_value
    THEN #CP(SETSSBSY); FI;
SSP = SSP_LA
.EE

.SH FLAGS AFFECTED
None.

.SH C/C++ COMPILER INTRINSIC EQUIVALENT  href="setssbsy.html#c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
SETSSBSYvoid _setssbsy(void);
.EE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
	If CR4.CET = 0.
	IF IA32_S_CET.SH_STK_EN = 0.
#GP(0)	If IA32_PL0_SSP not aligned to 8 bytes.
	If CPL is not 0.
#CP(setssbsy)	If busy bit in token is set.
	T{
If in 32-bit or compatibility mode, and the address in token is not below 4G.
T}
#PF(fault-code)	If a page fault occurs.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS  href="setssbsy.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
The SETSSBSY instruction is not recognized in real-address mode.
T}
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS  href="setssbsy.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
The SETSSBSY instruction is not recognized in virtual-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS  href="setssbsy.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same as protected mode exceptions.

.SH 64-BIT MODE EXCEPTIONS
Same as protected mode exceptions.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
