'\" t
.nh
.TH "X86-RDPMC" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
RDPMC - READ PERFORMANCE-MONITORING COUNTERS
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode*\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
0F 33	RDPMC	ZO	Valid	Valid	T{
Read performance-monitoring counter specified by ECX into EDX:EAX.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
ZO	N/A	N/A	N/A	N/A
.TE

.SH DESCRIPTION
Reads the contents of the performance monitoring counter (PMC) specified
in ECX register into registers EDX:EAX. (On processors that support the
Intel 64 architecture, the high-order 32 bits of RCX are ignored.) The
EDX register is loaded with the high-order 32 bits of the PMC and the
EAX register is loaded with the low-order 32 bits. (On processors that
support the Intel 64 architecture, the high-order 32 bits of each of RAX
and RDX are cleared.) If fewer than 64 bits are implemented in the PMC
being read, unimplemented bits returned to EDX:EAX will have value zero.

.PP
The width of PMCs on processors supporting architectural performance
monitoring (CPUID.0AH:EAX[7:0] ≠ 0) are reported by
CPUID.0AH:EAX[23:16]\&. On processors that do not support architectural
performance monitoring (CPUID.0AH:EAX[7:0]=0), the width of
general-purpose performance PMCs is 40 bits, while the widths of
special-purpose PMCs are implementation specific.

.PP
Use of ECX to specify a PMC depends on whether the processor supports
architectural performance monitoring:
.IP \(bu 2
If the processor does not support architectural performance
monitoring (CPUID.0AH:EAX[7:0]=0), ECX[30:0] specifies the index
of the PMC to be read. Setting ECX[31] selects “fast” read mode if
supported. In this mode, RDPMC returns bits 31:0 of the PMC in EAX
while clearing EDX to zero.
.IP \(bu 2
If the processor does support architectural performance monitoring
(CPUID.0AH:EAX[7:0] ≠ 0), ECX[31:16] specifies type of PMC while
ECX[15:0] specifies the index of the PMC to be read within that
type. The following PMC types are currently defined:
.RS
.IP \(bu 2
General-purpose counters use type 0. The index x (to read
IA32_PMCx) must be less than the value enumerated by
CPUID.0AH.EAX[15:8] (thus ECX[15:8] must be zero).
.IP \(bu 2
General-purpose counters use type 0. The index x (to read
IA32_PMCx) must be less than the value enumerated by
CPUID.0AH.EAX[15:8] (thus ECX[15:8] must be zero).
.IP \(bu 2
Fixed-function counters use type 4000H. The index x (to read
IA32_FIXED_CTRx) can be used if either CPUID.0AH.EDX[4:0]
&gt; x or CPUID.0AH.ECX[x] = 1 (thus ECX[15:5] must be 0).
.IP \(bu 2
Fixed-function counters use type 4000H. The index x (to read
IA32_FIXED_CTRx) can be used if either CPUID.0AH.EDX[4:0]
&gt; x or CPUID.0AH.ECX[x] = 1 (thus ECX[15:5] must be 0).
.IP \(bu 2
Performance metrics use type 2000H. This type can be used only
if IA32_PERF_CAPABILITIES.PERF_MET-RICS_AVAILABLE[bit
15]=1. For this type, the index in ECX[15:0] is
implementation specific.
.IP \(bu 2
Performance metrics use type 2000H. This type can be used only
if IA32_PERF_CAPABILITIES.PERF_MET-RICS_AVAILABLE[bit
15]=1. For this type, the index in ECX[15:0] is
implementation specific.
.RE

.PP
Specifying an unsupported PMC encoding will cause a general protection
exception #GP(0). For PMC details see Chapter 20, “Performance
Monitoring,” in the Intel® 64 and IA-32 Architectures
Software Developer’s Manual, Volume 3B.

.PP
When in protected or virtual 8086 mode, the \fBPerformance-monitoring
Counters Enabled\fP (PCE) flag in register CR4 restricts the use of the
RDPMC instruction. When the PCE flag is set, the RDPMC instruction can
be executed at any privilege level; when the flag is clear, the
instruction can only be executed at privilege level 0. (When in
real-address mode, the RDPMC instruction is always enabled.) The PMCs
can also be read with the RDMSR instruction, when executing at privilege
level 0.

.PP
The RDPMC instruction is not a serializing instruction; that is, it does
not imply that all the events caused by the preceding instructions have
been completed or that events caused by subsequent instructions have not
begun. If an exact event count is desired, software must insert a
serializing instruction (such as the CPUID instruction) before and/or
after the RDPMC instruction.

.PP
Performing back-to-back fast reads are not guaranteed to be monotonic.
To guarantee monotonicity on back-to-back reads, a serializing
instruction must be placed between the two RDPMC instructions.

.PP
The RDPMC instruction can execute in 16-bit addressing mode or
virtual-8086 mode; however, the full contents of the ECX register are
used to select the PMC, and the event count is stored in the full EAX
and EDX registers. The

.PP
RDPMC instruction was introduced into the IA-32 Architecture in the
Pentium Pro processor and the Pentium processor with MMX technology. The
earlier Pentium processors have PMCs, but they must be read with the
RDMSR instruction.

.SH OPERATION
.EX
MSCB = Most Significant Counter Bit (* Model-specific *)
IF (((CR4.PCE = 1) or (CPL = 0) or (CR0.PE = 0)) and (ECX indicates a supported counter))
    THEN
        EAX := counter[31:0];
        EDX := ZeroExtend(counter[MSCB:32]);
    ELSE (* ECX is not valid or CR4.PCE is 0 and CPL is 1, 2, or 3 and CR0.PE is 1 *)
        #GP(0);
FI;
.EE

.SH FLAGS AFFECTED
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the current privilege level is not 0 and the PCE flag in the CR4 register is clear.
T}
	T{
If an invalid performance counter index is specified.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If an invalid performance counter index is specified.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the PCE flag in the CR4 register is clear.
T}
	T{
If an invalid performance counter index is specified.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the current privilege level is not 0 and the PCE flag in the CR4 register is clear.
T}
	T{
If an invalid performance counter index is specified.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
