'\" t
.nh
.TH "X86-BNDCU-BNDCN" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
BNDCU-BNDCN - CHECK UPPER BOUND
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
F2 0F 1A /r BNDCU bnd, r/m32	RM	N.E./V	MPX	Generate a #BR if the address in r/m32 is higher than the upper bound in bnd.UB (bnb.UB in 1's complement form).
F2 0F 1A /r BNDCU bnd, r/m64	RM	V/N.E.	MPX	Generate a #BR if the address in r/m64 is higher than the upper bound in bnd.UB (bnb.UB in 1's complement form).
F2 0F 1B /r BNDCN bnd, r/m32	RM	N.E./V	MPX	Generate a #BR if the address in r/m32 is higher than the upper bound in bnd.UB (bnb.UB not in 1's complement form).
F2 0F 1B /r BNDCN bnd, r/m64	RM	V/N.E.	MPX	Generate a #BR if the address in r/m64 is higher than the upper bound in bnd.UB (bnb.UB not in 1's complement form).
.TE

.SH INSTRUCTION OPERAND ENCODING  href="./bndcu:bndcn.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l 
l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Compare the address in the second operand with the upper bound in bnd.
The second operand can be either a register or a memory operand. If the
address is higher than the upper bound in bnd.UB, it will set BNDSTATUS
to 01H and signal a #BR exception.

.PP
BNDCU perform 1’s complement operation on the upper bound of bnd first
before proceeding with address comparison. BNDCN perform address
comparison directly using the upper bound in bnd that is already
reverted out of 1’s complement form.

.PP
This instruction does not cause any memory access, and does not read or
write any flags.

.PP
Effective address computation of m32/64 has identical behavior to LEA

.SH OPERATION
.SS BNDCU BND, REG
.EX
IF reg > NOT(BND.UB) Then
    BNDSTATUS := 01H;
    #BR;
FI;
.EE

.SS BNDCU BND, MEM
.EX
TEMP := LEA(mem);
IF TEMP > NOT(BND.UB) Then
    BNDSTATUS := 01H;
    #BR;
FI;
.EE

.SS BNDCN BND, REG
.EX
IF reg > BND.UB Then
    BNDSTATUS := 01H;
    #BR;
FI;
.EE

.SS BNDCN BND, MEM
.EX
TEMP := LEA(mem);
IF TEMP > BND.UB Then
    BNDSTATUS := 01H;
    #BR;
FI;
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="./bndcu:bndcn.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
BNDCU .void _bnd_chk_ptr_ubounds(const void *q)
.EE

.SH FLAGS AFFECTED
None

.SH PROTECTED MODE EXCEPTIONS  href="./bndcu:bndcn.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#BR	If upper bound check fails.
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	T{
If 67H prefix is not used and CS.D=0.
T}
	T{
If 67H prefix is used and CS.D=1.
T}
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS  href="./bndcu:bndcn.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#BR	If upper bound check fails.
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	If 16-bit addressing is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS  href="./bndcu:bndcn.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#BR	If upper bound check fails.
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	If 16-bit addressing is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS  href="./bndcu:bndcn.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If ModRM.r/m and REX encodes BND4-BND15 when Intel MPX is enabled.
T}
.TE

.PP
Same exceptions as in protected mode.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
