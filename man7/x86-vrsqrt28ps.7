'\" t
.nh
.TH "X86-VRSQRT28PS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VRSQRT28PS - APPROXIMATION TO THE RECIPROCAL SQUARE ROOT OF PACKED SINGLE PRECISIONFLOATING-POINT VALUES WITH LESS THAN 2^-28 RELATIVE ERROR
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.512.66.0F38.W0 CC /r VRSQRT28PS zmm1 {k1}{z}, zmm2/m512/m32bcst {sae}
T}	A	V/V	AVX512ER	T{
Computes approximations to the Reciprocal square root (&lt;2^-28 relative error) of the packed single-precision floating-point values from zmm2/m512/m32bcst and stores result in zmm1with writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vrsqrt28ps.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En Tuple Type Operand 1 Operand 2 Operand 3 Operand 4\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP
A	T{
Full ModRM:reg (w) ModRM:r/m (r) N/A N/A
T}				
.TE

.SS DESCRIPTION
Computes the reciprocal square root of the float32 values in the source
operand (the second operand) and store the results to the destination
operand (the first operand). The approximate reciprocal is evaluated
with less than 2^-28 of maximum relative error prior to final rounding.
The final results is rounded to &lt; 2^-23 relative error before written
to the destination.

.PP
If any source element is NaN, the quietized NaN source value is returned
for that element. Negative (non-zero) source numbers, as well as -∞,
return the canonical NaN and set the Invalid Flag (#I).

.PP
A value of -0 must return -∞ and set the DivByZero flags (#Z). Negative
numbers should return NaN and set the Invalid flag (#I). Note however
that the instruction flush input denormals to zero of the same sign, so
negative denormals return -∞ and set the DivByZero flag.

.PP
The source operand is a ZMM register, a 512-bit memory location, or a
512-bit vector broadcasted from a 32-bit memory location. The
destination operand is a ZMM register, conditionally updated using
writemask k1.

.PP
EVEX.vvvv is reserved and must be 1111b otherwise instructions will
#UD.

.SS A NUMERICALLY EXACT IMPLEMENTATION OF VRSQRT28XX CAN BE FOUND AT HTTPS://SOFTWARE.INTEL.COM/EN-US/ARTI- <a
href="vrsqrt28ps.html#a-numerically-exact-implementation-of-vrsqrt28xx-can-be-found-at-https---software-intel-com-en-us-arti-"
class="anchor">¶

.SS CLES/REFERENCE-IMPLEMENTATIONS-FOR-IA-APPROXIMATION-INSTRUCTIONS-VRCP14-VRSQRT14-VRCP28-VRSQRT28-VEXP2. <a
href="vrsqrt28ps.html#cles-reference-implementations-for-ia-approximation-instructions-vrcp14-vrsqrt14-vrcp28-vrsqrt28-vexp2-"
class="anchor">¶

.SS OPERATION
.SS VRSQRT28PS (EVEX ENCODED VERSIONS)  href="vrsqrt28ps.html#vrsqrt28ps--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (16, 512)
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask* THEN
            IF (EVEX.b = 1) AND (SRC *is memory*)
                THEN DEST[i+31:i] := (1.0/ SQRT(SRC[31:0]));
                ELSE DEST[i+31:i] := (1.0/ SQRT(SRC[i+31:i]));
            FI;
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[i+31:i] remains unchanged*
            ELSE ; zeroing-masking
                DEST[i+31:i] := 0
        FI;
    FI;
ENDFOR;
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vrsqrt28ps.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VRSQRT28PS __m512 _mm512_rsqrt28_round_ps(__m512 a, int sae);

VRSQRT28PS __m512 _mm512_mask_rsqrt28_round_ps(__m512 s, __mmask16 m,__m512 a, int sae);

VRSQRT28PS __m512 _mm512_maskz_rsqrt28_round_ps(__mmask16 m,__m512 a, int sae);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vrsqrt28ps.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid (if SNaN input), Divide-by-zero.

.SS OTHER EXCEPTIONS
See Table 2-46, “Type E2 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
