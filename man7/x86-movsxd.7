'\" t
.nh
.TH "X86-MOVSX-MOVSXD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MOVSX-MOVSXD - MOVE WITH SIGN-EXTENSION
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
0F BE /r	MOVSX r16, r/m8	RM	Valid	Valid	T{
Move byte to word with sign-extension.
T}
0F BE /r	MOVSX r32, r/m8	RM	Valid	Valid	T{
Move byte to doubleword with sign-extension.
T}
REX.W + 0F BE /r	MOVSX r64, r/m8	RM	Valid	N.E.	T{
Move byte to quadword with sign-extension.
T}
0F BF /r	MOVSX r32, r/m16	RM	Valid	Valid	T{
Move word to doubleword, with sign-extension.
T}
REX.W + 0F BF /r	MOVSX r64, r/m16	RM	Valid	N.E.	T{
Move word to quadword with sign-extension.
T}
63 /r1	MOVSXD r16, r/m16	RM	Valid	N.E.	T{
Move word to word with sign-extension.
T}
63 /r1	MOVSXD r32, r/m32	RM	Valid	N.E.	T{
Move doubleword to doubleword with sign-extension.
T}
REX.W + 63 /r	MOVSXD r64, r/m32	RM	Valid	N.E.	T{
Move doubleword to quadword with sign-extension.
T}
.TE

.PP
.RS

.PP
1\&. The use of MOVSXD without REX.W in 64-bit mode is discouraged.
Regular MOV should be used instead of using MOVSXD without REX.W.

.RE

.SH INSTRUCTION OPERAND ENCODING  href="./movsx:movsxd.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Copies the contents of the source operand (register or memory location)
to the destination operand (register) and sign extends the value to 16
or 32 bits (see Figure 7-6 in the
Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 1). The size of the converted value depends on the
operand-size attribute.

.PP
In 64-bit mode, the instruction’s default operation size is 32 bits. Use
of the REX.R prefix permits access to additional registers (R8-R15). Use
of the REX.W prefix promotes operation to 64 bits. See the summary chart
at the beginning of this section for encoding data and limits.

.SH OPERATION
.EX
DEST := SignExtend(SRC);
.EE

.SH FLAGS AFFECTED
None.

.SH PROTECTED MODE EXCEPTIONS  href="./movsx:movsxd.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS  href="./movsx:movsxd.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS  href="./movsx:movsxd.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS  href="./movsx:movsxd.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS  href="./movsx:movsxd.html#64-bit-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
