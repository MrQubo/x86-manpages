'\" t
.nh
.TH "X86-RSQRTPS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
RSQRTPS - COMPUTE RECIPROCALS OF SQUARE ROOTS OF PACKED SINGLE PRECISION FLOATING-POINTVALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode*/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
NP 0F 52 /r RSQRTPS xmm1, xmm2/m128
T}	RM	V/V	SSE	T{
Computes the approximate reciprocals of the square roots of the packed single precision floating-point values in xmm2/m128 and stores the results in xmm1.
T}
T{
VEX.128.0F.WIG 52 /r VRSQRTPS xmm1, xmm2/m128
T}	RM	V/V	AVX	T{
Computes the approximate reciprocals of the square roots of packed single precision values in xmm2/mem and stores the results in xmm1.
T}
T{
VEX.256.0F.WIG 52 /r VRSQRTPS ymm1, ymm2/m256
T}	RM	V/V	AVX	T{
Computes the approximate reciprocals of the square roots of packed single precision values in ymm2/mem and stores the results in ymm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Performs a SIMD computation of the approximate reciprocals of the square
roots of the four packed single precision floating-point values in the
source operand (second operand) and stores the packed single precision
floating-point results in the destination operand. The source operand
can be an XMM register or a 128-bit memory location. The destination
operand is an XMM register. See Figure
10-5 in the Intel® 64 and IA-32 Architectures Software
Developer’s Manual, Volume 1, for an illustration of a SIMD single
precision floating-point operation.

.PP
The relative error for this approximation is:

.PP
|Relative Error| ≤ 1.5 ∗ 2−12

.PP
The RSQRTPS instruction is not affected by the rounding control bits in
the MXCSR register. When a source value is a 0.0, an ∞ of the sign of
the source value is returned. A denormal source value is treated as a
0.0 (of the same sign). When a source value is a negative value (other
than −0.0), a floating-point indefinite is returned. When a source value
is an SNaN or QNaN, the SNaN is converted to a QNaN or the source QNaN
is returned.

.PP
In 64-bit mode, using a REX prefix in the form of REX.R permits this
instruction to access additional registers (XMM8-XMM15).

.PP
128-bit Legacy SSE version: The second source can be an XMM register or
an 128-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL-1:128) of the
corresponding YMM register destination are unmodified.

.PP
VEX.128 encoded version: the first source operand is an XMM register or
128-bit memory location. The destination operand is an XMM register. The
upper bits (MAXVL-1:128) of the corresponding YMM register destination
are zeroed.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256-bit memory
location. The destination operand is a YMM register.

.PP
Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.

.SH OPERATION
.SS RSQRTPS (128-BIT LEGACY SSE VERSION)  href="rsqrtps.html#rsqrtps--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[31:0] := APPROXIMATE(1/SQRT(SRC[31:0]))
DEST[63:32] := APPROXIMATE(1/SQRT(SRC1[63:32]))
DEST[95:64] := APPROXIMATE(1/SQRT(SRC1[95:64]))
DEST[127:96] := APPROXIMATE(1/SQRT(SRC2[127:96]))
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS VRSQRTPS (VEX.128 ENCODED VERSION)  href="rsqrtps.html#vrsqrtps--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := APPROXIMATE(1/SQRT(SRC[31:0]))
DEST[63:32] := APPROXIMATE(1/SQRT(SRC1[63:32]))
DEST[95:64] := APPROXIMATE(1/SQRT(SRC1[95:64]))
DEST[127:96] := APPROXIMATE(1/SQRT(SRC2[127:96]))
DEST[MAXVL-1:128] := 0
.EE

.SS VRSQRTPS (VEX.256 ENCODED VERSION)  href="rsqrtps.html#vrsqrtps--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := APPROXIMATE(1/SQRT(SRC[31:0]))
DEST[63:32] := APPROXIMATE(1/SQRT(SRC1[63:32]))
DEST[95:64] := APPROXIMATE(1/SQRT(SRC1[95:64]))
DEST[127:96] := APPROXIMATE(1/SQRT(SRC2[127:96]))
DEST[159:128] := APPROXIMATE(1/SQRT(SRC2[159:128]))
DEST[191:160] := APPROXIMATE(1/SQRT(SRC2[191:160]))
DEST[223:192] := APPROXIMATE(1/SQRT(SRC2[223:192]))
DEST[255:224] := APPROXIMATE(1/SQRT(SRC2[255:224]))
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="rsqrtps.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
RSQRTPS __m128 _mm_rsqrt_ps(__m128 a)

RSQRTPS __m256 _mm256_rsqrt_ps (__m256 a);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="rsqrtps.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
See Table 2-21, “Type 4 Class
Exception Conditions,” additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.vvvv ≠ 1111B.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
