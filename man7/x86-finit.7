'\" t
.nh
.TH "X86-FINIT-FNINIT" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
FINIT-FNINIT - INITIALIZE FLOATING-POINT UNIT
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
9B DB E3	FINIT	Valid	Valid	T{
Initialize FPU after checking for pending unmasked floating-point exceptions.
T}
DB E3	FNINIT1	Valid	Valid	T{
Initialize FPU without checking for pending unmasked floating-point exceptions.
T}
.TE

.PP
.RS

.PP
1\&. See IA-32 Architecture Compatibility section below.

.RE

.SH DESCRIPTION
Sets the FPU control, status, tag, instruction pointer, and data pointer
registers to their default states. The FPU control word is set to 037FH
(round to nearest, all exceptions masked, 64-bit precision). The status
word is cleared (no exception flags set, TOP is set to 0). The data
registers in the register stack are left unchanged, but they are all
tagged as empty (11B). Both the instruction and data pointers are
cleared.

.PP
The FINIT instruction checks for and handles any pending unmasked
floating-point exceptions before performing the initialization; the
FNINIT instruction does not.

.PP
The assembler issues two instructions for the FINIT instruction (an
FWAIT instruction followed by an FNINIT instruction), and the processor
executes each of these instructions in separately. If an exception is
generated for either of these instructions, the save EIP points to the
instruction that caused the exception.

.PP
This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.

.SH IA-32 ARCHITECTURE COMPATIBILITY  href="./finit:fninit.html#ia-32-architecture-compatibility"
class="anchor">¶

.PP
When operating a Pentium or Intel486 processor in MS-DOS compatibility
mode, it is possible (under unusual circumstances) for an FNINIT
instruction to be interrupted prior to being executed to handle a
pending FPU exception. See the section titled “No-Wait FPU Instructions
Can Get FPU Interrupt in Window” in Appendix D of the Intel®
64 and IA-32 Architectures Software Developer’s Manual, Volume 1, for a
description of these circumstances. An FNINIT instruction cannot be
interrupted in this way on later Intel processors, except for the Intel
QuarkTM X1000 processor.

.PP
In the Intel387 math coprocessor, the FINIT/FNINIT instruction does not
clear the instruction and data pointers.

.PP
This instruction affects only the x87 FPU. It does not affect the XMM
and MXCSR registers.

.SH OPERATION
.EX
FPUControlWord := 037FH;
FPUStatusWord := 0;
FPUTagWord := FFFFH;
FPUDataPointer := 0;
FPUInstructionPointer := 0;
FPULastInstructionOpcode := 0;
.EE

.SH FPU FLAGS AFFECTED
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
C0, C1, C2, C3	set to 0.
.TE

.SH FLOATING-POINT EXCEPTIONS  href="./finit:fninit.html#floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH PROTECTED MODE EXCEPTIONS  href="./finit:fninit.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS  href="./finit:fninit.html#real-address-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH VIRTUAL-8086 MODE EXCEPTIONS  href="./finit:fninit.html#virtual-8086-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS  href="./finit:fninit.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS  href="./finit:fninit.html#64-bit-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
