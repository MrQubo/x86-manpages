'\" t
.nh
.TH "X86-EINIT" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
EINIT - INITIALIZE AN ENCLAVE FOR EXECUTION
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
EAX = 02H ENCLS[EINIT]	IR	V/V	SGX1	T{
This leaf function initializes the enclave and makes it ready to execute enclave code.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP
Op/En	EAX		RBX	RCX	RDX
IR	EINIT (In)	Error code (Out)	Address of SIGSTRUCT (In)	Address of SECS (In)	Address of EINITTOKEN (In)
.TE

.SS DESCRIPTION
This leaf function is the final instruction executed in the enclave
build process. After EINIT, the MRENCLAVE measurement is complete, and
the enclave is ready to start user code execution using the EENTER
instruction.

.PP
EINIT takes the effective address of a SIGSTRUCT and EINITTOKEN. The
SIGSTRUCT describes the enclave including MRENCLAVE, ATTRIBUTES, ISVSVN,
a 3072 bit RSA key, and a signature using the included key. SIGSTRUCT
must be populated with two values, q1 and q2. These are calculated using
the formulas shown below:

.PP
q1 = floor(Signature2 / Modulus);

.PP
q2 = floor((Signature3 - q1 * Signature * Modulus) /
Modulus);

.PP
The EINITTOKEN contains the MRENCLAVE, MRSIGNER, and ATTRIBUTES. These
values must match the corresponding values in the SECS. If the
EINITTOKEN was created with a debug launch key, the enclave must be in
debug mode as well.

.SH EINIT MEMORY PARAMETER SEMANTICS  href="einit.html#einit-memory-parameter-semantics"
class="anchor">¶

.PP
SIGSTRUCT

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
SECS	EINITTOKEN
Read/Write access by Enclave	Access by non-Enclave
.TE

.PP
Access by non-Enclave

.PP
EINIT performs the following steps, which can be seen in
Figure 38-1:

.PP
1\&. Validates that SIGSTRUCT is signed using the enclosed public key.

.PP
2\&. Checks that the completed computation of SECS.MRENCLAVE equals
SIGSTRUCT.HASHENCLAVE.

.PP
3\&. Checks that no controlled ATTRIBUTES bits are set in
SIGSTRUCT.ATTRIBUTES unless the SHA256 digest of SIGSTRUCT.MODULUS
equals IA32_SGX_LEPUBKEYHASH.

.PP
4\&. Checks that the result of bitwise and-ing SIGSTRUCT.ATTRIBUTEMASK
with SIGSTRUCT.ATTRIBUTES equals the result of bitwise and-ing
SIGSTRUCT.ATTRIBUTEMASK with SECS.ATTRIBUTES.

.PP
5\&. If EINITTOKEN.VALID is 0, checks that the SHA256 digest of
SIGSTRUCT.MODULUS equals IA32_SGX_LEPUBKEYHASH.

.PP
6\&. If EINITTOKEN.VALID is 1, checks the validity of EINITTOKEN.

.PP
7\&. If EINITTOKEN.VALID is 1, checks that EINITTOKEN.MRENCLAVE equals
SECS.MRENCLAVE.

.PP
8\&. If EINITTOKEN.VALID is 1 and EINITTOKEN.ATTRIBUTES.DEBUG is 1,
SECS.ATTRIBUTES.DEBUG must be 1.

.PP
9\&. Commits SECS.MRENCLAVE, and sets SECS.MRSIGNER, SECS.ISVSVN, and
SECS.ISVPRODID based on SIGSTRUCT.

.PP
10\&. Update the SECS as Initialized.

.PP
Periodically, EINIT polls for certain asynchronous events. If such an
event is detected, it completes with failure code (ZF=1 and RAX =
SGX_UNMASKED_EVENT), and RIP is incremented to point to the next
instruction. These events includes external interrupts, non-maskable
interrupts, system-management interrupts, machine checks, INIT signals,
and the VMX-preemption timer. EINIT does not fail if the pending event
is inhibited (e.g., external interrupts could be inhibited due to
blocking by MOV SS blocking or by STI).

.PP
The following bits in RFLAGS are cleared: CF, PF, AF, OF, and SF. When
the instruction completes with an error, RFLAGS.ZF is set to 1, and the
corresponding error bit is set in RAX. If no error occurs, RFLAGS.ZF is
cleared and RAX is set to 0.

.PP
The error codes are:

.SS CONCURRENCY RESTRICTIONS
.SS OPERATION
.SH TEMP VARIABLES IN EINIT OPERATIONAL FLOW  href="einit.html#temp-variables-in-einit-operational-flow"
class="anchor">¶

.TS
allbox;
l l l l 
l l l l .
\fBName\fP	\fBType\fP	\fBSize\fP	\fBDescription\fP
TMP_SIG	SIGSTRUCT	1808Bytes	Temp space for SIGSTRUCT.
TMP_TOKEN	EINITTOKEN	304Bytes	Temp space for EINITTOKEN.
TMP_MRENCLAVE		32Bytes	T{
Temp space for calculating MRENCLAVE.
T}
TMP_MRSIGNER		32Bytes	T{
Temp space for calculating MRSIGNER.
T}
CONTROLLED_ATTRIBU TES	ATTRIBUTES	16Bytes	T{
Constant mask of all ATTRIBUTE bits that can only be set for authorized enclaves.
T}
TMP_KEYDEPENDENCIE S	Buffer	224Bytes	Temp space for key derivation.
TMP_EINITTOKENKEY		16Bytes	T{
Temp space for the derived EINITTOKEN Key.
T}
TMP_SIG_PADDING	PKCS Padding Buffer	352Bytes	T{
The value of the top 352 bytes from the computation of Signature3 modulo MRSIGNER.
T}
.TE

.PP
(* make sure SIGSTRUCT and SECS are aligned *)

.PP
IF ( (DS:RBX is not 4KByte Aligned) or (DS:RCX is not 4KByte Aligned) )

.PP
THEN #GP(0); FI;

.PP
(* make sure the EINITTOKEN is aligned *)

.PP
IF (DS:RDX is not 512Byte Aligned)

.PP
THEN #GP(0); FI;

.PP
(* make sure the SECS is inside the EPC *)

.PP
IF (DS:RCX does not resolve within an EPC)

.PP
THEN #PF(DS:RCX); FI;

.PP
TMP_SIG[14463:0] := DS:RBX[14463:0]; // 1808 bytes

.PP
TMP_TOKEN[2423:0] := DS:RDX[2423:0]; // 304 bytes

.PP
(* Verify SIGSTRUCT Header. *)

.PP
IF ( (TMP_SIG.HEADER ≠ 06000000E10000000000010000000000h) or

.PP
((TMP_SIG.VENDOR ≠ 0) and (TMP_SIG.VENDOR ≠ 00008086h) ) or

.PP
(TMP_SIG HEADER2 ≠ 01010000600000006000000001000000h) or

.PP
(TMP_SIG.EXPONENT ≠ 00000003h) or (Reserved space is not 0’s) )

.PP
THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_SIG_STRUCT;

.PP
GOTO EXIT;

.PP
FI;

.PP
(* Open “Event Window” Check for Interrupts. Verify signature using
embedded public key, q1, and q2. Save upper 352 bytes of the PKCS1.5
encoded message into the TMP_SIG_PADDING*)

.PP
IF (interrupt was pending) THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_UNMASKED_EVENT;

.PP
GOTO EXIT;

.PP
FI

.PP
IF (signature failed to verify) THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_SIGNATURE;

.PP
GOTO EXIT;

.PP
FI;

.PP
(*Close “Event Window” *)

.PP
(* make sure no other Intel SGX instruction is modifying SECS*)

.PP
IF (Other instructions modifying SECS)

.PP
THEN #GP(0); FI;

.PP
IF ( (EPCM(DS:RCX). VALID = 0) or (EPCM(DS:RCX).PT ≠ PT_SECS) )

.PP
THEN #PF(DS:RCX); FI;

.PP
(* Verify ISVFAMILYID is not used on an enclave with KSS disabled *)

.PP
IF ((TMP_SIG.ISVFAMILYID != 0) AND (DS:RCX.ATTRIBUTES.KSS == 0))

.PP
THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_SIG_STRUCT;

.PP
GOTO EXIT;

.PP
FI;

.PP
(* make sure no other instruction is accessing MRENCLAVE or
ATTRIBUTES.INIT *)

.PP
IF ( (Other instruction modifying MRENCLAVE) or (Other instructions
modifying the SECS’s Initialized state))

.PP
THEN #GP(0); FI;

.PP
(* Calculate finalized version of MRENCLAVE *)

.PP
(* SHA256 algorithm requires one last update that compresses the length
of the hashed message into the output SHA256 digest *)

.PP
TMP_ENCLAVE := SHA256FINAL( (DS:RCX).MRENCLAVE, enclave’s MRENCLAVE
update count *512);

.PP
(* Verify MRENCLAVE from SIGSTRUCT *)

.PP
IF (TMP_SIG.ENCLAVEHASH ≠ TMP_MRENCLAVE)

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_MEASUREMENT;

.PP
GOTO EXIT;

.PP
TMP_MRSIGNER := SHA256(TMP_SIG.MODULUS)

.PP
(* if controlled ATTRIBUTES are set, SIGSTRUCT must be signed using an
authorized key *)

.PP
CONTROLLED_ATTRIBUTES := 0000000000000020H;

.PP
IF ( ( (DS:RCX.ATTRIBUTES & CONTROLLED_ATTRIBUTES) ≠ 0) and
(TMP_MRSIGNER ≠ IA32_SGXLEPUBKEYHASH) )

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_ATTRIBUTE;

.PP
GOTO EXIT;

.PP
FI;

.PP
(* Verify SIGSTRUCT.ATTRIBUTE requirements are met *)

.PP
IF ( (DS:RCX.ATTRIBUTES & TMP_SIG.ATTRIBUTEMASK) ≠ (TMP_SIG.ATTRIBUTE
& TMP_SIG.ATTRIBUTEMASK) )

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_ATTRIBUTE;

.PP
GOTO EXIT;

.PP
FI;

.PP
( *Verify SIGSTRUCT.MISCSELECT requirements are met *)

.PP
IF ( (DS:RCX.MISCSELECT & TMP_SIG.MISCMASK) ≠ (TMP_SIG.MISCSELECT &
TMP_SIG.MISCMASK) )

.PP
THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_ATTRIBUTE;

.PP
GOTO EXIT

.PP
FI;

.PP
IF (CPUID.(EAX=12H, ECX=1):EAX[6] = 1)

.PP
IF ( DS:RCX.CET_ATTRIBUTES & TMP_SIG.CET_ATTRIBUTES_MASK ≠
TMP_SIG.CET_ATTRIBUTES &

.PP
TMP_SIG.CET_ATTRIB-UTES_MASK )

.PP
THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_ATTRIBUTE;

.PP
GOTO EXIT

.PP
FI;

.PP
FI;

.PP
(* If EINITTOKEN.VALID[0] is 0, verify the enclave is signed by an
authorized key *)

.PP
IF (TMP_TOKEN.VALID[0] = 0)

.PP
IF (TMP_MRSIGNER ≠ IA32_SGXLEPUBKEYHASH)

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_EINITTOKEN;

.PP
GOTO EXIT;

.PP
FI;

.PP
GOTO COMMIT;

.PP
FI;

.PP
(* Debug Launch Enclave cannot launch Production Enclaves *)

.PP
IF ( (DS:RDX.MASKEDATTRIBUTESLE.DEBUG = 1) and (DS:RCX.ATTRIBUTES.DEBUG
= 0) )

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_EINITTOKEN;

.PP
GOTO EXIT;

.PP
(* Check reserve space in EINIT token includes reserved regions and
upper bits in valid field *)

.PP
IF (TMP_TOKEN reserved space is not clear)

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_EINITTOKEN;

.PP
GOTO EXIT;

.PP
FI;

.PP
(* EINIT token must not have been created by a configuration beyond the
current CPU configuration *)

.PP
IF (TMP_TOKEN.CPUSVN must not be a configuration beyond CR_CPUSVN)

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_CPUSVN;

.PP
GOTO EXIT;

.PP
FI;

.PP
(* Derive Launch key used to calculate EINITTOKEN.MAC *)

.PP
HARDCODED_PKCS1_5_PADDING[15:0] := 0100H;

.PP
HARDCODED_PKCS1_5_PADDING[2655:16] := SignExtend330Byte(-1); // 330
bytes of 0FFH

.PP
HARDCODED_PKCS1_5_PADDING[2815:2656] :=
2004000501020403650148866009060D30313000H;

.PP
TMP_KEYDEPENDENCIES.KEYNAME := EINITTOKEN_KEY;

.PP
TMP_KEYDEPENDENCIES.ISVFAMILYID := 0;

.PP
TMP_KEYDEPENDENCIES.ISVEXTPRODID := 0;

.PP
TMP_KEYDEPENDENCIES.ISVPRODID := TMP_TOKEN.ISVPRODIDLE;

.PP
TMP_KEYDEPENDENCIES.ISVSVN := TMP_TOKEN.ISVSVNLE;

.PP
TMP_KEYDEPENDENCIES.SGXOWNEREPOCH := CR_SGXOWNEREPOCH;

.PP
TMP_KEYDEPENDENCIES.ATTRIBUTES := TMP_TOKEN.MASKEDATTRIBUTESLE;

.PP
TMP_KEYDEPENDENCIES.ATTRIBUTESMASK := 0;

.PP
TMP_KEYDEPENDENCIES.MRENCLAVE := 0;

.PP
TMP_KEYDEPENDENCIES.MRSIGNER := IA32_SGXLEPUBKEYHASH;

.PP
TMP_KEYDEPENDENCIES.KEYID := TMP_TOKEN.KEYID;

.PP
TMP_KEYDEPENDENCIES.SEAL_KEY_FUSES := CR_SEAL_FUSES;

.PP
TMP_KEYDEPENDENCIES.CPUSVN := TMP_TOKEN.CPUSVNLE;

.PP
TMP_KEYDEPENDENCIES.MISCSELECT := TMP_TOKEN.MASKEDMISCSELECTLE;

.PP
TMP_KEYDEPENDENCIES.MISCMASK := 0;

.PP
TMP_KEYDEPENDENCIES.PADDING := HARDCODED_PKCS1_5_PADDING;

.PP
TMP_KEYDEPENDENCIES.KEYPOLICY := 0;

.PP
TMP_KEYDEPENDENCIES.CONFIGID := 0;

.PP
TMP_KEYDEPENDENCIES.CONFIGSVN := 0;

.PP
IF (CPUID.(EAX=12H, ECX=1):EAX[6] = 1))

.PP
TMP_KEYDEPENDENCIES.CET_ATTRIBUTES :=
TMP_TOKEN.CET_MASKED_ATTRIBUTES_ LE;

.PP
TMP_KEYDEPENDENCIES.CET_ATTRIBUTES_MASK := 0;

.PP
FI;

.PP
(* Calculate the derived key*)

.PP
TMP_EINITTOKENKEY := derivekey(TMP_KEYDEPENDENCIES);

.PP
(* Verify EINITTOKEN was generated using this CPU's Launch key and that
it has not been modified since issuing by the Launch Enclave. Only 192
bytes of EINITTOKEN are CMACed *)

.PP
IF (TMP_TOKEN.MAC ≠ CMAC(TMP_EINITTOKENKEY, TMP_TOKEN[1535:0] ) )

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_EINITTOKEN;

.PP
GOTO EXIT;

.PP
FI;

.PP
(* Verify EINITTOKEN (RDX) is for this enclave *)

.PP
IF ( (TMP_TOKEN.MRENCLAVE ≠ TMP_MRENCLAVE) or (TMP_TOKEN.MRSIGNER ≠
TMP_MRSIGNER) )

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_MEASUREMENT;

.PP
GOTO EXIT;

.PP
FI;

.PP
(* Verify ATTRIBUTES in EINITTOKEN are the same as the enclave’s *)

.PP
IF (TMP_TOKEN.ATTRIBUTES ≠ DS:RCX.ATTRIBUTES)

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_INVALID_EINIT_ATTRIBUTE;

.PP
GOTO EXIT;

.PP
FI;

.PP
COMMIT:

.PP
(* Commit changes to the SECS; Set ISVPRODID, ISVSVN, MRSIGNER, INIT
ATTRIBUTE fields in SECS (RCX) *)

.PP
DS:RCX.MRENCLAVE := TMP_MRENCLAVE;

.PP
(* MRSIGNER stores a SHA256 in little endian implemented natively on
x86 *)

.PP
DS:RCX.MRSIGNER := TMP_MRSIGNER;

.PP
DS:RCX.ISVEXTPRODID := TMP_SIG.ISVEXTPRODID;

.PP
DS:RCX.ISVPRODID := TMP_SIG.ISVPRODID;

.PP
DS:RCX.ISVSVN := TMP_SIG.ISVSVN;

.PP
DS:RCX.ISVFAMILYID := TMP_SIG.ISVFAMILYID;

.PP
DS:RCX.PADDING := TMP_SIG_PADDING;

.PP
(* Mark the SECS as initialized *)

.PP
Update DS:RCX to initialized;

.PP
(* Set RAX and ZF for success*)

.PP
RFLAGS.ZF := 0;

.PP
RAX := 0;

.PP
EXIT:

.PP
RFLAGS.CF,PF,AF,OF,SF := 0;

.SS FLAGS AFFECTED
ZF is cleared if successful, otherwise ZF is set and RAX contains the
error code. CF, PF, AF, OF, SF are cleared.

.SS PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand is not properly aligned.
T}
	T{
If another instruction is modifying the SECS.
T}
	T{
If the enclave is already initialized.
T}
	T{
If the SECS.MRENCLAVE is in use.
T}
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If RCX does not resolve in an EPC page.
T}
	T{
If the memory address is not a valid, uninitialized SECS.
T}
.TE

.SS 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand is not properly aligned.
T}
	T{
If another instruction is modifying the SECS.
T}
	T{
If the enclave is already initialized.
T}
	T{
If the SECS.MRENCLAVE is in use.
T}
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If RCX does not resolve in an EPC page.
T}
	T{
If the memory address is not a valid, uninitialized SECS.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
