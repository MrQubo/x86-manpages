'\" t
.nh
.TH "X86-STMXCSR" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
STMXCSR - STORE MXCSR REGISTER STATE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode*/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
NP 0F AE /3 STMXCSR \fIm32\fP	M	V/V	SSE	T{
Store contents of MXCSR register to \fIm32\fP\&.
T}
VEX.LZ.0F.WIG AE /3 VSTMXCSR \fIm32\fP	M	V/V	AVX	T{
Store contents of MXCSR register to \fIm32\fP\&.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
M	ModRM:r/m (w)	N/A	N/A	N/A
.TE

.SH DESCRIPTION
Stores the contents of the MXCSR control and status register to the
destination operand. The destination operand is a 32-bit memory
location. The reserved bits in the MXCSR register are stored as 0s.

.PP
This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.

.PP
VEX.L must be 0, otherwise instructions will #UD.

.PP
Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.

.SH OPERATION
.EX
m32 := MXCSR;
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="stmxcsr.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
_mm_getcsr(void)
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="stmxcsr.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
See Table 2-22, “Type 5 Class
Exception Conditions,” additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.L= 1,
	If VEX.vvvv ≠ 1111B.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
