'\" t
.nh
.TH "X86-EINCVIRTCHILD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
EINCVIRTCHILD - INCREMENT VIRTCHILDCNT IN SECS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
EAX = 01H ENCLV[EINCVIRTCHILD]	IR	V/V	EAX[5]	T{
This leaf function increments the SECS VIRTCHILDCNT field.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="eincvirtchild.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fB\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP
Op/En	EAX		RBX	RCX
IR	EINCVIRTCHILD (In)	Return error code (Out)	T{
Address of an enclave page (In)
T}	Address of an SECS page (In)
.TE

.SS DESCRIPTION
This instruction increments the SECS VIRTCHILDCNT field. This
instruction can only be executed when the current privilege level is 0.

.PP
The content of RCX is an effective address of an EPC page. The DS
segment is used to create a linear address. Segment override is not
supported.

.SH EINCVIRTCHILD MEMORY PARAMETER SEMANTICS  href="eincvirtchild.html#eincvirtchild-memory-parameter-semantics"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
EPCPAGE	SECS
T{
Read/Write access permitted by Non Enclave
T}	T{
Read access permitted by Enclave
T}
.TE

.PP
The instruction faults if any of the following:

.SH EINCVIRTCHILD FAULTING CONDITIONS  href="eincvirtchild.html#eincvirtchild-faulting-conditions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
T{
A memory operand effective address is outside the DS segment limit (32b mode).
T}	T{
A page fault occurs in accessing memory operands.
T}
T{
DS segment is unusable (32b mode).
T}	T{
RBX does not refer to an enclave page (REG, TCS, TRIM, SECS).
T}
T{
A memory address is in a non-canonical form (64b mode).
T}	T{
RCX does not refer to an SECS page.
T}
T{
A memory operand is not properly aligned.
T}	T{
RBX does not refer to an enclave page associated with SECS referenced in RCX.
T}
.TE

.SS CONCURRENCY RESTRICTIONS  href="eincvirtchild.html#concurrency-restrictions"
class="anchor">¶

.SS OPERATION
.SH TEMP VARIABLES IN EINCVIRTCHILD OPERATIONAL FLOW <a
href="eincvirtchild.html#temp-variables-in-eincvirtchild-operational-flow"
class="anchor">¶

.TS
allbox;
l l l l 
l l l l .
\fBName\fP	\fBType\fP	\fBSize (bits)\fP	\fBDescription\fP
TMP_SECS	Physical Address	64	T{
Physical address of the SECS of the page being modified.
T}
.TE

.SH EINCVIRTCHILD RETURN VALUE IN RAX  href="eincvirtchild.html#eincvirtchild-return-value-in-rax"
class="anchor">¶

.TS
allbox;
l l l 
l l l .
\fBError\fP	\fBValue\fP	\fBDescription\fP
No Error	0	EINCVIRTCHILD Successful.
SGX_EPC_PAGE_CONFLICT		T{
Failure due to concurrent operation of another SGX instruction.
T}
.TE

.PP
(* check alignment of DS:RBX *)

.PP
IF (DS:RBX is not 4K aligned) THEN

.PP
#GP(0); FI;

.PP
(* check DS:RBX is an linear address of an EPC page *)

.PP
IF (DS:RBX does not resolve within an EPC) THEN

.PP
#PF(DS:RBX, PFEC.SGX); FI;

.PP
(* check DS:RCX is an linear address of an EPC page *)

.PP
IF (DS:RCX does not resolve within an EPC) THEN

.PP
#PF(DS:RCX, PFEC.SGX); FI;

.PP
(* Check the EPCPAGE for concurrency *)

.PP
IF (EPCPAGE is being modified) THEN

.PP
RFLAGS.ZF = 1;

.PP
RAX = SGX_EPC_PAGE_CONFLICT;

.PP
goto DONE;

.PP
FI;

.PP
(* check that the EPC page is valid *)

.PP
IF (EPCM(DS:RBX).VALID = 0) THEN

.PP
#PF(DS:RBX, PFEC.SGX); FI;

.PP
(* check that the EPC page has the correct type and that the back
pointer matches the pointer passed as the pointer to parent *)

.PP
IF ((EPCM(DS:RBX).PAGE_TYPE = PT_REG) or

.PP
(EPCM(DS:RBX).PAGE_TYPE = PT_TCS) or

.PP
(EPCM(DS:RBX).PAGE_TYPE = PT_TRIM) or

.PP
(EPCM(DS:RBX).PAGE_TYPE = PT_SS_FIRST) or

.PP
(EPCM(DS:RBX).PAGE_TYPE = PT_SS_REST))

.PP
THEN

.PP
(* get the SECS of DS:RBX *)

.PP
TMP_SECS := Address of SECS for (DS:RBX);

.PP
ELSE IF (EPCM(DS:RBX).PAGE_TYPE = PT_SECS) THEN

.PP
(* get the physical address of DS:RBX *)

.PP
TMP_SECS := Physical_Address(DS:RBX);

.PP
ELSE

.PP
(* EINCVIRTCHILD called on page of incorrect type *)

.PP
#PF(DS:RBX, PFEC.SGX); FI;

.PP
IF (TMP_SECS ≠ Physical_Address(DS:RCX)) THEN

.PP
#GP(0); FI;

.PP
(* Atomically increment virtchild counter *)

.PP
Locked_Increment(SECS(TMP_SECS).VIRTCHILDCNT);

.PP
RFLAGS.ZF := 0;

.PP
RAX := 0;

.PP
DONE:

.PP
(* clear flags *)

.PP
RFLAGS.CF := 0;

.PP
RFLAGS.PF := 0;

.PP
RFLAGS.AF := 0;

.PP
RFLAGS.OF := 0;

.PP
RFLAGS.SF := 0;

.SS FLAGS AFFECTED
ZF is set if EINCVIRTCHILD fails due to concurrent operation with
another SGX instruction; otherwise cleared.

.SS PROTECTED MODE EXCEPTIONS  href="eincvirtchild.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the DS segment limit.
T}
	If DS segment is unusable.
	T{
If a memory operand is not properly aligned.
T}
	T{
RBX does not refer to an enclave page associated with SECS referenced in RCX.
T}
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If RBX does not refer to an enclave page (REG, TCS, TRIM, SECS).
T}
	T{
If RCX does not refer to an SECS page.
T}
.TE

.SS 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory address is in a non-canonical form.
T}
	T{
If a memory operand is not properly aligned.
T}
	T{
RBX does not refer to an enclave page associated with SECS referenced in RCX.
T}
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If RBX does not refer to an enclave page (REG, TCS, TRIM, SECS).
T}
	T{
If RCX does not refer to an SECS page.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
