'\" t
.nh
.TH "X86-PADDUSB-PADDUSW" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
PADDUSB-PADDUSW - ADD PACKED UNSIGNED INTEGERS WITH UNSIGNED SATURATION
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
NP 0F DC /r1 PADDUSB mm, mm/m64	A	V/V	MMX	T{
Add packed unsigned byte integers from mm/m64 and mm and saturate the results.
T}
T{
66 0F DC /r PADDUSB xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Add packed unsigned byte integers from xmm2/m128 and xmm1 saturate the results.
T}
NP 0F DD /r1 PADDUSW mm, mm/m64	A	V/V	MMX	T{
Add packed unsigned word integers from mm/m64 and mm and saturate the results.
T}
T{
66 0F DD /r PADDUSW xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Add packed unsigned word integers from xmm2/m128 to xmm1 and saturate the results.
T}
T{
VEX.128.660F.WIG DC /r VPADDUSB xmm1, xmm2, xmm3/m128
T}	B	V/V	AVX	T{
Add packed unsigned byte integers from xmm3/m128 to xmm2 and saturate the results.
T}
T{
VEX.128.66.0F.WIG DD /r VPADDUSW xmm1, xmm2, xmm3/m128
T}	B	V/V	AVX	T{
Add packed unsigned word integers from xmm3/m128 to xmm2 and saturate the results.
T}
T{
VEX.256.66.0F.WIG DC /r VPADDUSB ymm1, ymm2, ymm3/m256
T}	B	V/V	AVX2	T{
Add packed unsigned byte integers from ymm2, and ymm3/m256 and store the saturated results in ymm1.
T}
T{
VEX.256.66.0F.WIG DD /r VPADDUSW ymm1, ymm2, ymm3/m256
T}	B	V/V	AVX2	T{
Add packed unsigned word integers from ymm2, and ymm3/m256 and store the saturated results in ymm1.
T}
T{
EVEX.128.66.0F.WIG DC /r VPADDUSB xmm1 {k1}{z}, xmm2, xmm3/m128
T}	C	V/V	AVX512VL AVX512BW	T{
Add packed unsigned byte integers from xmm2, and xmm3/m128 and store the saturated results in xmm1 under writemask k1.
T}
T{
EVEX.256.66.0F.WIG DC /r VPADDUSB ymm1 {k1}{z}, ymm2, ymm3/m256
T}	C	V/V	AVX512VL AVX512BW	T{
Add packed unsigned byte integers from ymm2, and ymm3/m256 and store the saturated results in ymm1 under writemask k1.
T}
T{
EVEX.512.66.0F.WIG DC /r VPADDUSB zmm1 {k1}{z}, zmm2, zmm3/m512
T}	C	V/V	AVX512BW	T{
Add packed unsigned byte integers from zmm2, and zmm3/m512 and store the saturated results in zmm1 under writemask k1.
T}
T{
EVEX.128.66.0F.WIG DD /r VPADDUSW xmm1 {k1}{z}, xmm2, xmm3/m128
T}	C	V/V	AVX512VL AVX512BW	T{
Add packed unsigned word integers from xmm2, and xmm3/m128 and store the saturated results in xmm1 under writemask k1.
T}
T{
EVEX.256.66.0F.WIG DD /r VPADDUSW ymm1 {k1}{z}, ymm2, ymm3/m256
T}	C	V/V	AVX512VL AVX512BW	T{
Add packed unsigned word integers from ymm2, and ymm3/m256 and store the saturated results in ymm1 under writemask k1.
T}
T{
EVEX.512.66.0F.WIG DD /r VPADDUSW zmm1 {k1}{z}, zmm2, zmm3/m512
T}	C	V/V	AVX512BW	T{
Add packed unsigned word integers from zmm2, and zmm3/m512 and store the saturated results in zmm1 under writemask k1.
T}
.TE

.PP
.RS

.PP
1\&. See note in Section 2.5, “Intel® AVX and Intel® SSE Instruction
Exception Classification,” in the Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 2A, and Section
23.25.3, “Exception Conditions of Legacy SIMD Instructions Operating
on MMX Registers,” in the Intel® 64 and IA-32 Architectures
Software Developer’s Manual, Volume 3B.

.RE

.SH INSTRUCTION OPERAND ENCODING  href="./paddusb:paddusw.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Full Mem	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Performs a SIMD add of the packed unsigned integers from the source
operand (second operand) and the destination operand (first operand),
and stores the packed integer results in the destination operand. See
Figure 9-4 in the Intel® 64
and IA-32 Architectures Software Developer’s Manual, Volume 1, for an
illustration of a SIMD operation. Overflow is handled with unsigned
saturation, as described in the following paragraphs.

.PP
(V)PADDUSB performs a SIMD add of the packed unsigned integers with
saturation from the first source operand and second source operand and
stores the packed integer results in the destination operand. When an
individual byte result is beyond the range of an unsigned byte integer
(that is, greater than FFH), the saturated value of FFH is written to
the destination operand.

.PP
(V)PADDUSW performs a SIMD add of the packed unsigned word integers with
saturation from the first source operand and second source operand and
stores the packed integer results in the destination operand. When an
individual word result is beyond the range of an unsigned word integer
(that is, greater than FFFFH), the saturated value of FFFFH is written
to the destination operand.

.PP
EVEX encoded versions: The first source operand is an ZMM/YMM/XMM
register. The second source operand is an ZMM/YMM/XMM register or a
512/256/128-bit memory location. The destination is an ZMM/YMM/XMM
register.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand is a YMM register or a 256-bit memory location.
The destination operand is a YMM register.

.PP
VEX.128 encoded version: The first source operand is an XMM register.
The second source operand is an XMM register or 128-bit memory location.
The destination operand is an XMM register. The upper bits (MAXVL-1:128)
of the corresponding destination register destination are zeroed.

.PP
128-bit Legacy SSE version: The first source operand is an XMM register.
The second operand can be an XMM register or an 128-bit memory location.
The destination is not distinct from the first source XMM register and
the upper bits (MAXVL-1:128) of the corresponding register destination
are unmodified.

.SH OPERATION
.SS PADDUSB (WITH 64-BIT OPERANDS)  href="./paddusb:paddusw.html#paddusb--with-64-bit-operands-"
class="anchor">¶

.EX
DEST[7:0] := SaturateToUnsignedByte(DEST[7:0] + SRC (7:0] );
(* Repeat add operation for 2nd through 7th bytes *)
DEST[63:56] := SaturateToUnsignedByte(DEST[63:56] + SRC[63:56]
.EE

.SS PADDUSB (WITH 128-BIT OPERANDS)  href="./paddusb:paddusw.html#paddusb--with-128-bit-operands-"
class="anchor">¶

.EX
DEST[7:0] := SaturateToUnsignedByte (DEST[7:0] + SRC[7:0]);
(* Repeat add operation for 2nd through 14th bytes *)
DEST[127:120] := SaturateToUnSignedByte (DEST[127:120] + SRC[127:120]);
.EE

.SS VPADDUSB (VEX.128 ENCODED VERSION)  href="./paddusb:paddusw.html#vpaddusb--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[7:0] := SaturateToUnsignedByte (SRC1[7:0] + SRC2[7:0]);
(* Repeat subtract operation for 2nd through 14th bytes *)
DEST[127:120] := SaturateToUnsignedByte (SRC1[111:120] + SRC2[127:120]);
DEST[MAXVL-1:128] := 0
.EE

.SS VPADDUSB (VEX.256 ENCODED VERSION)  href="./paddusb:paddusw.html#vpaddusb--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[7:0] := SaturateToUnsignedByte (SRC1[7:0] + SRC2[7:0]);
(* Repeat add operation for 2nd through 31st bytes *)
DEST[255:248] := SaturateToUnsignedByte (SRC1[255:248] + SRC2[255:248]);
.EE

.SS PADDUSW (WITH 64-BIT OPERANDS)  href="./paddusb:paddusw.html#paddusw--with-64-bit-operands-"
class="anchor">¶

.EX
DEST[15:0] := SaturateToUnsignedWord(DEST[15:0] + SRC[15:0] );
(* Repeat add operation for 2nd and 3rd words *)
DEST[63:48] := SaturateToUnsignedWord(DEST[63:48] + SRC[63:48] );
.EE

.SS PADDUSW (WITH 128-BIT OPERANDS)  href="./paddusb:paddusw.html#paddusw--with-128-bit-operands-"
class="anchor">¶

.EX
DEST[15:0] := SaturateToUnsignedWord (DEST[15:0] + SRC[15:0]);
(* Repeat add operation for 2nd through 7th words *)
DEST[127:112] := SaturateToUnSignedWord (DEST[127:112] + SRC[127:112]);
.EE

.SS VPADDUSW (VEX.128 ENCODED VERSION)  href="./paddusb:paddusw.html#vpaddusw--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[15:0] := SaturateToUnsignedWord (SRC1[15:0] + SRC2[15:0]);
(* Repeat subtract operation for 2nd through 7th words *)
DEST[127:112] := SaturateToUnsignedWord (SRC1[127:112] + SRC2[127:112]);
DEST[MAXVL-1:128] := 0
.EE

.SS VPADDUSW (VEX.256 ENCODED VERSION)  href="./paddusb:paddusw.html#vpaddusw--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[15:0] := SaturateToUnsignedWord (SRC1[15:0] + SRC2[15:0]);
(* Repeat add operation for 2nd through 15th words *)
DEST[255:240] := SaturateToUnsignedWord (SRC1[255:240] + SRC2[255:240])
.EE

.SS VPADDUSB (EVEX ENCODED VERSIONS)  href="./paddusb:paddusw.html#vpaddusb--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (16, 128), (32, 256), (64, 512)
FOR j := 0 TO KL-1
    i := j * 8
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i] := SaturateToUnsignedByte (SRC1[i+7:i] + SRC2[i+7:i])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+7:i] remains unchanged*
                ELSE *zeroing-masking*
                        ; zeroing-masking
                    DEST[i+7:i] = 0
            FI
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0
.EE

.SS VPADDUSW (EVEX ENCODED VERSIONS)  href="./paddusb:paddusw.html#vpaddusw--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j := 0 TO KL-1
    i := j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+15:i] := SaturateToUnsignedWord (SRC1[i+15:i] + SRC2[i+15:i])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+15:i] remains unchanged*
                ELSE *zeroing-masking*
                        ; zeroing-masking
                    DEST[i+15:i] = 0
            FI
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENTS <a
href="./paddusb:paddusw.html#intel-c-c++-compiler-intrinsic-equivalents"
class="anchor">¶

.EX
PADDUSB __m64 _mm_adds_pu8(__m64 m1, __m64 m2)

PADDUSW __m64 _mm_adds_pu16(__m64 m1, __m64 m2)

(V)PADDUSB __m128i _mm_adds_epu8 ( __m128i a, __m128i b)

(V)PADDUSW __m128i _mm_adds_epu16 ( __m128i a, __m128i b)

VPADDUSB __m256i _mm256_adds_epu8 ( __m256i a, __m256i b)

VPADDUSW __m256i _mm256_adds_epu16 ( __m256i a, __m256i b)

VPADDUSB __m512i _mm512_adds_epu8 ( __m512i a, __m512i b)

VPADDUSW __m512i _mm512_adds_epu16 ( __m512i a, __m512i b)

VPADDUSB __m512i _mm512_mask_adds_epu8 ( __m512i s, __mmask64 m, __m512i a, __m512i b)

VPADDUSW __m512i _mm512_mask_adds_epu16 ( __m512i s, __mmask32 m, __m512i a, __m512i b)

VPADDUSB __m512i _mm512_maskz_adds_epu8 (__mmask64 m, __m512i a, __m512i b)

VPADDUSW __m512i _mm512_maskz_adds_epu16 (__mmask32 m, __m512i a, __m512i b)

VPADDUSB __m256i _mm256_mask_adds_epu8 (__m256i s, __mmask32 m, __m256i a, __m256i b)

VPADDUSW __m256i _mm256_mask_adds_epu16 (__m256i s, __mmask16 m, __m256i a, __m256i b)

VPADDUSB __m256i _mm256_maskz_adds_epu8 (__mmask32 m, __m256i a, __m256i b)

VPADDUSW __m256i _mm256_maskz_adds_epu16 (__mmask16 m, __m256i a, __m256i b)

VPADDUSB __m128i _mm_mask_adds_epu8 (__m128i s, __mmask16 m, __m128i a, __m128i b)

VPADDUSW __m128i _mm_mask_adds_epu16 (__m128i s, __mmask8 m, __m128i a, __m128i b)

VPADDUSB __m128i _mm_maskz_adds_epu8 (__mmask16 m, __m128i a, __m128i b)

VPADDUSW __m128i _mm_maskz_adds_epu16 (__mmask8 m, __m128i a, __m128i b)
.EE

.SH FLAGS AFFECTED
None.

.SH NUMERIC EXCEPTIONS
None.

.SH OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Table
2-21, “Type 4 Class Exception Conditions.”

.PP
EVEX-encoded instruction, see Exceptions Type E4.nb in
Table 2-49, “Type E4 Class Exception
Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
