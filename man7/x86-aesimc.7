'\" t
.nh
.TH "X86-AESIMC" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
AESIMC - PERFORM THE AES INVMIXCOLUMN TRANSFORMATION
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32-bit Mode\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 38 DB /r AESIMC xmm1, xmm2/m128
T}	RM	V/V	AES	T{
Perform the InvMixColumn transformation on a 128-bit round key from xmm2/m128 and store the result in xmm1.
T}
T{
VEX.128.66.0F38.WIG DB /r VAESIMC xmm1, xmm2/m128
T}	RM	V/V	Both AES and AVX flags	T{
Perform the InvMixColumn transformation on a 128-bit round key from xmm2/m128 and store the result in xmm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Perform the InvMixColumns transformation on the source operand and store
the result in the destination operand. The destination operand is an XMM
register. The source operand can be an XMM register or a 128-bit memory
location.

.PP
Note: the AESIMC instruction should be applied to the expanded AES round
keys (except for the first and last round key) in order to prepare them
for decryption using the “Equivalent Inverse Cipher” (defined in FIPS
197).

.PP
128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: Bits (MAXVL-1:128) of the destination YMM
register are zeroed.

.PP
Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.

.SH OPERATION
.SS AESIMC
.EX
DEST[127:0] := InvMixColumns( SRC );
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS VAESIMC
.EX
DEST[127:0] := InvMixColumns( SRC );
DEST[MAXVL-1:128] := 0;
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="aesimc.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
(V)AESIMC __m128i _mm_aesimc (__m128i)
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="aesimc.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
See Table 2-21, “Type 4 Class
Exception Conditions,” additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.vvvv ≠ 1111B.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
