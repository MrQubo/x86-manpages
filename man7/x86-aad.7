'\" t
.nh
.TH "X86-AAD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
AAD - ASCII ADJUST AX BEFORE DIVISION
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
D5 0A	AAD	ZO	Invalid	Valid	T{
ASCII adjust AX before division.
T}
D5 ib	AAD imm8	ZO	Invalid	Valid	T{
Adjust AX before division to number base imm8.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
ZO	N/A	N/A	N/A	N/A
.TE

.SH DESCRIPTION
Adjusts two unpacked BCD digits (the least-significant digit in the AL
register and the most-significant digit in the AH register) so that a
division operation performed on the result will yield a correct unpacked
BCD value. The AAD instruction is only useful when it precedes a DIV
instruction that divides (binary division) the adjusted value in the AX
register by an unpacked BCD value.

.PP
The AAD instruction sets the value in the AL register to (AL + (10 *
AH)), and then clears the AH register to 00H. The value in the AX
register is then equal to the binary equivalent of the original unpacked
two-digit (base 10) number in registers AH and AL.

.PP
The generalized version of this instruction allows adjustment of two
unpacked digits of any number base (see the “Operation” section below),
by setting the \fIimm8\fP byte to the selected number base (for example, 08H
for octal, 0AH for decimal, or 0CH for base 12 numbers). The AAD
mnemonic is interpreted by all assemblers to mean adjust ASCII (base 10)
values. To adjust values in another number base, the instruction must be
hand coded in machine code (D5 \fIimm8\fP).

.PP
This instruction executes as described in compatibility mode and legacy
mode. It is not valid in 64-bit mode.

.SH OPERATION
.EX
IF 64-Bit Mode
    THEN
        #UD;
    ELSE
        tempAL := AL;
        tempAH := AH;
        AL := (tempAL + (tempAH ∗ imm8)) AND FFH;
        (* imm8 is set to 0AH for the AAD mnemonic.*)
        AH := 0;
FI;
The immediate value (imm8) is taken from the second byte of the instruction.
.EE

.SH FLAGS AFFECTED
The SF, ZF, and PF flags are set according to the resulting binary value
in the AL register; the OF, AF, and CF flags are undefined.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
Same exceptions as protected mode.

.SH VIRTUAL-8086 MODE EXCEPTIONS
Same exceptions as protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If in 64-bit mode.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
