'\" t
.nh
.TH "X86-EBLOCK" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
EBLOCK - MARK A PAGE IN EPC AS BLOCKED
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
EAX = 09H ENCLS[EBLOCK]	IR	V/V	SGX1	T{
This leaf function marks a page in the EPC as blocked.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
\fB\fP	\fB\fP	\fB\fP	\fB\fP
Op/En	EAX		RCX
IR	EBLOCK (In)	Return error code (Out)	T{
Effective address of the EPC page (In)
T}
.TE

.SS DESCRIPTION
This leaf function causes an EPC page to be marked as BLOCKED. This
instruction can only be executed when current privilege level is 0.

.PP
The content of RCX is an effective address of an EPC page. The DS
segment is used to create linear address. Segment override is not
supported.

.PP
An error code is returned in RAX.

.PP
The table below provides additional information on the memory parameter
of EBLOCK leaf function.

.SH EBLOCK MEMORY PARAMETER SEMANTICS  href="eblock.html#eblock-memory-parameter-semantics"
class="anchor">¶

.TS
allbox;
l 
l .
\fB\fP
EPCPAGE
T{
Read/Write access permitted by Enclave
T}
.TE

.PP
The error codes are:

.SS CONCURRENCY RESTRICTIONS
.SS OPERATION
.SH TEMP VARIABLES IN EBLOCK OPERATIONAL FLOW  href="eblock.html#temp-variables-in-eblock-operational-flow"
class="anchor">¶

.TS
allbox;
l l l l 
l l l l .
\fB\fP	\fB\fP	\fB\fP	\fB\fP
Name	Type	Size (Bits)	Description
TMP_BLKSTATE	Integer	64	Page is already blocked.
.TE

.PP
IF (DS:RCX is not 4KByte Aligned)

.PP
THEN #GP(0); FI;

.PP
IF (DS:RCX does not resolve within an EPC)

.PP
THEN #PF(DS:RCX); FI;

.PP
RFLAGS.ZF,CF,PF,AF,OF,SF := 0;

.PP
RAX := 0;

.PP
(* Check the EPC page for concurrency*)

.PP
IF (EPC page in use)

.PP
THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_EPC_PAGE_CONFLICT;

.PP
GOTO DONE;

.PP
FI;

.PP
IF (EPCM(DS:RCX). VALID = 0)

.PP
THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_PG_INVLD;

.PP
GOTO DONE;

.PP
FI;

.PP
IF ( (EPCM(DS:RCX).PT ≠ PT_REG) and (EPCM(DS:RCX).PT ≠ PT_TCS) and
(EPCM(DS:RCX).PT ≠ PT_TRIM)

.PP
and EPCM(DS:RCX).PT ≠ PT_SS_FIRST) and (EPCM(DS:RCX).PT ≠
PT_SS_REST))

.PP
THEN

.PP
RFLAGS.CF := 1;

.PP
IF (EPCM(DS:RCX).PT = PT_SECS)

.PP
THEN RAX := SGX_PG_IS_SECS;

.PP
ELSE RAX := SGX_NOTBLOCKABLE;

.PP
FI;

.PP
GOTO DONE;

.PP
FI;

.PP
(* Check if the page is already blocked and report blocked state *)

.PP
TMP_BLKSTATE := EPCM(DS:RCX).BLOCKED;

.PP
(* at this point, the page must be valid and PT_TCS or PT_REG or
PT_TRIM*)

.PP
IF (TMP_BLKSTATE = 1)

.PP
THEN

.PP
RFLAGS.CF := 1;

.PP
RAX := SGX_BLKSTATE;

.PP
ELSE

.PP
EPCM(DS:RCX).BLOCKED := 1

.PP
FI;

.PP
DONE:

.SS FLAGS AFFECTED
Sets ZF if SECS is in use or invalid, otherwise cleared. Sets CF if page
is BLOCKED or not blockable, otherwise cleared. Clears PF, AF, OF, SF.

.SS PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the DS segment limit.
T}
	T{
If a memory operand is not properly aligned.
T}
	T{
If the specified EPC resource is in use.
T}
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If a memory operand is not an EPC page.
T}
.TE

.SS 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand is non-canonical form.
T}
	T{
If a memory operand is not properly aligned.
T}
	T{
If the specified EPC resource is in use.
T}
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If a memory operand is not an EPC page.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
