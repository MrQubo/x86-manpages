'\" t
.nh
.TH "X86-CVTSD2SS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
CVTSD2SS - CONVERT SCALAR DOUBLE PRECISION FLOATING-POINT VALUE TO SCALAR SINGLE PRECISIONFLOATING-POINT VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
F2 0F 5A /r CVTSD2SS xmm1, xmm2/m64
T}	A	V/V	SSE2	T{
Convert one double precision floating-point value in xmm2/m64 to one single precision floating-point value in xmm1.
T}
T{
VEX.LIG.F2.0F.WIG 5A /r VCVTSD2SS xmm1,xmm2, xmm3/m64
T}	B	V/V	AVX	T{
Convert one double precision floating-point value in xmm3/m64 to one single precision floating-point value and merge with high bits in xmm2.
T}
T{
EVEX.LLIG.F2.0F.W1 5A /r VCVTSD2SS xmm1 {k1}{z}, xmm2, xmm3/m64{er}
T}	C	V/V	AVX512F	T{
Convert one double precision floating-point value in xmm3/m64 to one single precision floating-point value and merge with high bits in xmm2 under writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="cvtsd2ss.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Converts a double precision floating-point value in the “convert-from”
source operand (the second operand in SSE2 version, otherwise the third
operand) to a single precision floating-point value in the destination
operand.

.PP
When the “convert-from” operand is an XMM register, the double precision
floating-point value is contained in the low quadword of the register.
The result is stored in the low doubleword of the destination operand.
When the conversion is inexact, the value returned is rounded according
to the rounding control bits in the MXCSR register.

.PP
128-bit Legacy SSE version: The “convert-from” source operand (the
second operand) is an XMM register or memory location. Bits (MAXVL-1:32)
of the corresponding destination register remain unchanged. The
destination operand is an XMM register.

.PP
VEX.128 and EVEX encoded versions: The “convert-from” source operand
(the third operand) can be an XMM register or a 64-bit memory location.
The first source and destination operands are XMM registers. Bits
(127:32) of the XMM register destination are copied from the
corresponding bits in the first source operand. Bits (MAXVL-1:128) of
the destination register are zeroed.

.PP
EVEX encoded version: the converted result in written to the low
doubleword element of the destination under the writemask.

.PP
Software should ensure VCVTSD2SS is encoded with VEX.L=0. Encoding
VCVTSD2SS with VEX.L=1 may encounter unpredictable behavior across
different processor generations.

.SH OPERATION
.SS VCVTSD2SS (EVEX ENCODED VERSION)  href="cvtsd2ss.html#vcvtsd2ss--evex-encoded-version-"
class="anchor">¶

.EX
IF (SRC2 *is register*) AND (EVEX.b = 1)
    THEN
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(EVEX.RC);
    ELSE
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(MXCSR.RC);
FI;
IF k1[0] or *no writemask*
    THEN DEST[31:0] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC2[63:0]);
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing-masking
                THEN DEST[31:0] := 0
        FI;
FI;
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS VCVTSD2SS (VEX.128 ENCODED VERSION)  href="cvtsd2ss.html#vcvtsd2ss--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC2[63:0]);
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS CVTSD2SS (128-BIT LEGACY SSE VERSION)  href="cvtsd2ss.html#cvtsd2ss--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[31:0] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC[63:0]);
(* DEST[MAXVL-1:32] Unmodified *)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="cvtsd2ss.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VCVTSD2SS __m128 _mm_mask_cvtsd_ss(__m128 s, __mmask8 k, __m128 a, __m128d b);

VCVTSD2SS __m128 _mm_maskz_cvtsd_ss( __mmask8 k, __m128 a,__m128d b);

VCVTSD2SS __m128 _mm_cvt_roundsd_ss(__m128 a, __m128d b, int r);

VCVTSD2SS __m128 _mm_mask_cvt_roundsd_ss(__m128 s, __mmask8 k, __m128 a, __m128d b, int r);

VCVTSD2SS __m128 _mm_maskz_cvt_roundsd_ss( __mmask8 k, __m128 a,__m128d b, int r);

CVTSD2SS __m128_mm_cvtsd_ss(__m128 a, __m128d b)
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="cvtsd2ss.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Overflow, Underflow, Invalid, Precision, Denormal.

.SH OTHER EXCEPTIONS
VEX-encoded instructions, see Table
2-20, “Type 3 Class Exception Conditions.”

.PP
EVEX-encoded instructions, see Table
2-47, “Type E3 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
