'\" t
.nh
.TH "X86-LODS-LODSB-LODSW-LODSD-LODSQ" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
LODS-LODSB-LODSW-LODSD-LODSQ - LOAD STRING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
AC	LODS m8	ZO	Valid	Valid	T{
For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL.
T}
AD	LODS m16	ZO	Valid	Valid	T{
For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX.
T}
AD	LODS m32	ZO	Valid	Valid	T{
For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX.
T}
REX.W + AD	LODS m64	ZO	Valid	N.E.	T{
Load qword at address (R)SI into RAX.
T}
AC	LODSB	ZO	Valid	Valid	T{
For legacy mode, Load byte at address DS:(E)SI into AL. For 64-bit mode load byte at address (R)SI into AL.
T}
AD	LODSW	ZO	Valid	Valid	T{
For legacy mode, Load word at address DS:(E)SI into AX. For 64-bit mode load word at address (R)SI into AX.
T}
AD	LODSD	ZO	Valid	Valid	T{
For legacy mode, Load dword at address DS:(E)SI into EAX. For 64-bit mode load dword at address (R)SI into EAX.
T}
REX.W + AD	LODSQ	ZO	Valid	N.E.	T{
Load qword at address (R)SI into RAX.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING <a
href="./lods:lodsb:lodsw:lodsd:lodsq.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
ZO	N/A	N/A	N/A	N/A
.TE

.SH DESCRIPTION  href="./lods:lodsb:lodsw:lodsd:lodsq.html#description"
class="anchor">¶

.PP
Loads a byte, word, or doubleword from the source operand into the AL,
AX, or EAX register, respectively. The source operand is a memory
location, the address of which is read from the DS:ESI or the DS:SI
registers (depending on the address-size attribute of the instruction,
32 or 16, respectively). The DS segment may be overridden with a segment
override prefix.

.PP
At the assembly-code level, two forms of this instruction are allowed:
the “explicit-operands” form and the “no-operands” form. The
explicit-operands form (specified with the LODS mnemonic) allows the
source operand to be specified explicitly. Here, the source operand
should be a symbol that indicates the size and location of the source
value. The destination operand is then automatically selected to match
the size of the source operand (the AL register for byte operands, AX
for word operands, and EAX for doubleword operands). This
explicit-operands form is provided to allow documentation; however, note
that the documentation provided by this form can be misleading. That is,
the source operand symbol must specify the correct \fBtype\fP (size) of
the operand (byte, word, or doubleword), but it does not have to specify
the correct \fBlocation\fP\&. The location is always specified by the
DS:(E)SI registers, which must be loaded correctly before the load
string instruction is executed.

.PP
The no-operands form provides “short forms” of the byte, word, and
doubleword versions of the LODS instructions. Here also DS:(E)SI is
assumed to be the source operand and the AL, AX, or EAX register is
assumed to be the destination operand. The size of the source and
destination operands is selected with the mnemonic: LODSB (byte loaded
into register AL), LODSW (word loaded into AX), or LODSD (doubleword
loaded into EAX).

.PP
After the byte, word, or doubleword is transferred from the memory
location into the AL, AX, or EAX register, the (E)SI register is
incremented or decremented automatically according to the setting of the
DF flag in the EFLAGS register. (If the DF flag is 0, the (E)SI register
is incremented; if the DF flag is 1, the ESI register is decremented.)
The (E)SI register is incremented or decremented by 1 for byte
operations, by 2 for word operations, or by 4 for doubleword operations.

.PP
In 64-bit mode, use of the REX.W prefix promotes operation to 64 bits.
LODS/LODSQ load the quadword at address (R)SI into RAX. The (R)SI
register is then incremented or decremented automatically according to
the setting of the DF flag in the EFLAGS register.

.PP
The LODS, LODSB, LODSW, and LODSD instructions can be preceded by the
REP prefix for block loads of ECX bytes, words, or doublewords. More
often, however, these instructions are used within a LOOP construct
because further processing of the data moved into the register is
usually necessary before the next transfer can be made. See
“REP/REPE/REPZ /REPNE/REPNZ—Repeat String Operation Prefix” in Chapter 4
of the Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 2B, for a description of the REP prefix.

.SH OPERATION  href="./lods:lodsb:lodsw:lodsd:lodsq.html#operation"
class="anchor">¶

.EX
IF AL := SRC; (* Byte load *)
    THEN AL := SRC; (* Byte load *)
        IF DF = 0
            THEN (E)SI := (E)SI + 1;
            ELSE (E)SI := (E)SI – 1;
        FI;
ELSE IF AX := SRC; (* Word load *)
    THEN IF DF = 0
            THEN (E)SI := (E)SI + 2;
            ELSE (E)SI := (E)SI – 2;
        IF;
    FI;
ELSE IF EAX := SRC; (* Doubleword load *)
    THENIFDF =0
            THEN (E)SI := (E)SI + 4;
            ELSE (E)SI := (E)SI – 4;
        FI;
    FI;
ELSE IF RAX := SRC; (* Quadword load *)
    THEN IF DF = 0
            THEN (R)SI := (R)SI + 8;
            ELSE (R)SI := (R)SI – 8;
        FI;
    FI;
FI;
.EE

.SH FLAGS AFFECTED  href="./lods:lodsb:lodsw:lodsd:lodsq.html#flags-affected"
class="anchor">¶

.PP
None.

.SH PROTECTED MODE EXCEPTIONS  href="./lods:lodsb:lodsw:lodsd:lodsq.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS <a
href="./lods:lodsb:lodsw:lodsd:lodsq.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS <a
href="./lods:lodsb:lodsw:lodsd:lodsq.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS <a
href="./lods:lodsb:lodsw:lodsd:lodsq.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS  href="./lods:lodsb:lodsw:lodsd:lodsq.html#64-bit-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
