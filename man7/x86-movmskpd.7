'\" t
.nh
.TH "X86-MOVMSKPD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MOVMSKPD - EXTRACT PACKED DOUBLE PRECISION FLOATING-POINT SIGN MASK
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32-bit Mode\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
66 0F 50 /r MOVMSKPD reg, xmm	RM	V/V	SSE2	T{
Extract 2-bit sign mask from xmm and store in reg. The upper bits of r32 or r64 are filled with zeros.
T}
T{
VEX.128.66.0F.WIG 50 /r VMOVMSKPD reg, xmm2
T}	RM	V/V	AVX	T{
Extract 2-bit sign mask from xmm2 and store in reg. The upper bits of r32 or r64 are zeroed.
T}
T{
VEX.256.66.0F.WIG 50 /r VMOVMSKPD reg, ymm2
T}	RM	V/V	AVX	T{
Extract 4-bit sign mask from ymm2 and store in reg. The upper bits of r32 or r64 are zeroed.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="movmskpd.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Extracts the sign bits from the packed double precision floating-point
values in the source operand (second operand), formats them into a 2-bit
mask, and stores the mask in the destination operand (first operand).
The source operand is an XMM register, and the destination operand is a
general-purpose register. The mask is stored in the 2 low-order bits of
the destination operand. Zero-extend the upper bits of the destination.

.PP
In 64-bit mode, the instruction can access additional registers
(XMM8-XMM15, R8-R15) when used with a REX.R prefix. The default operand
size is 64-bit in 64-bit mode.

.PP
128-bit versions: The source operand is a YMM register. The destination
operand is a general purpose register.

.PP
VEX.256 encoded version: The source operand is a YMM register. The
destination operand is a general purpose register.

.PP
Note: In VEX-encoded versions, VEX.vvvv is reserved and must be 1111b,
otherwise instructions will #UD.

.SH OPERATION
.SS (V)MOVMSKPD (128-BIT VERSIONS)  href="movmskpd.html#-v-movmskpd--128-bit-versions-"
class="anchor">¶

.EX
DEST[0] := SRC[63]
DEST[1] := SRC[127]
IF DEST = r32
    THEN DEST[31:2] := 0;
    ELSE DEST[63:2] := 0;
FI
.EE

.SS VMOVMSKPD (VEX.256 ENCODED VERSION)  href="movmskpd.html#vmovmskpd--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[0] := SRC[63]
DEST[1] := SRC[127]
DEST[2] := SRC[191]
DEST[3] := SRC[255]
IF DEST = r32
    THEN DEST[31:4] := 0;
    ELSE DEST[63:4] := 0;
FI
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="movmskpd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
MOVMSKPD int _mm_movemask_pd ( __m128d a)

VMOVMSKPD _mm256_movemask_pd(__m256d a)
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="movmskpd.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
See Table 2-24, “Type 7 Class
Exception Conditions,” additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.vvvv ≠ 1111B.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
