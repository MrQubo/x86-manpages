'\" t
.nh
.TH "X86-VMINSH" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VMINSH - RETURN MINIMUM SCALAR FP16 VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fBInstruction En bit Mode Flag Support Instruction En bit Mode Flag Support 64/32 CPUID Feature Instruction En bit Mode Flag CPUID Feature Instruction En bit Mode Flag Op/ 64/32 CPUID Feature Instruction En bit Mode Flag 64/32 CPUID Feature Instruction En bit Mode Flag CPUID Feature Instruction En bit Mode Flag Op/ 64/32 CPUID Feature\fP	\fB\fP	\fBSupport\fP	\fB\fP	\fBDescription\fP
T{
EVEX.LLIG.F3.MAP5.W0 5D /r VMINSH xmm1{k1}{z}, xmm2, xmm3/m16 {sae}
T}	A	V/V	AVX512-FP16	T{
Return the minimum low FP16 value between xmm3/m16 and xmm2. Stores the result in xmm1 subject to writemask k1. Bits 127:16 of xmm2 are copied to xmm1[127:16]\&.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Scalar	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SS DESCRIPTION
This instruction performs a compare of the low packed FP16 values in the
first source operand and the second source operand and returns the
minimum value for the pair of values to the destination operand.

.PP
If the values being compared are both 0.0s (of either sign), the value
in the second operand (source operand) is returned. If a value in the
second operand is an SNaN, then SNaN is forwarded unchanged to the
destination (that is, a QNaN version of the SNaN is not returned).

.PP
If only one value is a NaN (SNaN or QNaN) for this instruction, the
second operand (source operand), either a NaN or a valid floating-point
value, is written to the result. If instead of this behavior, it is
required that the NaN source operand (from either the first or second
operand) be returned, the action of VMINSH can be emulated using a
sequence of instructions, such as, a comparison followed by AND, ANDN,
and OR.

.PP
EVEX encoded versions: The first source operand (the second operand) is
a ZMM/YMM/XMM register. The second source operand can be a ZMM/YMM/XMM
register, a 512/256/128-bit memory location or a 512/256/128-bit vector
broadcast from a 16-bit memory location. The destination operand is a
ZMM/YMM/XMM register conditionally updated with writemask k1.

.PP
Bits 127:16 of the destination operand are copied from the corresponding
bits of the first source operand. Bits MAXVL-1:128 of the destination
operand are zeroed. The low FP16 element of the destination is updated
according to the writemask.

.SS OPERATION
.EX
def MIN(SRC1, SRC2):
    IF (SRC1 = 0.0) and (SRC2 = 0.0):
        DEST := SRC2
    ELSE IF (SRC1 = NaN):
        DEST := SRC2
    ELSE IF (SRC2 = NaN):
        DEST := SRC2
    ELSE IF (SRC1 < SRC2):
        DEST := SRC1
    ELSE:
        DEST := SRC2
.EE

.SS VMINSH DEST, SRC1, SRC2
.EX
IF k1[0] OR *no writemask*:
    DEST.fp16[0] := MIN(SRC1.fp16[0], SRC2.fp16[0])
ELSE IF *zeroing*:
    DEST.fp16[0] := 0
// else dest.fp16[j] remains unchanged
DEST[127:16] := SRC1[127:16]
DEST[MAXVL-1:128] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vminsh.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VMINSH __m128h _mm_mask_min_round_sh (__m128h src, __mmask8 k, __m128h a, __m128h b, int sae);

VMINSH __m128h _mm_maskz_min_round_sh (__mmask8 k, __m128h a, __m128h b, int sae);

VMINSH __m128h _mm_min_round_sh (__m128h a, __m128h b, int sae);

VMINSH __m128h _mm_mask_min_sh (__m128h src, __mmask8 k, __m128h a, __m128h b);

VMINSH __m128h _mm_maskz_min_sh (__mmask8 k, __m128h a, __m128h b);

VMINSH __m128h _mm_min_sh (__m128h a, __m128h b);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vminsh.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Denormal

.SS OTHER EXCEPTIONS
EVEX-encoded instructions, see Table
2-47, “Type E3 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
