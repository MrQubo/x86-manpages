'\" t
.nh
.TH "X86-PREFETCHWT1" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
PREFETCHWT1 - PREFETCH VECTOR DATA INTO CACHES WITH INTENT TO WRITE AND T1 HINT
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
0F 0D /2 PREFETCHWT1 m8	M	V/V	PREFETCHWT1	T{
Move data from m8 closer to the processor using T1 hint with intent to write.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="prefetchwt1.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En Operand 1 Operand 2 Operand 3 Operand 4\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP
M ModRM:r/m (r) N/A N/A N/A				
.TE

.SH DESCRIPTION
Fetches the line of data from memory that contains the byte specified
with the source operand to a location in the cache hierarchy specified
by an intent to write hint (so that data is brought into ‘Exclusive’
state via a request for ownership) and a locality hint:
.IP \(bu 2
T1 (temporal data with respect to first level cache)—prefetch data
into the second level cache.

.PP
The source operand is a byte memory location. (The locality hints are
encoded into the machine level instruction using bits 3 through 5 of the
ModR/M byte. Use of any ModR/M value other than the specified ones will
lead to unpredictable behavior.)

.PP
If the line selected is already present in the cache hierarchy at a
level closer to the processor, no data movement occurs. Prefetches from
uncacheable or WC memory are ignored.

.PP
The PREFETCHWT1 instruction is merely a hint and does not affect program
behavior. If executed, this instruction moves data closer to the
processor in anticipation of future use.

.PP
The implementation of prefetch locality hints is
implementation-dependent, and can be overloaded or ignored by a
processor implementation. The amount of data prefetched is also
processor implementation-dependent. It will, however, be a minimum of 32
bytes. Additional details of the implementation-dependent locality hints
are described in Section 9.5, “Memory Optimization Using Prefetch” of
the Intel® 64 and IA-32 Architectures Optimization Reference Manual.

.PP
It should be noted that processors are free to speculatively fetch and
cache data from system memory regions that are assigned a memory-type
that permits speculative reads (that is, the WB, WC, and WT memory
types). A PREFETCHWT1 instruction is considered a hint to this
speculative behavior. Because this speculative fetching can occur at any
time and is not tied to instruction execution, a PREFETCHWT1 instruction
is not ordered with respect to the fence instructions (MFENCE, SFENCE,
and LFENCE) or locked memory references. A PREFETCHWT1 instruction is
also unordered with respect to CLFLUSH and CLFLUSHOPT instructions,
other PREFETCHWT1 instructions, or any other general instruction. It is
ordered with respect to serializing instructions such as CPUID, WRMSR,
OUT, and MOV CR.

.PP
This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.

.SH OPERATION
.EX
PREFETCH(mem, Level, State) Prefetches a byte memory location pointed by ‘mem’ into the cache level specified by ‘Level’; a request
for exclusive/ownership is done if ‘State’ is 1. Note that the memory location ignore cache line splits. This operation is considered a
hint for the processor and may be skipped depending on implementation.
Prefetch (m8, Level = 1, EXCLUSIVE=1);
.EE

.SH FLAGS AFFECTED
All flags are affected.

.SH C/C++ COMPILER INTRINSIC EQUIVALENT  href="prefetchwt1.html#c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
void _mm_prefetch( char const *, int hint= _MM_HINT_ET1);
.EE

.SH PROTECTED MODE EXCEPTIONS  href="prefetchwt1.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS  href="prefetchwt1.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS  href="prefetchwt1.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS  href="prefetchwt1.html#compatibility-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
.TE

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
