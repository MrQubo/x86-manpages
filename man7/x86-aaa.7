'\" t
.nh
.TH "X86-AAA" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
AAA - ASCII ADJUST AFTER ADDITION
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
37	AAA	ZO	Invalid	Valid	T{
ASCII adjust AL after addition.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
ZO	N/A	N/A	N/A	N/A
.TE

.SH DESCRIPTION
Adjusts the sum of two unpacked BCD values to create an unpacked BCD
result. The AL register is the implied source and destination operand
for this instruction. The AAA instruction is only useful when it follows
an ADD instruction that adds (binary addition) two unpacked BCD values
and stores a byte result in the AL register. The AAA instruction then
adjusts the contents of the AL register to contain the correct 1-digit
unpacked BCD result.

.PP
If the addition produces a decimal carry, the AH register increments by
1, and the CF and AF flags are set. If there was no decimal carry, the
CF and AF flags are cleared and the AH register is unchanged. In either
case, bits 4 through 7 of the AL register are set to 0.

.PP
This instruction executes as described in compatibility mode and legacy
mode. It is not valid in 64-bit mode.

.SH OPERATION
.EX
IF 64-Bit Mode
    THEN
        #UD;
    ELSE
        IF ((AL AND 0FH) > 9) or (AF = 1)
            THEN
                AX := AX + 106H;
                AF := 1;
                CF := 1;
            ELSE
                AF := 0;
                CF := 0;
        FI;
        AL := AL AND 0FH;
FI;
.EE

.SH FLAGS AFFECTED
The AF and CF flags are set to 1 if the adjustment results in a decimal
carry; otherwise they are set to 0. The OF, SF, ZF, and PF flags are
undefined.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
Same exceptions as protected mode.

.SH VIRTUAL-8086 MODE EXCEPTIONS
Same exceptions as protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If in 64-bit mode.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
