'\" t
.nh
.TH "X86-CVTSS2SD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
CVTSS2SD - CONVERT SCALAR SINGLE PRECISION FLOATING-POINT VALUE TO SCALAR DOUBLE PRECISIONFLOATING-POINT VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
F3 0F 5A /r CVTSS2SD xmm1, xmm2/m32
T}	A	V/V	SSE2	T{
Convert one single precision floating-point value in xmm2/m32 to one double precision floating-point value in xmm1.
T}
T{
VEX.LIG.F3.0F.WIG 5A /r VCVTSS2SD xmm1, xmm2, xmm3/m32
T}	B	V/V	AVX	T{
Convert one single precision floating-point value in xmm3/m32 to one double precision floating-point value and merge with high bits of xmm2.
T}
T{
EVEX.LLIG.F3.0F.W0 5A /r VCVTSS2SD xmm1 {k1}{z}, xmm2, xmm3/m32{sae}
T}	C	V/V	AVX512F	T{
Convert one single precision floating-point value in xmm3/m32 to one double precision floating-point value and merge with high bits of xmm2 under writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="cvtss2sd.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Converts a single precision floating-point value in the “convert-from”
source operand to a double precision floating-point value in the
destination operand. When the “convert-from” source operand is an XMM
register, the single precision floating-point value is contained in the
low doubleword of the register. The result is stored in the low quadword
of the destination operand.

.PP
128-bit Legacy SSE version: The “convert-from” source operand (the
second operand) is an XMM register or memory location. Bits (MAXVL-1:64)
of the corresponding destination register remain unchanged. The
destination operand is an XMM register.

.PP
VEX.128 and EVEX encoded versions: The “convert-from” source operand
(the third operand) can be an XMM register or a 32-bit memory location.
The first source and destination operands are XMM registers. Bits
(127:64) of the XMM register destination are copied from the
corresponding bits in the first source operand. Bits (MAXVL-1:128) of
the destination register are zeroed.

.PP
Software should ensure VCVTSS2SD is encoded with VEX.L=0. Encoding
VCVTSS2SD with VEX.L=1 may encounter unpredictable behavior across
different processor generations.

.SH OPERATION
.SS VCVTSS2SD (EVEX ENCODED VERSION)  href="cvtss2sd.html#vcvtss2sd--evex-encoded-version-"
class="anchor">¶

.EX
IF k1[0] or *no writemask*
    THEN DEST[63:0] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC2[31:0]);
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[63:0] remains unchanged*
            ELSE ; zeroing-masking
                THEN DEST[63:0] = 0
        FI;
FI;
DEST[127:64] := SRC1[127:64]
DEST[MAXVL-1:128] := 0
.EE

.SS VCVTSS2SD (VEX.128 ENCODED VERSION)  href="cvtss2sd.html#vcvtss2sd--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[63:0] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC2[31:0])
DEST[127:64] := SRC1[127:64]
DEST[MAXVL-1:128] := 0
.EE

.SS CVTSS2SD (128-BIT LEGACY SSE VERSION)  href="cvtss2sd.html#cvtss2sd--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[63:0] := Convert_Single_Precision_To_Double_Precision_Floating_Point(SRC[31:0]);
DEST[MAXVL-1:64] (Unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="cvtss2sd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VCVTSS2SD __m128d _mm_cvt_roundss_sd(__m128d a, __m128 b, int r);

VCVTSS2SD __m128d _mm_mask_cvt_roundss_sd(__m128d s, __mmask8 m, __m128d a,__m128 b, int r);

VCVTSS2SD __m128d _mm_maskz_cvt_roundss_sd(__mmask8 k, __m128d a, __m128 a, int r);

VCVTSS2SD __m128d _mm_mask_cvtss_sd(__m128d s, __mmask8 m, __m128d a,__m128 b);

VCVTSS2SD __m128d _mm_maskz_cvtss_sd(__mmask8 m, __m128d a,__m128 b);

CVTSS2SD __m128d_mm_cvtss_sd(__m128d a, __m128 a);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="cvtss2sd.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Denormal.

.SH OTHER EXCEPTIONS
VEX-encoded instructions, see Table
2-20, “Type 3 Class Exception Conditions.”

.PP
EVEX-encoded instructions, see Table
2-47, “Type E3 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
