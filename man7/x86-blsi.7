'\" t
.nh
.TH "X86-BLSI" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
BLSI - EXTRACT LOWEST SET ISOLATED BIT
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32-bit Mode\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
VEX.LZ.0F38.W0 F3 /3 BLSI r32, r/m32
T}	VM	V/V	BMI1	T{
Extract lowest set bit from r/m32 and set that bit in r32.
T}
T{
VEX.LZ.0F38.W1 F3 /3 BLSI r64, r/m64
T}	VM	V/N.E.	BMI1	T{
Extract lowest set bit from r/m64, and set that bit in r64.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
VM	VEX.vvvv (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Extracts the lowest set bit from the source operand and set the
corresponding bit in the destination register. All other bits in the
destination operand are zeroed. If no bits are set in the source
operand, BLSI sets all the bits in the destination to 0 and sets ZF and
CF.

.PP
This instruction is not supported in real mode and virtual-8086 mode.
The operand size is always 32 bits if not in 64-bit mode. In 64-bit mode
operand size 64 requires VEX.W1. VEX.W1 is ignored in non-64-bit modes.
An attempt to execute this instruction with VEX.L not equal to 0 will
cause #UD.

.SH OPERATION
.EX
temp := (-SRC) bitwiseAND (SRC);
SF := temp[OperandSize -1];
ZF := (temp = 0);
IF SRC = 0
    CF := 0;
ELSE
    CF := 1;
FI
DEST := temp;
.EE

.SH FLAGS AFFECTED
ZF and SF are updated based on the result. CF is set if the source is
not zero. OF flags are cleared. AF and PF flags are undefined.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="blsi.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
BLSI unsigned __int32 _blsi_u32(unsigned __int32 src);

BLSI unsigned __int64 _blsi_u64(unsigned __int64 src);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS
None.

.SH OTHER EXCEPTIONS
See Table 2-29, “Type 13 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
