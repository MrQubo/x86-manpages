'\" t
.nh
.TH "X86-FSAVE-FNSAVE" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
FSAVE-FNSAVE - STORE X87 FPU STATE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
9B DD /6	FSAVE m94/108byte	Valid	Valid	T{
Store FPU state to m94byte or m108byte after checking for pending unmasked floating-point exceptions. Then re-initialize the FPU.
T}
DD /6	FNSAVE1 m94/108byte	Valid	Valid	T{
Store FPU environment to m94byte or m108byte without checking for pending unmasked floating-point exceptions. Then re-initialize the FPU.
T}
.TE

.PP
.RS

.PP
1\&. See IA-32 Architecture Compatibility section below.

.RE

.SH DESCRIPTION
Stores the current FPU state (operating environment and register stack)
at the specified destination in memory, and then re-initializes the FPU.
The FSAVE instruction checks for and handles pending unmasked
floating-point exceptions before storing the FPU state; the FNSAVE
instruction does not.

.PP
The FPU operating environment consists of the FPU control word, status
word, tag word, instruction pointer, data pointer, and last opcode.
Figures 8-9 through 8-12 in the Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 1, show the layout in
memory of the stored environment, depending on the operating mode of the
processor (protected or real) and the current operand-size attribute
(16-bit or 32-bit). In virtual-8086 mode, the real mode layouts are
used. The contents of the FPU register stack are stored in the 80 bytes
immediately follow the operating environment image.

.PP
The saved image reflects the state of the FPU after all floating-point
instructions preceding the FSAVE/FNSAVE instruction in the instruction
stream have been executed.

.PP
After the FPU state has been saved, the FPU is reset to the same default
values it is set to with the FINIT/FNINIT instructions (see
“FINIT/FNINIT—Initialize Floating-Point Unit” in this chapter).

.PP
The FSAVE/FNSAVE instructions are typically used when the operating
system needs to perform a context switch, an exception handler needs to
use the FPU, or an application program needs to pass a “clean” FPU to a
procedure.

.PP
The assembler issues two instructions for the FSAVE instruction (an
FWAIT instruction followed by an FNSAVE instruction), and the processor
executes each of these instructions separately. If an exception is
generated for either of these instructions, the save EIP points to the
instruction that caused the exception.

.PP
This instruction’s operation is the same in non-64-bit modes and 64-bit
mode.

.SH IA-32 ARCHITECTURE COMPATIBILITY  href="./fsave:fnsave.html#ia-32-architecture-compatibility"
class="anchor">¶

.PP
For Intel math coprocessors and FPUs prior to the Intel Pentium
processor, an FWAIT instruction should be executed before attempting to
read from the memory image stored with a prior FSAVE/FNSAVE instruction.
This FWAIT instruction helps ensure that the storage operation has been
completed.

.PP
When operating a Pentium or Intel486 processor in MS-DOS compatibility
mode, it is possible (under unusual circumstances) for an FNSAVE
instruction to be interrupted prior to being executed to handle a
pending FPU exception. See the section titled “No-Wait FPU Instructions
Can Get FPU Interrupt in Window” in Appendix D of the Intel®
64 and IA-32 Architectures Software Developer’s Manual, Volume 1, for a
description of these circumstances. An FNSAVE instruction cannot be
interrupted in this way on later Intel processors, except for the Intel
QuarkTM X1000 processor.

.SH OPERATION
.EX
(* Save FPU State and Registers *)
DEST[FPUControlWord] := FPUControlWord;
DEST[FPUStatusWord] := FPUStatusWord;
DEST[FPUTagWord] := FPUTagWord;
DEST[FPUDataPointer] := FPUDataPointer;
DEST[FPUInstructionPointer] := FPUInstructionPointer;
DEST[FPULastInstructionOpcode] := FPULastInstructionOpcode;
DEST[ST(0)] := ST(0);
DEST[ST(1)] := ST(1);
DEST[ST(2)] := ST(2);
DEST[ST(3)] := ST(3);
DEST[ST(4)]:= ST(4);
DEST[ST(5)] := ST(5);
DEST[ST(6)] := ST(6);
DEST[ST(7)] := ST(7);
(* Initialize FPU *)
FPUControlWord := 037FH;
FPUStatusWord := 0;
FPUTagWord := FFFFH;
FPUDataPointer := 0;
FPUInstructionPointer := 0;
FPULastInstructionOpcode := 0;
.EE

.SH FPU FLAGS AFFECTED
The C0, C1, C2, and C3 flags are saved and then cleared.

.SH FLOATING-POINT EXCEPTIONS  href="./fsave:fnsave.html#floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH PROTECTED MODE EXCEPTIONS  href="./fsave:fnsave.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If destination is located in a non-writable segment.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS  href="./fsave:fnsave.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS  href="./fsave:fnsave.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS  href="./fsave:fnsave.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS  href="./fsave:fnsave.html#64-bit-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#NM	CR0.EM[bit 2] or CR0.TS[bit 3] = 1.
#MF	T{
If there is a pending x87 FPU exception.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
