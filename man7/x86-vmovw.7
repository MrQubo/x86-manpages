'\" t
.nh
.TH "X86-VMOVW" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VMOVW - MOVE WORD
.TS
allbox;
l l l l l 
l l l l l .
\fBInstruction En bit Mode Flag Support Instruction En bit Mode Flag Support 64/32 CPUID Feature Instruction En bit Mode Flag CPUID Feature Instruction En bit Mode Flag Op/ 64/32 CPUID Feature Instruction En bit Mode Flag 64/32 CPUID Feature Instruction En bit Mode Flag CPUID Feature Instruction En bit Mode Flag Op/ 64/32 CPUID Feature\fP	\fB\fP	\fBSupport\fP	\fB\fP	\fBDescription\fP
T{
EVEX.128.66.MAP5.WIG 6E /r VMOVW xmm1, reg/m16
T}	A	V/V	AVX512-FP16	T{
Copy word from reg/m16 to xmm1.
T}
T{
EVEX.128.66.MAP5.WIG 7E /r VMOVW reg/m16, xmm1
T}	B	V/V	AVX512-FP16	T{
Copy word from xmm1 to reg/m16.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Scalar	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	Scalar	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SS DESCRIPTION
This instruction either (a) copies one word element from an XMM register
to a general-purpose register or memory location or (b) copies one word
element from a general-purpose register or memory location to an XMM
register. When writing a general-purpose register, the lower 16-bits of
the register will contain the word value. The upper bits of the
general-purpose register are written with zeros.

.SS OPERATION
.SS VMOVW DEST, SRC (TWO OPERAND LOAD)  href="vmovw.html#vmovw-dest--src--two-operand-load-"
class="anchor">¶

.EX
DEST.word[0] := SRC.word[0]
DEST[MAXVL:16] := 0
.EE

.SS VMOVW DEST, SRC (TWO OPERAND STORE)  href="vmovw.html#vmovw-dest--src--two-operand-store-"
class="anchor">¶

.EX
DEST.word[0] := SRC.word[0]
// upper bits of GPR DEST are zeroed
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vmovw.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VMOVW short _mm_cvtsi128_si16 (__m128i a);

VMOVW __m128i _mm_cvtsi16_si128 (short a);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS
None

.SS OTHER EXCEPTIONS
EVEX-encoded instructions, see Table
2-57, “Type E9NF Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
