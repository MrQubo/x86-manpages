'\" t
.nh
.TH "X86-VREDUCESH" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VREDUCESH - PERFORM REDUCTION TRANSFORMATION ON SCALAR FP16 VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fBInstruction En bit Mode Flag Support Instruction En bit Mode Flag Support 64/32 CPUID Feature Instruction En bit Mode Flag CPUID Feature Instruction En bit Mode Flag Op/ 64/32 CPUID Feature Instruction En bit Mode Flag 64/32 CPUID Feature Instruction En bit Mode Flag CPUID Feature Instruction En bit Mode Flag Op/ 64/32 CPUID Feature\fP	\fB\fP	\fBSupport\fP	\fB\fP	\fBDescription\fP
T{
EVEX.LLIG.NP.0F3A.W0 57 /r /ib VREDUCESH xmm1{k1}{z}, xmm2, xmm3/m16 {sae}, imm8
T}	A	V/V	AVX512-FP16	T{
Perform a reduction transformation on the low binary encoded FP16 value in xmm3/m16 by subtracting a number of fraction bits specified by the imm8 field. Store the result in xmm1 subject to writemask k1. Bits 127:16 from xmm2 are copied to xmm1[127:16]\&.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vreducesh.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Scalar	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	imm8 (r)
.TE

.SS DESCRIPTION
This instruction performs a reduction transformation of the low binary
encoded FP16 value in the source operand (the second operand) and store
the reduced result in binary FP format to the low element of the
destination operand (the first operand) under the writemask k1. For
further details see the description of VREDUCEPH.

.PP
Bits 127:16 of the destination operand are copied from the corresponding
bits of the first source operand. Bits MAXVL-1:128 of the destination
operand are zeroed. The low FP16 element of the destination is updated
according to the writemask.

.PP
This instruction might end up with a precision exception set. However,
in case of SPE set (i.e., Suppress Precision Exception, which is
imm8[3]=1), no precision exception is reported.

.PP
This instruction may generate tiny non-zero result. If it does so, it
does not report underflow exception, even if underflow exceptions are
unmasked (UM flag in MXCSR register is 0).

.PP
For special cases, see Table 5-30
\[la]vreduceph.html#tbl\-5\-30\[ra]\&.

.SS OPERATION
.SS VREDUCESH DEST{K1}, SRC, IMM8  href="vreducesh.html#vreducesh-dest-k1---src--imm8"
class="anchor">¶

.EX
IF k1[0] or *no writemask*:
    dest.fp16[0] := reduce_fp16(src2.fp16[0], imm8)
        // see VREDUCEPH
ELSE IF *zeroing*:
    dest.fp16[0] := 0
//else dest.fp16[0] remains unchanged
DEST[127:16] := src1[127:16]
DEST[MAXVL-1:128] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vreducesh.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VREDUCESH __m128h _mm_mask_reduce_round_sh (__m128h src, __mmask8 k, __m128h a, __m128h b, int imm8, const int sae);

VREDUCESH __m128h _mm_maskz_reduce_round_sh (__mmask8 k, __m128h a, __m128h b, int imm8, const int sae);

VREDUCESH __m128h _mm_reduce_round_sh (__m128h a, __m128h b, int imm8, const int sae);

VREDUCESH __m128h _mm_mask_reduce_sh (__m128h src, __mmask8 k, __m128h a, __m128h b, int imm8);

VREDUCESH __m128h _mm_maskz_reduce_sh (__mmask8 k, __m128h a, __m128h b, int imm8);

VREDUCESH __m128h _mm_reduce_sh (__m128h a, __m128h b, int imm8);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vreducesh.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Precision.

.SS OTHER EXCEPTIONS
EVEX-encoded instructions, see Table
2-47, “Type E3 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
