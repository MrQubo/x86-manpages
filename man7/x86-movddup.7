'\" t
.nh
.TH "X86-MOVDDUP" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MOVDDUP - REPLICATE DOUBLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
F2 0F 12 /r MOVDDUP xmm1, xmm2/m64
T}	A	V/V	SSE3	T{
Move double precision floating-point value from xmm2/m64 and duplicate into xmm1.
T}
T{
VEX.128.F2.0F.WIG 12 /r VMOVDDUP xmm1, xmm2/m64
T}	A	V/V	AVX	T{
Move double precision floating-point value from xmm2/m64 and duplicate into xmm1.
T}
T{
VEX.256.F2.0F.WIG 12 /r VMOVDDUP ymm1, ymm2/m256
T}	A	V/V	AVX	T{
Move even index double precision floating-point values from ymm2/mem and duplicate each element into ymm1.
T}
T{
EVEX.128.F2.0F.W1 12 /r VMOVDDUP xmm1 {k1}{z}, xmm2/m64
T}	B	V/V	AVX512VL AVX512F	T{
Move double precision floating-point value from xmm2/m64 and duplicate each element into xmm1 subject to writemask k1.
T}
T{
EVEX.256.F2.0F.W1 12 /r VMOVDDUP ymm1 {k1}{z}, ymm2/m256
T}	B	V/V	AVX512VL AVX512F	T{
Move even index double precision floating-point values from ymm2/m256 and duplicate each element into ymm1 subject to writemask k1.
T}
T{
EVEX.512.F2.0F.W1 12 /r VMOVDDUP zmm1 {k1}{z}, zmm2/m512
T}	B	V/V	AVX512F	T{
Move even index double precision floating-point values from zmm2/m512 and duplicate each element into zmm1 subject to writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	MOVDDUP	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
For 256-bit or higher versions: Duplicates even-indexed double precision
floating-point values from the source operand (the second operand) and
into adjacent pair and store to the destination operand (the first
operand).

.PP
For 128-bit versions: Duplicates the low double precision floating-point
value from the source operand (the second operand) and store to the
destination operand (the first operand).

.PP
128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding
destination register are unchanged. The source operand is XMM register
or a 64-bit memory location.

.PP
VEX.128 and EVEX.128 encoded version: Bits (MAXVL-1:128) of the
destination register are zeroed. The source operand is XMM register or a
64-bit memory location. The destination is updated conditionally under
the writemask for EVEX version.

.PP
VEX.256 and EVEX.256 encoded version: Bits (MAXVL-1:256) of the
destination register are zeroed. The source operand is YMM register or a
256-bit memory location. The destination is updated conditionally under
the write-mask for EVEX version.

.PP
EVEX.512 encoded version: The destination is updated according to the
writemask. The source operand is ZMM register or a 512-bit memory
location.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.SH OPERATION
.SS VMOVDDUP (EVEX ENCODED VERSIONS)  href="movddup.html#vmovddup--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
TMP_SRC[63:0] := SRC[63:0]
TMP_SRC[127:64] := SRC[63:0]
IF VL >= 256
    TMP_SRC[191:128] := SRC[191:128]
    TMP_SRC[255:192] := SRC[191:128]
FI;
IF VL >= 512
    TMP_SRC[319:256] := SRC[319:256]
    TMP_SRC[383:320] := SRC[319:256]
    TMP_SRC[477:384] := SRC[477:384]
    TMP_SRC[511:484] := SRC[477:384]
FI;
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := TMP_SRC[i+63:i]
        ELSE
            IF *merging-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE
                        ; zeroing-masking
                    DEST[i+63:i] := 0
                        ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VMOVDDUP (VEX.256 ENCODED VERSION)  href="movddup.html#vmovddup--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[63:0] := SRC[63:0]
DEST[127:64] := SRC[63:0]
DEST[191:128] := SRC[191:128]
DEST[255:192] := SRC[191:128]
DEST[MAXVL-1:256] := 0
.EE

.SS VMOVDDUP (VEX.128 ENCODED VERSION)  href="movddup.html#vmovddup--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[63:0] := SRC[63:0]
DEST[127:64] := SRC[63:0]
DEST[MAXVL-1:128] := 0
.EE

.SS MOVDDUP (128-BIT LEGACY SSE VERSION)  href="movddup.html#movddup--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[63:0] := SRC[63:0]
DEST[127:64] := SRC[63:0]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="movddup.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VMOVDDUP __m512d _mm512_movedup_pd( __m512d a);

VMOVDDUP __m512d _mm512_mask_movedup_pd(__m512d s, __mmask8 k, __m512d a);

VMOVDDUP __m512d _mm512_maskz_movedup_pd( __mmask8 k, __m512d a);

VMOVDDUP __m256d _mm256_mask_movedup_pd(__m256d s, __mmask8 k, __m256d a);

VMOVDDUP __m256d _mm256_maskz_movedup_pd( __mmask8 k, __m256d a);

VMOVDDUP __m128d _mm_mask_movedup_pd(__m128d s, __mmask8 k, __m128d a);

VMOVDDUP __m128d _mm_maskz_movedup_pd( __mmask8 k, __m128d a);

MOVDDUP __m256d _mm256_movedup_pd (__m256d a);

MOVDDUP __m128d _mm_movedup_pd (__m128d a);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="movddup.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Table
2-22, “Type 5 Class Exception Conditions.”

.PP
EVEX-encoded instruction, see Table
2-52, “Type E5NF Class Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If EVEX.vvvv != 1111B or VEX.vvvv != 1111B.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
