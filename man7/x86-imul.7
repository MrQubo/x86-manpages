'\" t
.nh
.TH "X86-IMUL" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
IMUL - SIGNED MULTIPLY
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
F6 /5	IMUL r/m81	M	Valid	Valid	AX:= AL ∗ r/m byte.
F7 /5	IMUL r/m16	M	Valid	Valid	DX:AX := AX ∗ r/m word.
F7 /5	IMUL r/m32	M	Valid	Valid	EDX:EAX := EAX ∗ r/m32.
REX.W + F7 /5	IMUL r/m64	M	Valid	N.E.	RDX:RAX := RAX ∗ r/m64.
0F AF /r	IMUL r16, r/m16	RM	Valid	Valid	T{
word register := word register ∗ r/m16.
T}
0F AF /r	IMUL r32, r/m32	RM	Valid	Valid	T{
doubleword register := doubleword register ∗ r/m32.
T}
REX.W + 0F AF /r	IMUL r64, r/m64	RM	Valid	N.E.	T{
Quadword register := Quadword register ∗ r/m64.
T}
6B /r ib	IMUL r16, r/m16, imm8	RMI	Valid	Valid	T{
word register := r/m16 ∗ sign-extended immediate byte.
T}
6B /r ib	IMUL r32, r/m32, imm8	RMI	Valid	Valid	T{
doubleword register := r/m32 ∗ sign-extended immediate byte.
T}
REX.W + 6B /r ib	IMUL r64, r/m64, imm8	RMI	Valid	N.E.	T{
Quadword register := r/m64 ∗ sign-extended immediate byte.
T}
69 /r iw	IMUL r16, r/m16, imm16	RMI	Valid	Valid	T{
word register := r/m16 ∗ immediate word.
T}
69 /r id	IMUL r32, r/m32, imm32	RMI	Valid	Valid	T{
doubleword register := r/m32 ∗ immediate doubleword.
T}
REX.W + 69 /r id	IMUL r64, r/m64, imm32	RMI	Valid	N.E.	T{
Quadword register := r/m64 ∗ immediate doubleword.
T}
.TE

.PP
.RS

.PP
1\&. In 64-bit mode, r/m8 can not be encoded to access the following
byte registers if a REX prefix is used: AH, BH, CH, DH.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
M	ModRM:r/m (r, w)	N/A	N/A	N/A
RM	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
RMI	ModRM:reg (r, w)	ModRM:r/m (r)	imm8/16/32	N/A
.TE

.SH DESCRIPTION
Performs a signed multiplication of two operands. This instruction has
three forms, depending on the number of operands.
.IP \(bu 2
\fBOne-operand form\fP — This form is identical to that used by the
MUL instruction. Here, the source operand (in a general-purpose
register or memory location) is multiplied by the value in the AL,
AX, EAX, or RAX register (depending on the operand size) and the
product (twice the size of the input operand) is stored in the AX,
DX:AX, EDX:EAX, or RDX:RAX registers, respectively.
.IP \(bu 2
\fBTwo-operand form\fP — With this form the destination operand (the
first operand) is multiplied by the source operand (second operand).
The destination operand is a general-purpose register and the source
operand is an immediate value, a general-purpose register, or a
memory location. The intermediate product (twice the size of the
input operand) is truncated and stored in the destination operand
location.
.IP \(bu 2
\fBThree-operand form\fP — This form requires a destination operand
(the first operand) and two source operands (the second and the
third operands). Here, the first source operand (which can be a
general-purpose register or a memory location) is multiplied by the
second source operand (an immediate value). The intermediate product
(twice the size of the first source operand) is truncated and stored
in the destination operand (a general-purpose register).

.PP
When an immediate value is used as an operand, it is sign-extended to
the length of the destination operand format.

.PP
The CF and OF flags are set when the signed integer value of the
intermediate product differs from the sign extended
operand-size-truncated product, otherwise the CF and OF flags are
cleared.

.PP
The three forms of the IMUL instruction are similar in that the length
of the product is calculated to twice the length of the operands. With
the one-operand form, the product is stored exactly in the destination.
With the two- and three- operand forms, however, the result is truncated
to the length of the destination before it is stored in the destination
register. Because of this truncation, the CF or OF flag should be tested
to ensure that no significant bits are lost.

.PP
The two- and three-operand forms may also be used with unsigned operands
because the lower half of the product is the same regardless if the
operands are signed or unsigned. The CF and OF flags, however, cannot be
used to determine if the upper half of the result is non-zero.

.PP
In 64-bit mode, the instruction’s default operation size is 32 bits. Use
of the REX.R prefix permits access to additional registers (R8-R15). Use
of the REX.W prefix promotes operation to 64 bits. Use of REX.W modifies
the three forms of the instruction as follows.
.IP \(bu 2
\fBOne-operand form\fP —The source operand (in a 64-bit
general-purpose register or memory location) is multiplied by the
value in the RAX register and the product is stored in the RDX:RAX
registers.
.IP \(bu 2
\fBTwo-operand form\fP — The source operand is promoted to 64 bits if
it is a register or a memory location. The destination operand is
promoted to 64 bits.
.IP \(bu 2
\fBThree-operand form\fP — The first source operand (either a register
or a memory location) and destination operand are promoted to 64
bits. If the source operand is an immediate, it is sign extended to
64 bits.

.SH OPERATION
.EX
IF (NumberOfOperands = 1)
    THEN IF (OperandSize = 8)
        THEN
            TMP_XP := AL ∗ SRC (* Signed multiplication; TMP_XP is a signed integer at twice the width of the SRC *);
            AX := TMP_XP[15:0];
            IF SignExtend(TMP_XP[7:0]) = TMP_XP
                THEN CF := 0; OF := 0;
                ELSE CF := 1; OF := 1; FI;
        ELSE IF OperandSize = 16
            THEN
                TMP_XP := AX ∗ SRC (* Signed multiplication; TMP_XP is a signed integer at twice the width of the SRC *)
                DX:AX := TMP_XP[31:0];
                IF SignExtend(TMP_XP[15:0]) = TMP_XP
                    THEN CF := 0; OF := 0;
                    ELSE CF := 1; OF := 1; FI;
            ELSE IF OperandSize = 32
                THEN
                    TMP_XP := EAX ∗ SRC (* Signed multiplication; TMP_XP is a signed integer at twice the width of the SRC*)
                    EDX:EAX := TMP_XP[63:0];
                    IF SignExtend(TMP_XP[31:0]) = TMP_XP
                        THEN CF := 0; OF := 0;
                        ELSE CF := 1; OF := 1; FI;
                ELSE (* OperandSize = 64 *)
                    TMP_XP := RAX ∗ SRC (* Signed multiplication; TMP_XP is a signed integer at twice the width of the SRC *)
                    EDX:EAX := TMP_XP[127:0];
                    IF SignExtend(TMP_XP[63:0]) = TMP_XP
                        THEN CF := 0; OF := 0;
                        ELSE CF := 1; OF := 1; FI;
                FI;
        FI;
    ELSE IF (NumberOfOperands = 2)
        THEN
            TMP_XP := DEST ∗ SRC (* Signed multiplication; TMP_XP is a signed integer at twice the width of the SRC *)
            DEST := TruncateToOperandSize(TMP_XP);
            IF SignExtend(DEST) ≠ TMP_XP
                THEN CF := 1; OF := 1;
                ELSE CF := 0; OF := 0; FI;
        ELSE (* NumberOfOperands = 3 *)
            TMP_XP := SRC1 ∗ SRC2 (* Signed multiplication; TMP_XP is a signed integer at twice the width of the SRC1 *)
            DEST := TruncateToOperandSize(TMP_XP);
            IF SignExtend(DEST) ≠ TMP_XP
                THEN CF := 1; OF := 1;
                ELSE CF := 0; OF := 0; FI;
    FI;
FI;
.EE

.SH FLAGS AFFECTED
For the one operand form of the instruction, the CF and OF flags are set
when significant bits are carried into the upper half of the result and
cleared when the result fits exactly in the lower half of the result.
For the two- and three-operand forms of the instruction, the CF and OF
flags are set when the result must be truncated to fit in the
destination operand size and cleared when the result fits exactly in the
destination operand size. The SF, ZF, AF, and PF flags are undefined.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS	T{
If a memory operand effective address is outside the SS segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
