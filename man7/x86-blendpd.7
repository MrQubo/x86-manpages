'\" t
.nh
.TH "X86-BLENDPD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
BLENDPD - BLEND PACKED DOUBLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32-bit Mode\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 3A 0D /r ib BLENDPD xmm1, xmm2/m128, imm8
T}	RMI	V/V	SSE4_1	T{
Select packed double precision floating-point values from xmm1 and xmm2/m128 from mask specified in imm8 and store the values into xmm1.
T}
T{
VEX.128.66.0F3A.WIG 0D /r ib VBLENDPD xmm1, xmm2, xmm3/m128, imm8
T}	RVMI	V/V	AVX	T{
Select packed double precision floating-point Values from xmm2 and xmm3/m128 from mask in imm8 and store the values in xmm1.
T}
T{
VEX.256.66.0F3A.WIG 0D /r ib VBLENDPD ymm1, ymm2, ymm3/m256, imm8
T}	RVMI	V/V	AVX	T{
Select packed double precision floating-point Values from ymm2 and ymm3/m256 from mask in imm8 and store the values in ymm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RMI	ModRM:reg (r, w)	ModRM:r/m (r)	imm8	N/A
RVMI	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	imm8[3:0]
.TE

.SH DESCRIPTION
Double-precision floating-point values from the second source operand
(third operand) are conditionally merged with values from the first
source operand (second operand) and written to the destination operand
(first operand). The immediate bits [3:0] determine whether the
corresponding double precision floating-point value in the destination
is copied from the second source or first source. If a bit in the mask,
corresponding to a word, is ”1”, then the double precision
floating-point value in the second source operand is copied, else the
value in the first source operand is copied.

.PP
128-bit Legacy SSE version: The second source can be an XMM register or
an 128-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL-1:128) of the
corresponding YMM register destination are unmodified.

.PP
VEX.128 encoded version: the first source operand is an XMM register.
The second source operand is an XMM register or 128-bit memory location.
The destination operand is an XMM register. The upper bits (MAXVL-1:128)
of the corresponding YMM register destination are zeroed.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256-bit memory
location. The destination operand is a YMM register.

.SH OPERATION
.SS BLENDPD (128-BIT LEGACY SSE VERSION)  href="blendpd.html#blendpd--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
IF (IMM8[0] = 0)THEN DEST[63:0] := DEST[63:0]
    ELSE DEST [63:0] := SRC[63:0] FI
IF (IMM8[1] = 0) THEN DEST[127:64] := DEST[127:64]
    ELSE DEST [127:64] := SRC[127:64] FI
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS VBLENDPD (VEX.128 ENCODED VERSION)  href="blendpd.html#vblendpd--vex-128-encoded-version-"
class="anchor">¶

.EX
IF (IMM8[0] = 0)THEN DEST[63:0] := SRC1[63:0]
    ELSE DEST [63:0] := SRC2[63:0] FI
IF (IMM8[1] = 0) THEN DEST[127:64] := SRC1[127:64]
    ELSE DEST [127:64] := SRC2[127:64] FI
DEST[MAXVL-1:128] := 0
.EE

.SS VBLENDPD (VEX.256 ENCODED VERSION)  href="blendpd.html#vblendpd--vex-256-encoded-version-"
class="anchor">¶

.EX
IF (IMM8[0] = 0)THEN DEST[63:0] := SRC1[63:0]
    ELSE DEST [63:0] := SRC2[63:0] FI
IF (IMM8[1] = 0) THEN DEST[127:64] := SRC1[127:64]
    ELSE DEST [127:64] := SRC2[127:64] FI
IF (IMM8[2] = 0) THEN DEST[191:128] := SRC1[191:128]
    ELSE DEST [191:128] := SRC2[191:128] FI
IF (IMM8[3] = 0) THEN DEST[255:192] := SRC1[255:192]
    ELSE DEST [255:192] := SRC2[255:192] FI
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="blendpd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
BLENDPD __m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);

VBLENDPD __m256d _mm256_blend_pd (__m256d a, __m256d b, const int mask);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="blendpd.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
See Table 2-21, “Type 4 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
