'\" t
.nh
.TH "X86-PSUBB-PSUBW-PSUBD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
PSUBB-PSUBW-PSUBD - SUBTRACT PACKED INTEGERS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
NP 0F F8 /r1 PSUBB mm, mm/m64	A	V/V	MMX	T{
Subtract packed byte integers in mm/m64 from packed byte integers in mm.
T}
T{
66 0F F8 /r PSUBB xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Subtract packed byte integers in xmm2/m128 from packed byte integers in xmm1.
T}
NP 0F F9 /r1 PSUBW mm, mm/m64	A	V/V	MMX	T{
Subtract packed word integers in mm/m64 from packed word integers in mm.
T}
T{
66 0F F9 /r PSUBW xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Subtract packed word integers in xmm2/m128 from packed word integers in xmm1.
T}
NP 0F FA /r1 PSUBD mm, mm/m64	A	V/V	MMX	T{
Subtract packed doubleword integers in mm/m64 from packed doubleword integers in mm.
T}
T{
66 0F FA /r PSUBD xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Subtract packed doubleword integers in xmm2/mem128 from packed doubleword integers in xmm1.
T}
T{
VEX.128.66.0F.WIG F8 /r VPSUBB xmm1, xmm2, xmm3/m128
T}	B	V/V	AVX	T{
Subtract packed byte integers in xmm3/m128 from xmm2.
T}
T{
VEX.128.66.0F.WIG F9 /r VPSUBW xmm1, xmm2, xmm3/m128
T}	B	V/V	AVX	T{
Subtract packed word integers in xmm3/m128 from xmm2.
T}
T{
VEX.128.66.0F.WIG FA /r VPSUBD xmm1, xmm2, xmm3/m128
T}	B	V/V	AVX	T{
Subtract packed doubleword integers in xmm3/m128 from xmm2.
T}
T{
VEX.256.66.0F.WIG F8 /r VPSUBB ymm1, ymm2, ymm3/m256
T}	B	V/V	AVX2	T{
Subtract packed byte integers in ymm3/m256 from ymm2.
T}
T{
VEX.256.66.0F.WIG F9 /r VPSUBW ymm1, ymm2, ymm3/m256
T}	B	V/V	AVX2	T{
Subtract packed word integers in ymm3/m256 from ymm2.
T}
T{
VEX.256.66.0F.WIG FA /r VPSUBD ymm1, ymm2, ymm3/m256
T}	B	V/V	AVX2	T{
Subtract packed doubleword integers in ymm3/m256 from ymm2.
T}
T{
EVEX.128.66.0F.WIG F8 /r VPSUBB xmm1 {k1}{z}, xmm2, xmm3/m128
T}	C	V/V	AVX512VL AVX512BW	T{
Subtract packed byte integers in xmm3/m128 from xmm2 and store in xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F.WIG F8 /r VPSUBB ymm1 {k1}{z}, ymm2, ymm3/m256
T}	C	V/V	AVX512VL AVX512BW	T{
Subtract packed byte integers in ymm3/m256 from ymm2 and store in ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F.WIG F8 /r VPSUBB zmm1 {k1}{z}, zmm2, zmm3/m512
T}	C	V/V	AVX512BW	T{
Subtract packed byte integers in zmm3/m512 from zmm2 and store in zmm1 using writemask k1.
T}
T{
EVEX.128.66.0F.WIG F9 /r VPSUBW xmm1 {k1}{z}, xmm2, xmm3/m128
T}	C	V/V	AVX512VL AVX512BW	T{
Subtract packed word integers in xmm3/m128 from xmm2 and store in xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F.WIG F9 /r VPSUBW ymm1 {k1}{z}, ymm2, ymm3/m256
T}	C	V/V	AVX512VL AVX512BW	T{
Subtract packed word integers in ymm3/m256 from ymm2 and store in ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F.WIG F9 /r VPSUBW zmm1 {k1}{z}, zmm2, zmm3/m512
T}	C	V/V	AVX512BW	T{
Subtract packed word integers in zmm3/m512 from zmm2 and store in zmm1 using writemask k1.
T}
T{
EVEX.128.66.0F.W0 FA /r VPSUBD xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
T}	D	V/V	AVX512VL AVX512F	T{
Subtract packed doubleword integers in xmm3/m128/m32bcst from xmm2 and store in xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F.W0 FA /r VPSUBD ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
T}	D	V/V	AVX512VL AVX512F	T{
Subtract packed doubleword integers in ymm3/m256/m32bcst from ymm2 and store in ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F.W0 FA /r VPSUBD zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst
T}	D	V/V	AVX512F	T{
Subtract packed doubleword integers in zmm3/m512/m32bcst from zmm2 and store in zmm1 using writemask k1
T}
.TE

.PP
.RS

.PP
1\&. See note in Section 2.5, “Intel® AVX and Intel® SSE Instruction
Exception Classification,” in the Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 2A, and Section
23.25.3, “Exception Conditions of Legacy SIMD Instructions Operating
on MMX Registers,” in the Intel® 64 and IA-32 Architectures
Software Developer’s Manual, Volume 3B.

.RE

.SH INSTRUCTION OPERAND ENCODING  href="./psubb:psubw:psubd.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Full Mem	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
D	Full	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Performs a SIMD subtract of the packed integers of the source operand
(second operand) from the packed integers of the destination operand
(first operand), and stores the packed integer results in the
destination operand. See Figure 9-4 in
the Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 1, for an illustration of a SIMD operation. Overflow is
handled with wraparound, as described in the following paragraphs.

.PP
The (V)PSUBB instruction subtracts packed byte integers. When an
individual result is too large or too small to be represented in a byte,
the result is wrapped around and the low 8 bits are written to the
destination element.

.PP
The (V)PSUBW instruction subtracts packed word integers. When an
individual result is too large or too small to be represented in a word,
the result is wrapped around and the low 16 bits are written to the
destination element.

.PP
The (V)PSUBD instruction subtracts packed doubleword integers. When an
individual result is too large or too small to be represented in a
doubleword, the result is wrapped around and the low 32 bits are written
to the destination element.

.PP
Note that the (V)PSUBB, (V)PSUBW, and (V)PSUBD instructions can operate
on either unsigned or signed (two's complement notation) packed
integers; however, it does not set bits in the EFLAGS register to
indicate overflow and/or a carry. To prevent undetected overflow
conditions, software must control the ranges of values upon which it
operates.

.PP
In 64-bit mode and not encoded with VEX/EVEX, using a REX prefix in the
form of REX.R permits this instruction to access additional registers
(XMM8-XMM15).

.PP
Legacy SSE version 64-bit operand: The destination operand must be an
MMX technology register and the source operand can be either an MMX
technology register or a 64-bit memory location.

.PP
128-bit Legacy SSE version: The second source operand is an XMM register
or a 128-bit memory location. The first source operand and destination
operands are XMM registers. Bits (MAXVL-1:128) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: The second source operand is an XMM register or
a 128-bit memory location. The first source operand and destination
operands are XMM registers. Bits (MAXVL-1:128) of the destination YMM
register are zeroed.

.PP
VEX.256 encoded versions: The second source operand is an YMM register
or an 256-bit memory location. The first source operand and destination
operands are YMM registers. Bits (MAXVL-1:256) of the corresponding ZMM
register are zeroed.

.PP
EVEX encoded VPSUBD: The second source operand is a ZMM/YMM/XMM
register, a 512/256/128-bit memory location or a 512/256/128-bit vector
broadcasted from a 32/64-bit memory location. The first source operand
and destination operands are ZMM/YMM/XMM registers. The destination is
conditionally updated with writemask k1.

.PP
EVEX encoded VPSUBB/W: The second source operand is a ZMM/YMM/XMM
register, a 512/256/128-bit memory location. The first source operand
and destination operands are ZMM/YMM/XMM registers. The destination is
conditionally updated with writemask k1.

.SH OPERATION
.SS PSUBB (WITH 64-BIT OPERANDS)  href="./psubb:psubw:psubd.html#psubb--with-64-bit-operands-"
class="anchor">¶

.EX
DEST[7:0] := DEST[7:0] − SRC[7:0];
(* Repeat subtract operation for 2nd through 7th byte *)
DEST[63:56] := DEST[63:56] − SRC[63:56];
.EE

.SS PSUBW (WITH 64-BIT OPERANDS)  href="./psubb:psubw:psubd.html#psubw--with-64-bit-operands-"
class="anchor">¶

.EX
DEST[15:0] := DEST[15:0] − SRC[15:0];
(* Repeat subtract operation for 2nd and 3rd word *)
DEST[63:48] := DEST[63:48] − SRC[63:48];
.EE

.SS PSUBD (WITH 64-BIT OPERANDS)  href="./psubb:psubw:psubd.html#psubd--with-64-bit-operands-"
class="anchor">¶

.EX
DEST[31:0] := DEST[31:0] − SRC[31:0];
DEST[63:32] := DEST[63:32] − SRC[63:32];
.EE

.SS PSUBD (WITH 128-BIT OPERANDS)  href="./psubb:psubw:psubd.html#psubd--with-128-bit-operands-"
class="anchor">¶

.EX
DEST[31:0] := DEST[31:0] − SRC[31:0];
(* Repeat subtract operation for 2nd and 3rd doubleword *)
DEST[127:96] := DEST[127:96] − SRC[127:96];
.EE

.SS VPSUBB (EVEX ENCODED VERSIONS)  href="./psubb:psubw:psubd.html#vpsubb--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (16, 128), (32, 256), (64, 512)
FOR j := 0 TO KL-1
    i := j * 8
    IF k1[j] OR *no writemask*
        THEN DEST[i+7:i] := SRC1[i+7:i] - SRC2[i+7:i]
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+7:i] remains unchanged*
                ELSE *zeroing-masking*
                        ; zeroing-masking
                    DEST[i+7:i] = 0
            FI
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0
.EE

.SS VPSUBW (EVEX ENCODED VERSIONS)  href="./psubb:psubw:psubd.html#vpsubw--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (8, 128), (16, 256), (32, 512)
FOR j := 0 TO KL-1
    i := j * 16
    IF k1[j] OR *no writemask*
        THEN DEST[i+15:i] := SRC1[i+15:i] - SRC2[i+15:i]
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+15:i] remains unchanged*
                ELSE *zeroing-masking*
                        ; zeroing-masking
                    DEST[i+15:i] = 0
            FI
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0
.EE

.SS VPSUBD (EVEX ENCODED VERSIONS)  href="./psubb:psubw:psubd.html#vpsubd--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask* THEN
            IF (EVEX.b = 1) AND (SRC2 *is memory*)
                THEN DEST[i+31:i] := SRC1[i+31:i] - SRC2[31:0]
                ELSE DEST[i+31:i] := SRC1[i+31:i] - SRC2[i+31:i]
            FI;
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE *zeroing-masking*
                        ; zeroing-masking
                    DEST[i+31:i] := 0
            FI
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0
.EE

.SS VPSUBB (VEX.256 ENCODED VERSION)  href="./psubb:psubw:psubd.html#vpsubb--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[7:0] := SRC1[7:0]-SRC2[7:0]
DEST[15:8] := SRC1[15:8]-SRC2[15:8]
DEST[23:16] := SRC1[23:16]-SRC2[23:16]
DEST[31:24] := SRC1[31:24]-SRC2[31:24]
DEST[39:32] := SRC1[39:32]-SRC2[39:32]
DEST[47:40] := SRC1[47:40]-SRC2[47:40]
DEST[55:48] := SRC1[55:48]-SRC2[55:48]
DEST[63:56] := SRC1[63:56]-SRC2[63:56]
DEST[71:64] := SRC1[71:64]-SRC2[71:64]
DEST[79:72] := SRC1[79:72]-SRC2[79:72]
DEST[87:80] := SRC1[87:80]-SRC2[87:80]
DEST[95:88] := SRC1[95:88]-SRC2[95:88]
DEST[103:96] := SRC1[103:96]-SRC2[103:96]
DEST[111:104] := SRC1[111:104]-SRC2[111:104]
DEST[119:112] := SRC1[119:112]-SRC2[119:112]
DEST[127:120] := SRC1[127:120]-SRC2[127:120]
DEST[135:128] := SRC1[135:128]-SRC2[135:128]
DEST[143:136] := SRC1[143:136]-SRC2[143:136]
DEST[151:144] := SRC1[151:144]-SRC2[151:144]
DEST[159:152] := SRC1[159:152]-SRC2[159:152]
DEST[167:160] := SRC1[167:160]-SRC2[167:160]
DEST[175:168] := SRC1[175:168]-SRC2[175:168]
DEST[183:176] := SRC1[183:176]-SRC2[183:176]
DEST[191:184] := SRC1[191:184]-SRC2[191:184]
DEST[199:192] := SRC1[199:192]-SRC2[199:192]
DEST[207:200] := SRC1[207:200]-SRC2[207:200]
DEST[215:208] := SRC1[215:208]-SRC2[215:208]
DEST[223:216] := SRC1[223:216]-SRC2[223:216]
DEST[231:224] := SRC1[231:224]-SRC2[231:224]
DEST[239:232] := SRC1[239:232]-SRC2[239:232]
DEST[247:240] := SRC1[247:240]-SRC2[247:240]
DEST[255:248] := SRC1[255:248]-SRC2[255:248]
DEST[MAXVL-1:256] := 0
.EE

.SS VPSUBB (VEX.128 ENCODED VERSION)  href="./psubb:psubw:psubd.html#vpsubb--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[7:0] := SRC1[7:0]-SRC2[7:0]
DEST[15:8] := SRC1[15:8]-SRC2[15:8]
DEST[23:16] := SRC1[23:16]-SRC2[23:16]
DEST[31:24] := SRC1[31:24]-SRC2[31:24]
DEST[39:32] := SRC1[39:32]-SRC2[39:32]
DEST[47:40] := SRC1[47:40]-SRC2[47:40]
DEST[55:48] := SRC1[55:48]-SRC2[55:48]
DEST[63:56] := SRC1[63:56]-SRC2[63:56]
DEST[71:64] := SRC1[71:64]-SRC2[71:64]
DEST[79:72] := SRC1[79:72]-SRC2[79:72]
DEST[87:80] := SRC1[87:80]-SRC2[87:80]
DEST[95:88] := SRC1[95:88]-SRC2[95:88]
DEST[103:96] := SRC1[103:96]-SRC2[103:96]
DEST[111:104] := SRC1[111:104]-SRC2[111:104]
DEST[119:112] := SRC1[119:112]-SRC2[119:112]
DEST[127:120] := SRC1[127:120]-SRC2[127:120]
DEST[MAXVL-1:128] := 0
.EE

.SS PSUBB (128-BIT LEGACY SSE VERSION)  href="./psubb:psubw:psubd.html#psubb--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[7:0] := DEST[7:0]-SRC[7:0]
DEST[15:8] := DEST[15:8]-SRC[15:8]
DEST[23:16] := DEST[23:16]-SRC[23:16]
DEST[31:24] := DEST[31:24]-SRC[31:24]
DEST[39:32] := DEST[39:32]-SRC[39:32]
DEST[47:40] := DEST[47:40]-SRC[47:40]
DEST[55:48] := DEST[55:48]-SRC[55:48]
DEST[63:56] := DEST[63:56]-SRC[63:56]
DEST[71:64] := DEST[71:64]-SRC[71:64]
DEST[79:72] := DEST[79:72]-SRC[79:72]
DEST[87:80] := DEST[87:80]-SRC[87:80]
DEST[95:88] := DEST[95:88]-SRC[95:88]
DEST[103:96] := DEST[103:96]-SRC[103:96]
DEST[111:104] := DEST[111:104]-SRC[111:104]
DEST[119:112] := DEST[119:112]-SRC[119:112]
DEST[127:120] := DEST[127:120]-SRC[127:120]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS VPSUBW (VEX.256 ENCODED VERSION)  href="./psubb:psubw:psubd.html#vpsubw--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[15:0] := SRC1[15:0]-SRC2[15:0]
DEST[31:16] := SRC1[31:16]-SRC2[31:16]
DEST[47:32] := SRC1[47:32]-SRC2[47:32]
DEST[63:48] := SRC1[63:48]-SRC2[63:48]
DEST[79:64] := SRC1[79:64]-SRC2[79:64]
DEST[95:80] := SRC1[95:80]-SRC2[95:80]
DEST[111:96] := SRC1[111:96]-SRC2[111:96]
DEST[127:112] := SRC1[127:112]-SRC2[127:112]
DEST[143:128] := SRC1[143:128]-SRC2[143:128]
DEST[159:144] := SRC1[159:144]-SRC2[159:144]
DEST[175:160] := SRC1[175:160]-SRC2[175:160]
DEST[191:176] := SRC1[191:176]-SRC2[191:176]
DEST[207:192] := SRC1207:192]-SRC2[207:192]
DEST[223:208] := SRC1[223:208]-SRC2[223:208]
DEST[239:224] := SRC1[239:224]-SRC2[239:224]
DEST[255:240] := SRC1[255:240]-SRC2[255:240]
DEST[MAXVL-1:256] := 0
.EE

.SS VPSUBW (VEX.128 ENCODED VERSION)  href="./psubb:psubw:psubd.html#vpsubw--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[15:0] := SRC1[15:0]-SRC2[15:0]
DEST[31:16] := SRC1[31:16]-SRC2[31:16]
DEST[47:32] := SRC1[47:32]-SRC2[47:32]
DEST[63:48] := SRC1[63:48]-SRC2[63:48]
DEST[79:64] := SRC1[79:64]-SRC2[79:64]
DEST[95:80] := SRC1[95:80]-SRC2[95:80]
DEST[111:96] := SRC1[111:96]-SRC2[111:96]
DEST[127:112] := SRC1[127:112]-SRC2[127:112]
DEST[MAXVL-1:128] := 0
.EE

.SS PSUBW (128-BIT LEGACY SSE VERSION)  href="./psubb:psubw:psubd.html#psubw--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[15:0] := DEST[15:0]-SRC[15:0]
DEST[31:16] := DEST[31:16]-SRC[31:16]
DEST[47:32] := DEST[47:32]-SRC[47:32]
DEST[63:48] := DEST[63:48]-SRC[63:48]
DEST[79:64] := DEST[79:64]-SRC[79:64]
DEST[95:80] := DEST[95:80]-SRC[95:80]
DEST[111:96] := DEST[111:96]-SRC[111:96]
DEST[127:112] := DEST[127:112]-SRC[127:112]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS VPSUBD (VEX.256 ENCODED VERSION)  href="./psubb:psubw:psubd.html#vpsubd--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0]-SRC2[31:0]
DEST[63:32] := SRC1[63:32]-SRC2[63:32]
DEST[95:64] := SRC1[95:64]-SRC2[95:64]
DEST[127:96] := SRC1[127:96]-SRC2[127:96]
DEST[159:128] := SRC1[159:128]-SRC2[159:128]
DEST[191:160] := SRC1[191:160]-SRC2[191:160]
DEST[223:192] := SRC1[223:192]-SRC2[223:192]
DEST[255:224] := SRC1[255:224]-SRC2[255:224]
DEST[MAXVL-1:256] := 0
.EE

.SS VPSUBD (VEX.128 ENCODED VERSION)  href="./psubb:psubw:psubd.html#vpsubd--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0]-SRC2[31:0]
DEST[63:32] := SRC1[63:32]-SRC2[63:32]
DEST[95:64] := SRC1[95:64]-SRC2[95:64]
DEST[127:96] := SRC1[127:96]-SRC2[127:96]
DEST[MAXVL-1:128] := 0
.EE

.SS PSUBD (128-BIT LEGACY SSE VERSION)  href="./psubb:psubw:psubd.html#psubd--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[31:0] := DEST[31:0]-SRC[31:0]
DEST[63:32] := DEST[63:32]-SRC[63:32]
DEST[95:64] := DEST[95:64]-SRC[95:64]
DEST[127:96] := DEST[127:96]-SRC[127:96]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENTS <a
href="./psubb:psubw:psubd.html#intel-c-c++-compiler-intrinsic-equivalents"
class="anchor">¶

.EX
VPSUBB __m512i _mm512_sub_epi8(__m512i a, __m512i b);

VPSUBB __m512i _mm512_mask_sub_epi8(__m512i s, __mmask64 k, __m512i a, __m512i b);

VPSUBB __m512i _mm512_maskz_sub_epi8( __mmask64 k, __m512i a, __m512i b);

VPSUBB __m256i _mm256_mask_sub_epi8(__m256i s, __mmask32 k, __m256i a, __m256i b);

VPSUBB __m256i _mm256_maskz_sub_epi8( __mmask32 k, __m256i a, __m256i b);

VPSUBB __m128i _mm_mask_sub_epi8(__m128i s, __mmask16 k, __m128i a, __m128i b);

VPSUBB __m128i _mm_maskz_sub_epi8( __mmask16 k, __m128i a, __m128i b);

VPSUBW __m512i _mm512_sub_epi16(__m512i a, __m512i b);

VPSUBW __m512i _mm512_mask_sub_epi16(__m512i s, __mmask32 k, __m512i a, __m512i b);

VPSUBW __m512i _mm512_maskz_sub_epi16( __mmask32 k, __m512i a, __m512i b);

VPSUBW __m256i _mm256_mask_sub_epi16(__m256i s, __mmask16 k, __m256i a, __m256i b);

VPSUBW __m256i _mm256_maskz_sub_epi16( __mmask16 k, __m256i a, __m256i b);

VPSUBW __m128i _mm_mask_sub_epi16(__m128i s, __mmask8 k, __m128i a, __m128i b);

VPSUBW __m128i _mm_maskz_sub_epi16( __mmask8 k, __m128i a, __m128i b);

VPSUBD __m512i _mm512_sub_epi32(__m512i a, __m512i b);

VPSUBD __m512i _mm512_mask_sub_epi32(__m512i s, __mmask16 k, __m512i a, __m512i b);

VPSUBD __m512i _mm512_maskz_sub_epi32( __mmask16 k, __m512i a, __m512i b);

VPSUBD __m256i _mm256_mask_sub_epi32(__m256i s, __mmask8 k, __m256i a, __m256i b);

VPSUBD __m256i _mm256_maskz_sub_epi32( __mmask8 k, __m256i a, __m256i b);

VPSUBD __m128i _mm_mask_sub_epi32(__m128i s, __mmask8 k, __m128i a, __m128i b);

VPSUBD __m128i _mm_maskz_sub_epi32( __mmask8 k, __m128i a, __m128i b);

PSUBB __m64 _mm_sub_pi8(__m64 m1, __m64 m2)

(V)PSUBB __m128i _mm_sub_epi8 ( __m128i a, __m128i b)

VPSUBB __m256i _mm256_sub_epi8 ( __m256i a, __m256i b)

PSUBW __m64 _mm_sub_pi16(__m64 m1, __m64 m2)

(V)PSUBW __m128i _mm_sub_epi16 ( __m128i a, __m128i b)

VPSUBW __m256i _mm256_sub_epi16 ( __m256i a, __m256i b)

PSUBD __m64 _mm_sub_pi32(__m64 m1, __m64 m2)

(V)PSUBD __m128i _mm_sub_epi32 ( __m128i a, __m128i b)

VPSUBD __m256i _mm256_sub_epi32 ( __m256i a, __m256i b)
.EE

.SH FLAGS AFFECTED
None.

.SH NUMERIC EXCEPTIONS  href="./psubb:psubw:psubd.html#numeric-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Table
2-21, “Type 4 Class Exception Conditions.”

.PP
EVEX-encoded VPSUBD, see Table 2-49,
“Type E4 Class Exception Conditions.”

.PP
EVEX-encoded VPSUBB/W, see Exceptions Type E4.nb in
Table 2-49, “Type E4 Class Exception
Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
