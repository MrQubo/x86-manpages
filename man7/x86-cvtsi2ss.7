'\" t
.nh
.TH "X86-CVTSI2SS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
CVTSI2SS - CONVERT DOUBLEWORD INTEGER TO SCALAR SINGLE PRECISION FLOATING-POINT VALUE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
F3 0F 2A /r CVTSI2SS xmm1, r/m32
T}	A	V/V	SSE	T{
Convert one signed doubleword integer from r/m32 to one single precision floating-point value in xmm1.
T}
T{
F3 REX.W 0F 2A /r CVTSI2SS xmm1, r/m64
T}	A	V/N.E.	SSE	T{
Convert one signed quadword integer from r/m64 to one single precision floating-point value in xmm1.
T}
T{
VEX.LIG.F3.0F.W0 2A /r VCVTSI2SS xmm1, xmm2, r/m32
T}	B	V/V	AVX	T{
Convert one signed doubleword integer from r/m32 to one single precision floating-point value in xmm1.
T}
T{
VEX.LIG.F3.0F.W1 2A /r VCVTSI2SS xmm1, xmm2, r/m64
T}	B	V/N.E.1	AVX	T{
Convert one signed quadword integer from r/m64 to one single precision floating-point value in xmm1.
T}
T{
EVEX.LLIG.F3.0F.W0 2A /r VCVTSI2SS xmm1, xmm2, r/m32{er}
T}	C	V/V	AVX512F	T{
Convert one signed doubleword integer from r/m32 to one single precision floating-point value in xmm1.
T}
T{
EVEX.LLIG.F3.0F.W1 2A /r VCVTSI2SS xmm1, xmm2, r/m64{er}
T}	C	V/N.E.1	AVX512F	T{
Convert one signed quadword integer from r/m64 to one single precision floating-point value in xmm1.
T}
.TE

.PP
.RS

.PP
1\&. VEX.W1/EVEX.W1 in non-64 bit is ignored; the instructions behaves
as if the W0 version is used.

.RE

.SH INSTRUCTION OPERAND ENCODING  href="cvtsi2ss.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Converts a signed doubleword integer (or signed quadword integer if
operand size is 64 bits) in the “convert-from” source operand to a
single precision floating-point value in the destination operand (first
operand). The “convert-from” source operand can be a general-purpose
register or a memory location. The destination operand is an XMM
register. The result is stored in the low doubleword of the destination
operand, and the upper three doublewords are left unchanged. When a
conversion is inexact, the value returned is rounded according to the
rounding control bits in the MXCSR register or the embedded rounding
control bits.

.PP
128-bit Legacy SSE version: In 64-bit mode, Use of the REX.W prefix
promotes the instruction to use 64-bit input value. The “convert-from”
source operand (the second operand) is a general-purpose register or
memory location. Bits (MAXVL-1:32) of the corresponding destination
register remain unchanged.

.PP
VEX.128 and EVEX encoded versions: The “convert-from” source operand
(the third operand) can be a general-purpose register or a memory
location. The first source and destination operands are XMM registers.
Bits (127:32) of the XMM register destination are copied from
corresponding bits in the first source operand. Bits (MAXVL-1:128) of
the destination register are zeroed.

.PP
EVEX encoded version: the converted result in written to the low
doubleword element of the destination under the writemask.

.PP
Software should ensure VCVTSI2SS is encoded with VEX.L=0. Encoding
VCVTSI2SS with VEX.L=1 may encounter unpredictable behavior across
different processor generations.

.SH OPERATION
.SS VCVTSI2SS (EVEX ENCODED VERSION)  href="cvtsi2ss.html#vcvtsi2ss--evex-encoded-version-"
class="anchor">¶

.EX
IF (SRC2 *is register*) AND (EVEX.b = 1)
    THEN
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(EVEX.RC);
    ELSE
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(MXCSR.RC);
FI;
IF 64-Bit Mode And OperandSize = 64
THEN
    DEST[31:0] := Convert_Integer_To_Single_Precision_Floating_Point(SRC[63:0]);
ELSE
    DEST[31:0] := Convert_Integer_To_Single_Precision_Floating_Point(SRC[31:0]);
FI;
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS VCVTSI2SS (VEX.128 ENCODED VERSION)  href="cvtsi2ss.html#vcvtsi2ss--vex-128-encoded-version-"
class="anchor">¶

.EX
IF 64-Bit Mode And OperandSize = 64
THEN
    DEST[31:0] := Convert_Integer_To_Single_Precision_Floating_Point(SRC[63:0]);
ELSE
    DEST[31:0] := Convert_Integer_To_Single_Precision_Floating_Point(SRC[31:0]);
FI;
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS CVTSI2SS (128-BIT LEGACY SSE VERSION)  href="cvtsi2ss.html#cvtsi2ss--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
IF 64-Bit Mode And OperandSize = 64
THEN
    DEST[31:0] := Convert_Integer_To_Single_Precision_Floating_Point(SRC[63:0]);
ELSE
    DEST[31:0] :=Convert_Integer_To_Single_Precision_Floating_Point(SRC[31:0]);
FI;
DEST[MAXVL-1:32] (Unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="cvtsi2ss.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VCVTSI2SS __m128 _mm_cvti32_ss(__m128 s, int a);

VCVTSI2SS __m128 _mm_cvt_roundi32_ss(__m128 s, int a, int r);

VCVTSI2SS __m128 _mm_cvti64_ss(__m128 s, __int64 a);

VCVTSI2SS __m128 _mm_cvt_roundi64_ss(__m128 s, __int64 a, int r);

CVTSI2SS __m128 _mm_cvtsi64_ss(__m128 s, __int64 a);

CVTSI2SS __m128 _mm_cvtsi32_ss(__m128 a, int b);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="cvtsi2ss.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Precision.

.SH OTHER EXCEPTIONS
VEX-encoded instructions, see Table
2-20, “Type 3 Class Exception Conditions.”

.PP
EVEX-encoded instructions, see Table
2-48, “Type E3NF Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
