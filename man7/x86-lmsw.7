'\" t
.nh
.TH "X86-LMSW" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
LMSW - LOAD MACHINE STATUS WORD
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
0F 01 /6	LMSW r/m16	M	Valid	Valid	T{
Loads r/m16 in machine status word of CR0.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
M	ModRM:r/m (r)	N/A	N/A	N/A
.TE

.SH DESCRIPTION
Loads the source operand into the machine status word, bits 0 through 15
of register CR0. The source operand can be a 16-bit general-purpose
register or a memory location. Only the low-order 4 bits of the source
operand (which contains the PE, MP, EM, and TS flags) are loaded into
CR0. The PG, CD, NW, AM, WP, NE, and ET flags of CR0 are not affected.
The operand-size attribute has no effect on this instruction.

.PP
If the PE flag of the source operand (bit 0) is set to 1, the
instruction causes the processor to switch to protected mode. While in
protected mode, the LMSW instruction cannot be used to clear the PE flag
and force a switch back to real-address mode.

.PP
The LMSW instruction is provided for use in operating-system software;
it should not be used in application programs. In protected or
virtual-8086 mode, it can only be executed at CPL 0.

.PP
This instruction is provided for compatibility with the Intel 286
processor; programs and procedures intended to run on IA-32 and Intel 64
processors beginning with Intel386 processors should use the MOV
(control registers) instruction to load the whole CR0 register. The MOV
CR0 instruction can be used to set and clear the PE flag in CR0,
allowing a procedure or program to switch between protected and
real-address modes.

.PP
This instruction is a serializing instruction.

.PP
This instruction’s operation is the same in non-64-bit modes and 64-bit
mode. Note that the operand size is fixed at 16 bits.

.PP
See “Changes to Instruction Behavior in VMX Non-Root Operation” in
Chapter 26 of the Intel® 64 and IA-32 Architectures Software
Developer’s Manual, Volume 3C, for more information about the behavior
of this instruction in VMX non-root operation.

.SH OPERATION
.EX
CR0[0:3] := SRC[0:3];
.EE

.SH FLAGS AFFECTED
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the current privilege level is not 0.
T}
	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
The LMSW instruction is not recognized in virtual-8086 mode.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the current privilege level is not 0.
T}
	T{
If the memory address is in a non-canonical form.
T}
#PF(fault-code)	If a page fault occurs.
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
