'\" t
.nh
.TH "X86-MOVUPD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MOVUPD - MOVE UNALIGNED PACKED DOUBLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 10 /r MOVUPD xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Move unaligned packed double precision floating-point from xmm2/mem to xmm1.
T}
T{
66 0F 11 /r MOVUPD xmm2/m128, xmm1
T}	B	V/V	SSE2	T{
Move unaligned packed double precision floating-point from xmm1 to xmm2/mem.
T}
T{
VEX.128.66.0F.WIG 10 /r VMOVUPD xmm1, xmm2/m128
T}	A	V/V	AVX	T{
Move unaligned packed double precision floating-point from xmm2/mem to xmm1.
T}
T{
VEX.128.66.0F.WIG 11 /r VMOVUPD xmm2/m128, xmm1
T}	B	V/V	AVX	T{
Move unaligned packed double precision floating-point from xmm1 to xmm2/mem.
T}
T{
VEX.256.66.0F.WIG 10 /r VMOVUPD ymm1, ymm2/m256
T}	A	V/V	AVX	T{
Move unaligned packed double precision floating-point from ymm2/mem to ymm1.
T}
T{
VEX.256.66.0F.WIG 11 /r VMOVUPD ymm2/m256, ymm1
T}	B	V/V	AVX	T{
Move unaligned packed double precision floating-point from ymm1 to ymm2/mem.
T}
T{
EVEX.128.66.0F.W1 10 /r VMOVUPD xmm1 {k1}{z}, xmm2/m128
T}	C	V/V	AVX512VL AVX512F	T{
Move unaligned packed double precision floating-point from xmm2/m128 to xmm1 using writemask k1.
T}
T{
EVEX.128.66.0F.W1 11 /r VMOVUPD xmm2/m128 {k1}{z}, xmm1
T}	D	V/V	AVX512VL AVX512F	T{
Move unaligned packed double precision floating-point from xmm1 to xmm2/m128 using writemask k1.
T}
T{
EVEX.256.66.0F.W1 10 /r VMOVUPD ymm1 {k1}{z}, ymm2/m256
T}	C	V/V	AVX512VL AVX512F	T{
Move unaligned packed double precision floating-point from ymm2/m256 to ymm1 using writemask k1.
T}
T{
EVEX.256.66.0F.W1 11 /r VMOVUPD ymm2/m256 {k1}{z}, ymm1
T}	D	V/V	AVX512VL AVX512F	T{
Move unaligned packed double precision floating-point from ymm1 to ymm2/m256 using writemask k1.
T}
T{
EVEX.512.66.0F.W1 10 /r VMOVUPD zmm1 {k1}{z}, zmm2/m512
T}	C	V/V	AVX512F	T{
Move unaligned packed double precision floating-point values from zmm2/m512 to zmm1 using writemask k1.
T}
T{
EVEX.512.66.0F.W1 11 /r VMOVUPD zmm2/m512 {k1}{z}, zmm1
T}	D	V/V	AVX512F	T{
Move unaligned packed double precision floating-point values from zmm1 to zmm2/m512 using writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
C	Full Mem	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
D	Full Mem	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SH DESCRIPTION
Note: VEX.vvvv and EVEX.vvvv is reserved and must be 1111b otherwise
instructions will #UD.

.PP
EVEX.512 encoded version:

.PP
Moves 512 bits of packed double precision floating-point values from the
source operand (second operand) to the destination operand (first
operand). This instruction can be used to load a ZMM register from a
float64 memory location, to store the contents of a ZMM register into a
memory. The destination operand is updated according to the writemask.

.PP
VEX.256 encoded version:

.PP
Moves 256 bits of packed double precision floating-point values from the
source operand (second operand) to the destination operand (first
operand). This instruction can be used to load a YMM register from a
256-bit memory location, to store the contents of a YMM register into a
256-bit memory location, or to move data between two YMM registers. Bits
(MAXVL-1:256) of the destination register are zeroed.

.PP
128-bit versions:

.PP
Moves 128 bits of packed double precision floating-point values from the
source operand (second operand) to the destination operand (first
operand). This instruction can be used to load an XMM register from a
128-bit memory location, to store the contents of an XMM register into a
128-bit memory location, or to move data between two XMM registers.

.PP
128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding
destination register remain unchanged.

.PP
When the source or destination operand is a memory operand, the operand
may be unaligned on a 16-byte boundary without causing a
general-protection exception (#GP) to be generated

.PP
VEX.128 and EVEX.128 encoded versions: Bits (MAXVL-1:128) of the
destination register are zeroed.

.SH OPERATION
.SS VMOVUPD (EVEX ENCODED VERSIONS, REGISTER-COPY FORM) <a
href="movupd.html#vmovupd--evex-encoded-versions--register-copy-form-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := SRC[i+63:i]
        ELSE
            IF *merging-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE DEST[i+63:i] := 0 ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VMOVUPD (EVEX ENCODED VERSIONS, STORE-FORM)  href="movupd.html#vmovupd--evex-encoded-versions--store-form-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := SRC[i+63:i]
        ELSE *DEST[i+63:i] remains unchanged*
            ; merging-masking
    FI;
ENDFOR;
.EE

.SS VMOVUPD (EVEX ENCODED VERSIONS, LOAD-FORM)  href="movupd.html#vmovupd--evex-encoded-versions--load-form-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := SRC[i+63:i]
        ELSE
            IF *merging-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE DEST[i+63:i] := 0 ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VMOVUPD (VEX.256 ENCODED VERSION, LOAD - AND REGISTER COPY) <a
href="movupd.html#vmovupd--vex-256-encoded-version--load---and-register-copy-"
class="anchor">¶

.EX
DEST[255:0] := SRC[255:0]
DEST[MAXVL-1:256] := 0
.EE

.SS VMOVUPD (VEX.256 ENCODED VERSION, STORE-FORM)  href="movupd.html#vmovupd--vex-256-encoded-version--store-form-"
class="anchor">¶

.EX
DEST[255:0] := SRC[255:0]
.EE

.SS VMOVUPD (VEX.128 ENCODED VERSION)  href="movupd.html#vmovupd--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[127:0] := SRC[127:0]
DEST[MAXVL-1:128] := 0
.EE

.SS MOVUPD (128-BIT LOAD- AND REGISTER-COPY- FORM LEGACY SSE VERSION) <a
href="movupd.html#movupd--128-bit-load--and-register-copy--form-legacy-sse-version-"
class="anchor">¶

.EX
DEST[127:0] := SRC[127:0]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS (V)MOVUPD (128-BIT STORE-FORM VERSION)  href="movupd.html#-v-movupd--128-bit-store-form-version-"
class="anchor">¶

.EX
DEST[127:0] := SRC[127:0]
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="movupd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VMOVUPD __m512d _mm512_loadu_pd( void * s);

VMOVUPD __m512d _mm512_mask_loadu_pd(__m512d a, __mmask8 k, void * s);

VMOVUPD __m512d _mm512_maskz_loadu_pd( __mmask8 k, void * s);

VMOVUPD void _mm512_storeu_pd( void * d, __m512d a);

VMOVUPD void _mm512_mask_storeu_pd( void * d, __mmask8 k, __m512d a);

VMOVUPD __m256d _mm256_mask_loadu_pd(__m256d s, __mmask8 k, void * m);

VMOVUPD __m256d _mm256_maskz_loadu_pd( __mmask8 k, void * m);

VMOVUPD void _mm256_mask_storeu_pd( void * d, __mmask8 k, __m256d a);

VMOVUPD __m128d _mm_mask_loadu_pd(__m128d s, __mmask8 k, void * m);

VMOVUPD __m128d _mm_maskz_loadu_pd( __mmask8 k, void * m);

VMOVUPD void _mm_mask_storeu_pd( void * d, __mmask8 k, __m128d a);

MOVUPD __m256d _mm256_loadu_pd (double * p);

MOVUPD void _mm256_storeu_pd( double *p, __m256d a);

MOVUPD __m128d _mm_loadu_pd (double * p);

MOVUPD void _mm_storeu_pd( double *p, __m128d a);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="movupd.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Table
2-21, “Type 4 Class Exception Conditions.”

.PP
Note treatment of #AC varies; additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.vvvv != 1111B.
.TE

.PP
EVEX-encoded instruction, see Exceptions Type E4.nb in
Table 2-49, “Type E4 Class Exception
Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
