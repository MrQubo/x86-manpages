'\" t
.nh
.TH "X86-MOVAPS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MOVAPS - MOVE ALIGNED PACKED SINGLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
NP 0F 28 /r MOVAPS xmm1, xmm2/m128
T}	A	V/V	SSE	T{
Move aligned packed single precision floating-point values from xmm2/mem to xmm1.
T}
T{
NP 0F 29 /r MOVAPS xmm2/m128, xmm1
T}	B	V/V	SSE	T{
Move aligned packed single precision floating-point values from xmm1 to xmm2/mem.
T}
T{
VEX.128.0F.WIG 28 /r VMOVAPS xmm1, xmm2/m128
T}	A	V/V	AVX	T{
Move aligned packed single precision floating-point values from xmm2/mem to xmm1.
T}
T{
VEX.128.0F.WIG 29 /r VMOVAPS xmm2/m128, xmm1
T}	B	V/V	AVX	T{
Move aligned packed single precision floating-point values from xmm1 to xmm2/mem.
T}
T{
VEX.256.0F.WIG 28 /r VMOVAPS ymm1, ymm2/m256
T}	A	V/V	AVX	T{
Move aligned packed single precision floating-point values from ymm2/mem to ymm1.
T}
T{
VEX.256.0F.WIG 29 /r VMOVAPS ymm2/m256, ymm1
T}	B	V/V	AVX	T{
Move aligned packed single precision floating-point values from ymm1 to ymm2/mem.
T}
T{
EVEX.128.0F.W0 28 /r VMOVAPS xmm1 {k1}{z}, xmm2/m128
T}	C	V/V	AVX512VL AVX512F	T{
Move aligned packed single precision floating-point values from xmm2/m128 to xmm1 using writemask k1.
T}
T{
EVEX.256.0F.W0 28 /r VMOVAPS ymm1 {k1}{z}, ymm2/m256
T}	C	V/V	AVX512VL AVX512F	T{
Move aligned packed single precision floating-point values from ymm2/m256 to ymm1 using writemask k1.
T}
T{
EVEX.512.0F.W0 28 /r VMOVAPS zmm1 {k1}{z}, zmm2/m512
T}	C	V/V	AVX512F	T{
Move aligned packed single precision floating-point values from zmm2/m512 to zmm1 using writemask k1.
T}
T{
EVEX.128.0F.W0 29 /r VMOVAPS xmm2/m128 {k1}{z}, xmm1
T}	D	V/V	AVX512VL AVX512F	T{
Move aligned packed single precision floating-point values from xmm1 to xmm2/m128 using writemask k1.
T}
T{
EVEX.256.0F.W0 29 /r VMOVAPS ymm2/m256 {k1}{z}, ymm1
T}	D	V/V	AVX512VL AVX512F	T{
Move aligned packed single precision floating-point values from ymm1 to ymm2/m256 using writemask k1.
T}
T{
EVEX.512.0F.W0 29 /r VMOVAPS zmm2/m512 {k1}{z}, zmm1
T}	D	V/V	AVX512F	T{
Move aligned packed single precision floating-point values from zmm1 to zmm2/m512 using writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
C	Full Mem	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
D	Full Mem	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SH DESCRIPTION
Moves 4, 8 or 16 single precision floating-point values from the source
operand (second operand) to the destination operand (first operand).
This instruction can be used to load an XMM, YMM or ZMM register from an
128-bit, 256-bit or 512-bit memory location, to store the contents of an
XMM, YMM or ZMM register into a 128-bit, 256-bit or 512-bit memory
location, or to move data between two XMM, two YMM or two ZMM registers.

.PP
When the source or destination operand is a memory operand, the operand
must be aligned on a 16-byte (128-bit version), 32-byte (VEX.256 encoded
version) or 64-byte (EVEX.512 encoded version) boundary or a
general-protection exception (#GP) will be generated. For EVEX.512
encoded versions, the operand must be aligned to the size of the memory
operand. To move single precision floating-point values to and from
unaligned memory locations, use the VMOVUPS instruction.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.PP
EVEX.512 encoded version:

.PP
Moves 512 bits of packed single precision floating-point values from the
source operand (second operand) to the destination operand (first
operand). This instruction can be used to load a ZMM register from a
512-bit float32 memory location, to store the contents of a ZMM register
into a float32 memory location, or to move data between two ZMM
registers. When the source or destination operand is a memory operand,
the operand must be aligned on a 64-byte boundary or a
general-protection exception (#GP) will be generated. To move single
precision floating-point values to and from unaligned memory locations,
use the VMOVUPS instruction.

.PP
VEX.256 and EVEX.256 encoded version:

.PP
Moves 256 bits of packed single precision floating-point values from the
source operand (second operand) to the destination operand (first
operand). This instruction can be used to load a YMM register from a
256-bit memory location, to store the contents of a YMM register into a
256-bit memory location, or to move data between two YMM registers. When
the source or destination operand is a memory operand, the operand must
be aligned on a 32-byte boundary or a general-protection exception (#GP)
will be generated.

.PP
128-bit versions:

.PP
Moves 128 bits of packed single precision floating-point values from the
source operand (second operand) to the destination operand (first
operand). This instruction can be used to load an XMM register from a
128-bit memory location, to store the contents of an XMM register into a
128-bit memory location, or to move data between two XMM registers. When
the source or destination operand is a memory operand, the operand must
be aligned on a 16-byte boundary or a general-protection exception (#GP)
will be generated. To move single precision floating-point values to and
from unaligned memory locations, use the VMOVUPS instruction.

.PP
128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding ZMM
destination register remain unchanged.

.PP
(E)VEX.128 encoded version: Bits (MAXVL-1:128) of the destination ZMM
register are zeroed.

.SH OPERATION
.SS VMOVAPS (EVEX ENCODED VERSIONS, REGISTER-COPY FORM) <a
href="movaps.html#vmovaps--evex-encoded-versions--register-copy-form-"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i] := SRC[i+31:i]
        ELSE
            IF *merging-masking*
                THEN *DEST[i+31:i] remains unchanged*
                ELSE DEST[i+31:i] := 0 ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VMOVAPS (EVEX ENCODED VERSIONS, STORE FORM)  href="movaps.html#vmovaps--evex-encoded-versions--store-form-"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i] :=
            SRC[i+31:i]
        ELSE *DEST[i+31:i] remains unchanged*
                ; merging-masking
ENDFOR;
.EE

.SS VMOVAPS (EVEX ENCODED VERSIONS, LOAD FORM)  href="movaps.html#vmovaps--evex-encoded-versions--load-form-"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i] := SRC[i+31:i]
        ELSE
            IF *merging-masking*
                THEN *DEST[i+31:i] remains unchanged*
                ELSE DEST[i+31:i] := 0 ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VMOVAPS (VEX.256 ENCODED VERSION, LOAD - AND REGISTER COPY) <a
href="movaps.html#vmovaps--vex-256-encoded-version--load---and-register-copy-"
class="anchor">¶

.EX
DEST[255:0] := SRC[255:0]
DEST[MAXVL-1:256] := 0
.EE

.SS VMOVAPS (VEX.256 ENCODED VERSION, STORE-FORM)  href="movaps.html#vmovaps--vex-256-encoded-version--store-form-"
class="anchor">¶

.EX
DEST[255:0] := SRC[255:0]
.EE

.SS VMOVAPS (VEX.128 ENCODED VERSION, LOAD - AND REGISTER COPY) <a
href="movaps.html#vmovaps--vex-128-encoded-version--load---and-register-copy-"
class="anchor">¶

.EX
DEST[127:0] := SRC[127:0]
DEST[MAXVL-1:128] := 0
.EE

.SS MOVAPS (128-BIT LOAD- AND REGISTER-COPY- FORM LEGACY SSE VERSION) <a
href="movaps.html#movaps--128-bit-load--and-register-copy--form-legacy-sse-version-"
class="anchor">¶

.EX
DEST[127:0] := SRC[127:0]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS (V)MOVAPS (128-BIT STORE-FORM VERSION)  href="movaps.html#-v-movaps--128-bit-store-form-version-"
class="anchor">¶

.EX
DEST[127:0] := SRC[127:0]
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="movaps.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VMOVAPS __m512 _mm512_load_ps( void * m);

VMOVAPS __m512 _mm512_mask_load_ps(__m512 s, __mmask16 k, void * m);

VMOVAPS __m512 _mm512_maskz_load_ps( __mmask16 k, void * m);

VMOVAPS void _mm512_store_ps( void * d, __m512 a);

VMOVAPS void _mm512_mask_store_ps( void * d, __mmask16 k, __m512 a);

VMOVAPS __m256 _mm256_mask_load_ps(__m256 a, __mmask8 k, void * s);

VMOVAPS __m256 _mm256_maskz_load_ps( __mmask8 k, void * s);

VMOVAPS void _mm256_mask_store_ps( void * d, __mmask8 k, __m256 a);

VMOVAPS __m128 _mm_mask_load_ps(__m128 a, __mmask8 k, void * s);

VMOVAPS __m128 _mm_maskz_load_ps( __mmask8 k, void * s);

VMOVAPS void _mm_mask_store_ps( void * d, __mmask8 k, __m128 a);

MOVAPS __m256 _mm256_load_ps (float * p);

MOVAPS void _mm256_store_ps(float * p, __m256 a);

MOVAPS __m128 _mm_load_ps (float * p);

MOVAPS void _mm_store_ps(float * p, __m128 a);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="movaps.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Exceptions Type1.SSE in
Table 2-18, “Type 1 Class Exception
Conditions,” additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.vvvv != 1111B.
.TE

.PP
EVEX-encoded instruction, see Table
2-44, “Type E1 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
