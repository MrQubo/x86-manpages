'\" t
.nh
.TH "X86-MOVNTI" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MOVNTI - STORE DOUBLEWORD USING NON-TEMPORAL HINT
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode / Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
NP 0F C3 /\fIr\fP MOVNTI \fIm32\fP, \fIr32\fP	MR	V/V	SSE2	Move doubleword from \fIr32\fP to \fIm32\fP using non-temporal hint.
NP REX.W + 0F C3 /\fIr\fP MOVNTI \fIm64, r64\fP	MR	V/N.E.	SSE2	Move quadword from \fIr64\fP to \fIm64\fP using non-temporal hint.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
MR	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SH DESCRIPTION
Moves the doubleword integer in the source operand (second operand) to
the destination operand (first operand) using a non-temporal hint to
minimize cache pollution during the write to memory. The source operand
is a general-purpose register. The destination operand is a 32-bit
memory location.

.PP
The non-temporal hint is implemented by using a write combining (WC)
memory type protocol when writing the data to memory. Using this
protocol, the processor does not write the data into the cache
hierarchy, nor does it fetch the corresponding cache line from memory
into the cache hierarchy. The memory type of the region being written to
can override the non-temporal hint, if the memory address specified for
the non-temporal store is in an uncacheable (UC) or write protected (WP)
memory region. For more information on non-temporal stores, see “Caching
of Temporal vs. Non-Temporal Data” in Chapter 10 in the
Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 1.

.PP
Because the WC protocol uses a weakly-ordered memory consistency model,
a fencing operation implemented with the SFENCE or MFENCE instruction
should be used in conjunction with MOVNTI instructions if multiple
processors might use different memory types to read/write the
destination memory locations.

.PP
In 64-bit mode, the instruction’s default operation size is 32 bits. Use
of the REX.R prefix permits access to additional registers (R8-R15). Use
of the REX.W prefix promotes operation to 64 bits. See the summary chart
at the beginning of this section for encoding data and limits.

.SH OPERATION
.EX
DEST := SRC;
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="movnti.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
MOVNTI void _mm_stream_si32 (int *p, int a)

MOVNTI void _mm_stream_si64(__int64 *p, __int64 a)
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="movnti.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments.
T}
#SS(0)	T{
For an illegal address in the SS segment.
T}
#PF(fault-code)	For a page fault.
#UD	If CPUID.01H:EDX.SSE2[bit 26] = 0.
	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If any part of the operand lies outside the effective address space from 0 to FFFFH.
T}
#UD	If CPUID.01H:EDX.SSE2[bit 26] = 0.
	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
Same exceptions as in real address mode.

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#PF(fault-code)	For a page fault.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
#PF(fault-code)	For a page fault.
#UD	If CPUID.01H:EDX.SSE2[bit 26] = 0.
	If the LOCK prefix is used.
#AC(0)	T{
If alignment checking is enabled and an unaligned memory reference is made while the current privilege level is 3.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
