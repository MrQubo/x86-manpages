'\" t
.nh
.TH "X86-KXORW-KXORB-KXORQ-KXORD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
KXORW-KXORB-KXORQ-KXORD - BITWISE LOGICAL XOR MASKS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
VEX.L1.0F.W0 47 /r KXORW k1, k2, k3
T}	RVR	V/V	AVX512F	T{
Bitwise XOR 16-bit masks k2 and k3 and place result in k1.
T}
T{
VEX.L1.66.0F.W0 47 /r KXORB k1, k2, k3
T}	RVR	V/V	AVX512DQ	T{
Bitwise XOR 8-bit masks k2 and k3 and place result in k1.
T}
T{
VEX.L1.0F.W1 47 /r KXORQ k1, k2, k3
T}	RVR	V/V	AVX512BW	T{
Bitwise XOR 64-bit masks k2 and k3 and place result in k1.
T}
T{
VEX.L1.66.0F.W1 47 /r KXORD k1, k2, k3
T}	RVR	V/V	AVX512BW	T{
Bitwise XOR 32-bit masks k2 and k3 and place result in k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="./kxorw:kxorb:kxorq:kxord.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l 
l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP
RVR	ModRM:reg (w)	VEX.1vvv (r)	ModRM:r/m (r, ModRM:[7:6] must be 11b)
.TE

.SH DESCRIPTION  href="./kxorw:kxorb:kxorq:kxord.html#description"
class="anchor">¶

.PP
Performs a bitwise XOR between the vector mask k2 and the vector mask
k3, and writes the result into vector mask k1 (three-operand form).

.SH OPERATION
.SS KXORW
.EX
DEST[15:0] := SRC1[15:0] BITWISE XOR SRC2[15:0]
DEST[MAX_KL-1:16] := 0
.EE

.SS KXORB
.EX
DEST[7:0] := SRC1[7:0] BITWISE XOR SRC2[7:0]
DEST[MAX_KL-1:8] := 0
.EE

.SS KXORQ
.EX
DEST[63:0] := SRC1[63:0] BITWISE XOR SRC2[63:0]
DEST[MAX_KL-1:64] := 0
.EE

.SS KXORD
.EX
DEST[31:0] := SRC1[31:0] BITWISE XOR SRC2[31:0]
DEST[MAX_KL-1:32] := 0
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT <a
href="./kxorw:kxorb:kxorq:kxord.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
KXORW __mmask16 _mm512_kxor(__mmask16 a, __mmask16 b);
.EE

.SH FLAGS AFFECTED  href="./kxorw:kxorb:kxorq:kxord.html#flags-affected"
class="anchor">¶

.PP
None.

.SH SIMD FLOATING-POINT EXCEPTIONS  href="./kxorw:kxorb:kxorq:kxord.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS  href="./kxorw:kxorb:kxorq:kxord.html#other-exceptions"
class="anchor">¶

.PP
See Table 2-63, “TYPE K20 Exception
Definition (VEX-Encoded OpMask Instructions w/o Memory Arg).”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
