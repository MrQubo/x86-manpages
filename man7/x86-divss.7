'\" t
.nh
.TH "X86-DIVSS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
DIVSS - DIVIDE SCALAR SINGLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
F3 0F 5E /r DIVSS xmm1, xmm2/m32
T}	A	V/V	SSE	T{
Divide low single precision floating-point value in xmm1 by low single precision floating-point value in xmm2/m32.
T}
T{
VEX.LIG.F3.0F.WIG 5E /r VDIVSS xmm1, xmm2, xmm3/m32
T}	B	V/V	AVX	T{
Divide low single precision floating-point value in xmm2 by low single precision floating-point value in xmm3/m32.
T}
T{
EVEX.LLIG.F3.0F.W0 5E /r VDIVSS xmm1 {k1}{z}, xmm2, xmm3/m32{er}
T}	C	V/V	AVX512F	T{
Divide low single precision floating-point value in xmm2 by low single precision floating-point value in xmm3/m32.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Divides the low single precision floating-point value in the first
source operand by the low single precision floating-point value in the
second source operand, and stores the single precision floating-point
result in the destination operand. The second source operand can be an
XMM register or a 32-bit memory location.

.PP
128-bit Legacy SSE version: The first source operand and the destination
operand are the same. Bits (MAXVL-1:32) of the corresponding YMM
destination register remain unchanged.

.PP
VEX.128 encoded version: The first source operand is an xmm register
encoded by VEX.vvvv. The three high-order doublewords of the destination
operand are copied from the first source operand. Bits (MAXVL-1:128) of
the destination register are zeroed.

.PP
EVEX.128 encoded version: The first source operand is an xmm register
encoded by EVEX.vvvv. The doubleword elements of the destination operand
at bits 127:32 are copied from the first source operand. Bits
(MAXVL-1:128) of the destination register are zeroed.

.PP
EVEX version: The low doubleword element of the destination is updated
according to the writemask.

.PP
Software should ensure VDIVSS is encoded with VEX.L=0. Encoding VDIVSS
with VEX.L=1 may encounter unpredictable behavior across different
processor generations.

.SH OPERATION
.SS VDIVSS (EVEX ENCODED VERSION)
.EX
IF (EVEX.b = 1) AND SRC2 *is a register*
    THEN
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(EVEX.RC);
    ELSE
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(MXCSR.RC);
FI;
IF k1[0] or *no writemask*
    THEN DEST[31:0] := SRC1[31:0] / SRC2[31:0]
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing-masking
                THEN DEST[31:0] := 0
        FI;
FI;
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS VDIVSS (VEX.128 ENCODED VERSION)  href="divss.html#vdivss--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0] / SRC2[31:0]
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
.EE

.SS DIVSS (128-BIT LEGACY SSE VERSION)  href="divss.html#divss--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[31:0] := DEST[31:0] / SRC[31:0]
DEST[MAXVL-1:32] (Unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="divss.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VDIVSS __m128 _mm_mask_div_ss(__m128 s, __mmask8 k, __m128 a, __m128 b);

VDIVSS __m128 _mm_maskz_div_ss( __mmask8 k, __m128 a, __m128 b);

VDIVSS __m128 _mm_div_round_ss( __m128 a, __m128 b, int);

VDIVSS __m128 _mm_mask_div_round_ss(__m128 s, __mmask8 k, __m128 a, __m128 b, int);

VDIVSS __m128 _mm_maskz_div_round_ss( __mmask8 k, __m128 a, __m128 b, int);

DIVSS __m128 _mm_div_ss(__m128 a, __m128 b);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS
Overflow, Underflow, Invalid, Divide-by-Zero, Precision, Denormal.

.SH OTHER EXCEPTIONS
VEX-encoded instructions, see Table
2-20, “Type 3 Class Exception Conditions.”

.PP
EVEX-encoded instructions, see Table
2-47, “Type E3 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
