'\" t
.nh
.TH "X86-VCVTSH2USI" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VCVTSH2USI - CONVERT LOW FP16 VALUE TO UNSIGNED INTEGER
.TS
allbox;
l l l l l 
l l l l l .
\fBInstruction En Bit Mode Flag Support Instruction En Bit Mode Flag Support 64/32 CPUID Feature Instruction En Bit Mode Flag CPUID Feature Instruction En Bit Mode Flag Op/ 64/32 CPUID Feature Instruction En Bit Mode Flag 64/32 CPUID Feature Instruction En Bit Mode Flag CPUID Feature Instruction En Bit Mode Flag Op/ 64/32 CPUID Feature\fP	\fB\fP	\fBSupport\fP	\fB\fP	\fBDescription\fP
T{
EVEX.LLIG.F3.MAP5.W0 79 /r VCVTSH2USI r32, xmm1/m16 {er}
T}	A	V/V1	AVX512-FP16	T{
Convert the low FP16 element in xmm1/m16 to an unsigned integer and store the result in r32.
T}
T{
EVEX.LLIG.F3.MAP5.W1 79 /r VCVTSH2USI r64, xmm1/m16 {er}
T}	A	V/N.E.	AVX512-FP16	T{
Convert the low FP16 element in xmm1/m16 to an unsigned integer and store the result in r64.
T}
.TE

.PP
.RS

.PP
1\&. Outside of 64b mode, the EVEX.W field is ignored. The instruction
behaves as if W=0 was used.

.RE

.SH INSTRUCTION OPERAND ENCODING  href="vcvtsh2usi.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Scalar	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SS DESCRIPTION
This instruction converts the low FP16 element in the source operand to
an unsigned integer in the destination general purpose register.

.PP
When a conversion is inexact, the value returned is rounded according to
the rounding control bits in the MXCSR register or the embedded rounding
control bits. If a converted result cannot be represented in the
destination format, the floating-point invalid exception is raised, and
if this exception is masked, the integer indefinite value is returned.

.SS OPERATION
.SS VCVTSH2USI DEST, SRC
.EX
// SET_RM() sets the rounding mode used for this instruction.
IF *SRC is a register* and (EVEX.b = 1):
    SET_RM(EVEX.RC)
ELSE:
    SET_RM(MXCSR.RC)
IF 64-mode and OperandSize == 64:
    DEST.qword := Convert_fp16_to_unsigned_integer64(SRC.fp16[0])
ELSE:
    DEST.dword := Convert_fp16_to_unsigned_integer32(SRC.fp16[0])
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vcvtsh2usi.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VCVTSH2USI unsigned int _mm_cvt_roundsh_u32 (__m128h a, int sae);

VCVTSH2USI unsigned __int64 _mm_cvt_roundsh_u64 (__m128h a, int rounding);

VCVTSH2USI unsigned int _mm_cvtsh_u32 (__m128h a);

VCVTSH2USI unsigned __int64 _mm_cvtsh_u64 (__m128h a);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vcvtsh2usi.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Precision.

.SS OTHER EXCEPTIONS
EVEX-encoded instructions, see Table
2-48, “Type E3NF Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
