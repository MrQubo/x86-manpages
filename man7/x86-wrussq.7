'\" t
.nh
.TH "X86-WRUSSD-WRUSSQ" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
WRUSSD-WRUSSQ - WRITE TO USER SHADOW STACK
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 38 F5 !(11):rrr:bbb WRUSSD m32, r32
T}	MR	V/V	CET_SS	Write 4 bytes to shadow stack.
T{
66 REX.W 0F 38 F5 !(11):rrr:bbb WRUSSQ m64, r64
T}	MR	V/N.E.	CET_SS	Write 8 bytes to shadow stack.
.TE

.SH INSTRUCTION OPERAND ENCODING  href="./wrussd:wrussq.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
MR	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SH DESCRIPTION
Writes bytes in register source to a user shadow stack page. The WRUSS
instruction can be executed only if CPL = 0, however the processor
treats its shadow-stack accesses as user accesses.

.SH OPERATION
.EX
IF CR4.CET = 0
    THEN #UD; FI;
IF CPL > 0
    THEN #GP(0); FI;
DEST_LA = Linear_Address(mem operand)
IF (operand size is 64 bit)
    THEN
        (* Destination not 8B aligned *)
        IF DEST_LA[2:0]
            THEN GP(0); FI;
        Shadow_stack_store 8 bytes of SRC to DEST_LA as user-mode access;
    ELSE
        (* Destination not 4B aligned *)
        IF DEST_LA[1:0]
            THEN GP(0); FI;
        Shadow_stack_store 4 bytes of SRC[31:0] to DEST_LA as user-mode access;
FI;
.EE

.SH FLAGS AFFECTED
None.

.SH C/C++ COMPILER INTRINSIC EQUIVALENT  href="./wrussd:wrussq.html#c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
WRUSSD void _wrussd(__int32, void *);

WRUSSQ void _wrussq(__int64, void *);
.EE

.SH PROTECTED MODE EXCEPTIONS  href="./wrussd:wrussq.html#protected-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
	If CR4.CET = 0.
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If destination is located in a non-writeable segment.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
	T{
If linear address of destination is not 4 byte aligned.
T}
	If CPL is not 0.
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	T{
If destination is not a user shadow stack.
T}
	T{
Other terminal and non-terminal faults.
T}
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS  href="./wrussd:wrussq.html#real-address-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
The WRUSS instruction is not recognized in real-address mode.
T}
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS  href="./wrussd:wrussq.html#virtual-8086-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
The WRUSS instruction is not recognized in virtual-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS  href="./wrussd:wrussq.html#compatibility-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
	If CR4.CET = 0.
#GP(0)	T{
If a memory address is in a non-canonical form.
T}
	T{
If linear address of destination is not 4 byte aligned.
T}
	If CPL is not 0.
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#PF(fault-code)	T{
If destination is not a user shadow stack.
T}
	T{
Other terminal and non-terminal faults.
T}
.TE

.SH 64-BIT MODE EXCEPTIONS  href="./wrussd:wrussq.html#64-bit-mode-exceptions"
class="anchor">¶

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If the LOCK prefix is used.
	If CR4.CET = 0.
#GP(0)	T{
If a memory address is in a non-canonical form.
T}
	T{
If linear address of destination is not 4 byte aligned.
T}
	If CPL is not 0.
#PF(fault-code)	T{
If destination is not a user shadow stack.
T}
	T{
Other terminal and non-terminal faults.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
