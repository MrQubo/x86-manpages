'\" t
.nh
.TH "X86-EWB" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
EWB - INVALIDATE AN EPC PAGE AND WRITE OUT TO MAIN MEMORY
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
EAX = 0BH ENCLS[EWB]	IR	V/V	SGX1	T{
This leaf function invalidates an EPC page and writes it out to main memory.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP
Op/En	EAX		RBX	RCX	RDX
IR	EWB (In)	Error code (Out)	Address of an PAGEINFO (In)	Address of the EPC page (In)	Address of a VA slot (In)
.TE

.SS DESCRIPTION
This leaf function copies a page from the EPC to regular main memory. As
part of the copying process, the page is cryptographically protected.
This instruction can only be executed when current privilege level is 0.

.PP
The table below provides additional information on the memory parameter
of EPA leaf function.

.SH EWB MEMORY PARAMETER SEMANTICS
.TS
allbox;
l l l l l 
l l l l l .
\fB\fP	\fB\fP	\fB\fP	\fB\fP	\fB\fP
PAGEINFO	PAGEINFO.SRCPGE	PAGEINFO.PCMD	EPCPAGE	VASLOT
Non-EPC R/W access	Non-EPC R/W access	Non-EPC R/W access	EPC R/W access	EPC R/W access
.TE

.PP
The error codes are:

.SS CONCURRENCY RESTRICTIONS
.SS OPERATION
.SH TEMP VARIABLES IN EWB OPERATIONAL FLOW  href="ewb.html#temp-variables-in-ewb-operational-flow"
class="anchor">¶

.TS
allbox;
l l l l 
l l l l .
\fBName\fP	\fBType\fP	\fBSize (Bytes)\fP	\fBDescription\fP
TMP_SRCPGE	Memory page	4096	
TMP_PCMD	PCMD	128	
TMP_SECS	SECS	4096	
TMP_BPEPOCH	UINT64	8	
TMP_BPREFCOUNT	UINT64	8	
TMP_HEADER	MAC Header	128	
TMP_PCMD_ENCLAVEID	UINT64	8	
TMP_VER	UINT64	8	
TMP_PK	UINT128	16	
.TE

.PP
IF ( (DS:RBX is not 32Byte Aligned) or (DS:RCX is not 4KByte Aligned) )

.PP
THEN #GP(0); FI;

.PP
IF (DS:RCX does not resolve within an EPC)

.PP
THEN #PF(DS:RCX); FI;

.PP
IF (DS:RDX is not 8Byte Aligned)

.PP
THEN #GP(0); FI;

.PP
IF (DS:RDX does not resolve within an EPC)

.PP
THEN #PF(DS:RDX); FI;

.PP
(* EPCPAGE and VASLOT should not resolve to the same EPC page*)

.PP
IF (DS:RCX and DS:RDX resolve to the same EPC page)

.PP
THEN #GP(0); FI;

.PP
TMP_SRCPGE := DS:RBX.SRCPGE;

.PP
(* Note PAGEINFO.PCMD is overlaid on top of PAGEINFO.SECINFO *)

.PP
TMP_PCMD := DS:RBX.PCMD;

.PP
If (DS:RBX.LINADDR ≠ 0) OR (DS:RBX.SECS ≠ 0)

.PP
THEN #GP(0); FI;

.PP
IF ( (DS:TMP_PCMD is not 128Byte Aligned) or (DS:TMP_SRCPGE is not
4KByte Aligned) )

.PP
THEN #GP(0); FI;

.PP
(* Check for concurrent Intel SGX instruction access to the page *)

.PP
IF (Other Intel SGX instruction is accessing page)

.PP
THEN

.PP
IF (&lt;&lt;VMX non-root operation&gt;&gt; AND
&lt;&lt;ENABLE_EPC_VIRTUALIZATION_EXTENSIONS&gt;&gt;)

.PP
THEN

.PP
VMCS.Exit_reason := SGX_CONFLICT;

.PP
VMCS.Exit_qualification.code := EPC_PAGE_CONFLICT_EXCEPTION;

.PP
VMCS.Exit_qualification.error := 0;

.PP
VMCS.Guest-physical_address := &lt;&lt; translation of DS:RCX produced
by paging &gt;&gt;;

.PP
VMCS.Guest-linear_address := DS:RCX;

.PP
Deliver VMEXIT;

.PP
ELSE

.PP
#GP(0);

.PP
FI;

.PP
FI;

.PP
(*Check if the VA Page is being removed or changed*)

.PP
IF (VA Page is being modified)

.PP
THEN #GP(0); FI;

.PP
(* Verify that EPCPAGE and VASLOT page are valid EPC pages and DS:RDX
is VA *)

.PP
IF (EPCM(DS:RCX).VALID = 0)

.PP
THEN #PF(DS:RCX); FI;

.PP
IF ( (EPCM(DS:RDX & ~0FFFH).VALID = 0) or (EPCM(DS:RDX & ~FFFH).PT is
not PT_VA) )

.PP
THEN #PF(DS:RDX); FI;

.PP
(* Perform page-type-specific exception checks *)

.PP
IF ( (EPCM(DS:RCX).PT is PT_REG) or (EPCM(DS:RCX).PT is PT_TCS) or
(EPCM(DS:RCX).PT is PT_TRIM ) or

.PP
(EPCM(DS:RCX).PT is PT_SS_FIRST ) or (EPCM(DS:RCX).PT is
PT_SS_REST))

.PP
THEN

.PP
TMP_SECS = Obtain SECS through EPCM(DS:RCX)

.PP
(* Check that EBLOCK has occurred correctly *)

.PP
IF (EBLOCK is not correct)

.PP
THEN #GP(0); FI;

.PP
FI;

.PP
RFLAGS.ZF,CF,PF,AF,OF,SF := 0;

.PP
RAX := 0;

.PP
(* Zero out TMP_HEADER*)

.PP
TMP_HEADER[ sizeof(TMP_HEADER) - 1 : 0] := 0;

.PP
(* Perform page-type-specific checks *)

.PP
IF ( (EPCM(DS:RCX).PT is PT_REG) or (EPCM(DS:RCX).PT is PT_TCS) or
(EPCM(DS:RCX).PT is PT_TRIM )or

.PP
(EPCM(DS:RCX).PT is PT_SS_FIRST ) or (EPCM(DS:RCX).PT is
PT_SS_REST))

.PP
THEN

.PP
(* check to see if the page is evictable *)

.PP
IF (EPCM(DS:RCX).BLOCKED = 0)

.PP
THEN

.PP
RAX := SGX_PAGE NOT_BLOCKED;

.PP
RFLAGS.ZF := 1;

.PP
GOTO ERROR_EXIT;

.PP
FI;

.PP
(* Check if tracking done correctly *)

.PP
IF (Tracking not correct)

.PP
THEN

.PP
RAX := SGX_NOT_TRACKED;

.PP
RFLAGS.ZF := 1;

.PP
GOTO ERROR_EXIT;

.PP
FI;

.PP
(* Obtain EID to establish cryptographic binding between the paged-out
page and the enclave *)

.PP
TMP_HEADER.EID := TMP_SECS.EID;

.PP
(* Obtain EID as an enclave handle for software *)

.PP
TMP_PCMD_ENCLAVEID := TMP_SECS.EID;

.PP
ELSE IF (EPCM(DS:RCX).PT is PT_SECS)

.PP
(*check that there are no child pages inside the enclave *)

.PP
IF (DS:RCX has an EPC page associated with it)

.PP
THEN

.PP
RAX := SGX_CHILD_PRESENT;

.PP
RFLAGS.ZF := 1;

.PP
GOTO ERROR_EXIT;

.PP
FI:

.PP
(* treat SECS as having a child page when VIRTCHILDCNT is non-zero *)

.PP
IF (&lt;&lt;in VMX non-root operation&gt;&gt; AND

.PP
&lt;&lt;ENABLE_EPC_VIRTUALIZATION_EXTENSIONS&gt;&gt; AND

.PP
(SECS(DS:RCX).VIRTCHILDCNT ≠ 0))

.PP
THEN

.PP
RFLAGS.ZF := 1;

.PP
RAX := SGX_CHILD_PRESENT;

.PP
GOTO ERROR_EXIT;

.PP
FI;

.PP
TMP_HEADER.EID := 0;

.PP
(* Obtain EID as an enclave handle for software *)

.PP
TMP_PCMD_ENCLAVEID := (DS:RCX).EID;

.PP
ELSE IF (EPCM(DS:RCX).PT is PT_VA)

.PP
TMP_HEADER.EID := 0; // Zero is not a special value

.PP
(* No enclave handle for VA pages*)

.PP
TMP_PCMD_ENCLAVEID := 0;

.PP
FI;

.PP
TMP_HEADER.LINADDR := EPCM(DS:RCX).ENCLAVEADDRESS;

.PP
TMP_HEADER.SECINFO.FLAGS.PT := EPCM(DS:RCX).PT;

.PP
TMP_HEADER.SECINFO.FLAGS.RWX := EPCM(DS:RCX).RWX;

.PP
TMP_HEADER.SECINFO.FLAGS.PENDING := EPCM(DS:RCX).PENDING;

.PP
TMP_HEADER.SECINFO.FLAGS.MODIFIED := EPCM(DS:RCX).MODIFIED;

.PP
TMP_HEADER.SECINFO.FLAGS.PR := EPCM(DS:RCX).PR;

.PP
(* Encrypt the page, DS:RCX could be encrypted in place. AES-GCM
produces 2 values, {ciphertext, MAC}. *)

.PP
(* AES-GCM input parameters: key, GCM Counter, MAC_HDR,
MAC_HDR_SIZE, SRC, SRC_SIZE)*)

.PP
{DS:TMP_SRCPGE, DS:TMP_PCMD.MAC} := AES_GCM_ENC(CR_BASE_PK),
(TMP_VER &lt;&lt; 32),

.PP
TMP_HEADER, 128, DS:RCX, 4096);

.PP
(* Write the output *)

.PP
Zero out DS:TMP_PCMD.SECINFO

.PP
DS:TMP_PCMD.SECINFO.FLAGS.PT := EPCM(DS:RCX).PT;

.PP
DS:TMP_PCMD.SECINFO.FLAGS.RWX := EPCM(DS:RCX).RWX;

.PP
DS:TMP_PCMD.SECINFO.FLAGS.PENDING := EPCM(DS:RCX).PENDING;

.PP
DS:TMP_PCMD.SECINFO.FLAGS.MODIFIED := EPCM(DS:RCX).MODIFIED;

.PP
DS:TMP_PCMD.SECINFO.FLAGS.PR := EPCM(DS:RCX).PR;

.PP
DS:TMP_PCMD.RESERVED := 0;

.PP
DS:TMP_PCMD.ENCLAVEID := TMP_PCMD_ENCLAVEID;

.PP
DS:RBX.LINADDR := EPCM(DS:RCX).ENCLAVEADDRESS;

.PP
(*Check if version array slot was empty *)

.PP
IF ([DS.RDX])

.PP
THEN

.PP
RAX := SGX_VA_SLOT_OCCUPIED

.PP
RFLAGS.CF := 1;

.PP
FI;

.PP
(* Write version to Version Array slot *)

.PP
[DS.RDX] := TMP_VER;

.PP
(* Free up EPCM Entry *)

.PP
EPCM.(DS:RCX).VALID := 0;

.PP
ERROR_EXIT:

.SS FLAGS AFFECTED
ZF is set if page is not blocked, not tracked, or a child is present.
Otherwise cleared.

.PP
CF is set if VA slot is previously occupied, Otherwise cleared.

.SS PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the DS segment limit.
T}
	T{
If a memory operand is not properly aligned.
T}
	T{
If the EPC page and VASLOT resolve to the same EPC page.
T}
	T{
If another Intel SGX instruction is concurrently accessing either the target EPC, VA, or SECS pages.
T}
	T{
If the tracking resource is in use.
T}
	T{
If the EPC page or the version array page is invalid.
T}
	T{
If the parameters fail consistency checks.
T}
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If a memory operand is not an EPC page.
T}
	T{
If one of the EPC memory operands has incorrect page type.
T}
.TE

.SS 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand is non-canonical form.
T}
	T{
If a memory operand is not properly aligned.
T}
	T{
If the EPC page and VASLOT resolve to the same EPC page.
T}
	T{
If another Intel SGX instruction is concurrently accessing either the target EPC, VA, or SECS pages.
T}
	T{
If the tracking resource is in use.
T}
	T{
If the EPC page or the version array page in invalid.
T}
	T{
If the parameters fail consistency checks.
T}
#PF(error	T{
code) If a page fault occurs in accessing memory operands.
T}
	T{
If a memory operand is not an EPC page.
T}
	T{
If one of the EPC memory operands has incorrect page type.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
