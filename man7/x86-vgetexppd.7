'\" t
.nh
.TH "X86-VGETEXPPD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VGETEXPPD - CONVERT EXPONENTS OF PACKED DOUBLE PRECISION FLOATING-POINT VALUES TO DOUBLEPRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 Bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.128.66.0F38.W1 42 /r VGETEXPPD xmm1 {k1}{z}, xmm2/m128/m64bcst
T}	A	V/V	AVX512VL AVX512F	T{
Convert the exponent of packed double precision floating-point values in the source operand to double precision floating-point results representing unbiased integer exponents and stores the results in the destination register.
T}
T{
EVEX.256.66.0F38.W1 42 /r VGETEXPPD ymm1 {k1}{z}, ymm2/m256/m64bcst
T}	A	V/V	AVX512VL AVX512F	T{
Convert the exponent of packed double precision floating-point values in the source operand to double precision floating-point results representing unbiased integer exponents and stores the results in the destination register.
T}
T{
EVEX.512.66.0F38.W1 42 /r VGETEXPPD zmm1 {k1}{z}, zmm2/m512/m64bcst{sae}
T}	A	V/V	AVX512F	T{
Convert the exponent of packed double precision floating-point values in the source operand to double precision floating-point results representing unbiased integer exponents and stores the results in the destination under writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vgetexppd.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Full	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SS DESCRIPTION
Extracts the biased exponents from the normalized double precision
floating-point representation of each qword data element of the source
operand (the second operand) as unbiased signed integer value, or
convert the denormal representation of input data to unbiased negative
integer values. Each integer value of the unbiased exponent is converted
to double precision floating-point value and written to the
corresponding qword elements of the destination operand (the first
operand) as double precision floating-point numbers.

.PP
The destination operand is a ZMM/YMM/XMM register and updated under the
writemask. The source operand can be a ZMM/YMM/XMM register, a
512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted
from a 64-bit memory location.

.PP
EVEX.vvvv is reserved and must be 1111b, otherwise instructions will
#UD.

.PP
Each GETEXP operation converts the exponent value into a floating-point
number (permitting input value in denormal representation). Special
cases of input values are listed in Table
5-15
\[la]vgetexppd.html#tbl\-5\-15\[ra]\&.

.PP
The formula is:

.PP
GETEXP(x) = floor(log2(|x|))

.PP
Notation \fBfloor(x)\fP stands for the greatest integer not exceeding real
number x.

.SS OPERATION
.EX
NormalizeExpTinyDPFP(SRC[63:0])
{
    // Jbit is the hidden integral bit of a floating-point number. In case of denormal number it has the value of ZERO.
    Src.Jbit := 0;
    Dst.exp := 1;
    Dst.fraction := SRC[51:0];
    WHILE(Src.Jbit = 0)
    {
        Src.Jbit := Dst.fraction[51];
                        // Get the fraction MSB
        Dst.fraction := Dst.fraction << 1 ;
                            // One bit shift left
        Dst.exp-- ;
                // Decrement the exponent
    }
    Dst.fraction := 0;
    Dst.sign := 1;
    TMP[63:0] := MXCSR.DAZ? 0 : (Dst.sign << 63) OR (Dst.exp << 52) OR (Dst.fraction) ;
    Return (TMP[63:0]);
}
ConvertExpDPFP(SRC[63:0])
{
    Src.sign := 0;
                // Zero out sign bit
    Src.exp := SRC[62:52];
    Src.fraction := SRC[51:0];
    // Check for NaN
    IF (SRC = NaN)
    {
        IF ( SRC = SNAN ) SET IE;
        Return QNAN(SRC);
    }
    // Check for +INF
    IF (Src = +INF) RETURN (Src);
    // check if zero operand
    IF ((Src.exp = 0) AND ((Src.fraction = 0) OR (MXCSR.DAZ = 1))) Return (-INF);
    }
    ELSE // check if denormal operand (notice that MXCSR.DAZ = 0)
    {
        IF ((Src.exp = 0) AND (Src.fraction != 0))
        {
            TMP[63:0] := NormalizeExpTinyDPFP(SRC[63:0]) ;
                                // Get Normalized Exponent
            Set #DE
        }
        ELSE // exponent value is correct
        {
            TMP[63:0] := (Src.sign << 63) OR (Src.exp << 52) OR (Src.fraction) ;
        }
        TMP := SAR(TMP, 52) ;
                    // Shift Arithmetic Right
        TMP := TMP – 1023;
                    // Subtract Bias
        Return CvtI2D(TMP);
                    // Convert INT to double precision floating-point number
    }
}
.EE

.SS VGETEXPPD (EVEX ENCODED VERSIONS)  href="vgetexppd.html#vgetexppd--evex-encoded-versions-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN
            IF (EVEX.b = 1) AND (SRC *is memory*)
                THEN
                    DEST[i+63:i] :=
            ConvertExpDPFP(SRC[63:0])
                ELSE
                    DEST[i+63:i] :=
            ConvertExpDPFP(SRC[i+63:i])
            FI;
        ELSE
            IF *merging-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[i+63:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vgetexppd.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VGETEXPPD __m512d _mm512_getexp_pd(__m512d a);

VGETEXPPD __m512d _mm512_mask_getexp_pd(__m512d s, __mmask8 k, __m512d a);

VGETEXPPD __m512d _mm512_maskz_getexp_pd( __mmask8 k, __m512d a);

VGETEXPPD __m512d _mm512_getexp_round_pd(__m512d a, int sae);

VGETEXPPD __m512d _mm512_mask_getexp_round_pd(__m512d s, __mmask8 k, __m512d a, int sae);

VGETEXPPD __m512d _mm512_maskz_getexp_round_pd( __mmask8 k, __m512d a, int sae);

VGETEXPPD __m256d _mm256_getexp_pd(__m256d a);

VGETEXPPD __m256d _mm256_mask_getexp_pd(__m256d s, __mmask8 k, __m256d a);

VGETEXPPD __m256d _mm256_maskz_getexp_pd( __mmask8 k, __m256d a);

VGETEXPPD __m128d _mm_getexp_pd(__m128d a);

VGETEXPPD __m128d _mm_mask_getexp_pd(__m128d s, __mmask8 k, __m128d a);

VGETEXPPD __m128d _mm_maskz_getexp_pd( __mmask8 k, __m128d a);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vgetexppd.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Denormal.

.SS OTHER EXCEPTIONS
See Table 2-46, “Type E2 Class
Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If EVEX.vvvv != 1111B.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
