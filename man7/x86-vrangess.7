'\" t
.nh
.TH "X86-VRANGESS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VRANGESS - RANGE RESTRICTION CALCULATION FROM A PAIR OF SCALAR FLOAT32 VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.LLIG.66.0F3A.W0 51 /r VRANGESS xmm1 {k1}{z}, xmm2, xmm3/m32{sae}, imm8
T}	A	V/V	AVX512DQ	T{
Calculate a RANGE operation output value from 2 single-precision floating-point values in xmm2 and xmm3/m32, store the output to xmm1 under writemask. Imm8 specifies the comparison and sign of the range operation.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vrangess.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Tuple1 Scalar	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SS DESCRIPTION
This instruction calculates a range operation output from two input
single-precision floating-point values in the low dword element of the
first source operand (the second operand) and second source operand (the
third operand). The range output is written to the low dword element of
the destination operand (the first operand) under the writemask k1.

.PP
Bits7:4 of imm8 byte must be zero. The range operation output is
performed in two parts, each configured by a two-bit control field
within imm8[3:0]:
.IP \(bu 2
Imm8[1:0] specifies the initial comparison operation to be one of
max, min, max absolute value or min absolute value of the input
value pair. Each comparison of two input values produces an
intermediate result that combines with the sign selection control
(imm8[3:2]) to determine the final range operation output.
.IP \(bu 2
Imm8[3:2] specifies the sign of the range operation output to be
one of the following: from the first input value, from the
comparison result, set or clear.

.PP
The encodings of imm8[1:0] and imm8[3:2] are shown in Figure
5-27
\[la]vrangepd.html#fig\-5\-27\[ra]\&.

.PP
Bits 128:31 of the destination operand are copied from the respective
elements of the first source operand.

.PP
When one or more of the input value is a NAN, the comparison operation
may signal invalid exception (IE). Details with one of more input value
is NAN is listed in Table 5-23
\[la]vrangepd.html#tbl\-5\-23\[ra]\&. If the
comparison raises an IE, the sign select control (imm8[3:2]) has no
effect to the range operation output; this is indicated also in Table
5-23
\[la]vrangepd.html#tbl\-5\-23\[ra]\&.

.PP
When both input values are zeros of opposite signs, the comparison
operation of MIN/MAX in the range compare operation is slightly
different from the conceptually similar floating-point MIN/MAX operation
that are found in the instructions VMAXPD/VMINPD. The details of
MIN/MAX/MIN_ABS/MAX_ABS operation for VRANGEPD/PS/SD/SS for
magnitude-0, opposite-signed input cases are listed in Table
5-24
\[la]vrangepd.html#tbl\-5\-24\[ra]\&.

.PP
Additionally, non-zero, equal-magnitude with opposite-sign input values
perform MIN_ABS or MAX_ABS comparison operation with result listed in
Table 5-25
\[la]vrangepd.html#tbl\-5\-25\[ra]\&.

.SS OPERATION
.EX
RangeSP(SRC1[31:0], SRC2[31:0], CmpOpCtl[1:0], SignSelCtl[1:0])
{
    // Check if SNAN and report IE, see also Table 5-23
    IF (SRC1=SNAN) THEN RETURN (QNAN(SRC1), set IE);
    IF (SRC2=SNAN) THEN RETURN (QNAN(SRC2), set IE);
    Src1.exp := SRC1[30:23];
    Src1.fraction := SRC1[22:0];
    IF ((Src1.exp = 0 ) and (Src1.fraction != 0 )) THEN// Src1 is a denormal number
        IF DAZ THEN Src1.fraction := 0;
        ELSE IF (SRC2 <> QNAN) Set DE; FI;
    FI;
    Src2.exp := SRC2[30:23];
    Src2.fraction := SRC2[22:0];
    IF ((Src2.exp = 0 ) and (Src2.fraction != 0 )) THEN// Src2 is a denormal number
        IF DAZ THEN Src2.fraction := 0;
        ELSE IF (SRC1 <> QNAN) Set DE; FI;
    FI;
    IF (SRC2 = QNAN) THEN{TMP[31:0] := SRC1[31:0]}
    ELSE IF(SRC1 = QNAN) THEN{TMP[31:0] := SRC2[31:0]}
    ELSE IF (Both SRC1, SRC2 are magnitude-0 and opposite-signed) TMP[31:0] := from Table 5-24
    ELSE IF (Both SRC1, SRC2 are magnitude-equal and opposite-signed and CmpOpCtl[1:0] > 01) TMP[31:0] := from Table 5-25
    ELSE
        Case(CmpOpCtl[1:0])
        00: TMP[31:0] := (SRC1[31:0] ≤ SRC2[31:0]) ? SRC1[31:0] : SRC2[31:0];
        01: TMP[31:0] := (SRC1[31:0] ≤ SRC2[31:0]) ? SRC2[31:0] : SRC1[31:0];
        10: TMP[31:0] := (ABS(SRC1[31:0]) ≤ ABS(SRC2[31:0])) ? SRC1[31:0] : SRC2[31:0];
        11: TMP[31:0] := (ABS(SRC1[31:0]) ≤ ABS(SRC2[31:0])) ? SRC2[31:0] : SRC1[31:0];
        ESAC;
    FI;
    Case(SignSelCtl[1:0])
    00: dest := (SRC1[31] << 31) OR (TMP[30:0]);// Preserve Src1 sign bit
    01: dest := TMP[31:0];// Preserve sign of compare result
    10: dest := (0 << 31) OR (TMP[30:0]);// Zero out sign bit
    11: dest := (1 << 31) OR (TMP[30:0]);// Set the sign bit
    ESAC;
    RETURN dest[31:0];
}
CmpOpCtl[1:0]= imm8[1:0];
SignSelCtl[1:0]=imm8[3:2];
.EE

.SS VRANGESS
.EX
IF k1[0] OR *no writemask*
        THEN DEST[31:0] := RangeSP (SRC1[31:0], SRC2[31:0], CmpOpCtl[1:0], SignSelCtl[1:0]);
    ELSE
        IF *merging-masking* ; merging-masking
            THEN *DEST[31:0] remains unchanged*
            ELSE ; zeroing-masking
                DEST[31:0] = 0
        FI;
FI;
DEST[127:32] := SRC1[127:32]
DEST[MAXVL-1:128] := 0
The following example describes a common usage of this instruction for checking that the input operand is
bounded between ±150.
VRANGESS zmm_dst, zmm_src, zmm_150, 02h;
Where:
xmm_dst is the destination operand.
xmm_src is the input operand to compare against ±150.
xmm_150 is the reference operand, contains the value of 150.
IMM=02(imm8[1:0]=’10) selects the Min Absolute value operation with selection of src1.sign.
In case |xmm_src| < 150, then its value will be written into zmm_dst. Otherwise, the value stored in xmm_dst
will get the value of 150 (received on zmm_150).
However, the sign control (imm8[3:2]=’00) instructs to select the sign of SRC1 received from xmm_src. So, even
in the case of |xmm_src| ≥ 150, the selected sign of SRC1 is kept.
Thus, if xmm_src < -150, the result of VRANGESS will be the minimal value of -150 while if xmm_src > +150,
the result of VRANGE will be the maximal value of +150.
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vrangess.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VRANGESS __m128 _mm_range_ss ( __m128 a, __m128 b, int imm);

VRANGESS __m128 _mm_range_round_ss ( __m128 a, __m128 b, int imm, int sae);

VRANGESS __m128 _mm_mask_range_ss (__m128 s, __mmask8 k, __m128 a, __m128 b, int imm);

VRANGESS __m128 _mm_mask_range_round_ss (__m128 s, __mmask8 k, __m128 a, __m128 b, int imm, int sae);

VRANGESS __m128 _mm_maskz_range_ss ( __mmask8 k, __m128 a, __m128 b, int imm);

VRANGESS __m128 _mm_maskz_range_round_ss ( __mmask8 k, __m128 a, __m128 b, int imm, int sae);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vrangess.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Denormal.

.SS OTHER EXCEPTIONS
See Table 2-47, “Type E3 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
