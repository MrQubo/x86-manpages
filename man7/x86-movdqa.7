'\" t
.nh
.TH "X86-MOVDQA-VMOVDQA32-VMOVDQA64" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MOVDQA-VMOVDQA32-VMOVDQA64 - MOVE ALIGNED PACKED INTEGER VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 6F /r MOVDQA xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Move aligned packed integer values from xmm2/mem to xmm1.
T}
T{
66 0F 7F /r MOVDQA xmm2/m128, xmm1
T}	B	V/V	SSE2	T{
Move aligned packed integer values from xmm1 to xmm2/mem.
T}
T{
VEX.128.66.0F.WIG 6F /r VMOVDQA xmm1, xmm2/m128
T}	A	V/V	AVX	T{
Move aligned packed integer values from xmm2/mem to xmm1.
T}
T{
VEX.128.66.0F.WIG 7F /r VMOVDQA xmm2/m128, xmm1
T}	B	V/V	AVX	T{
Move aligned packed integer values from xmm1 to xmm2/mem.
T}
T{
VEX.256.66.0F.WIG 6F /r VMOVDQA ymm1, ymm2/m256
T}	A	V/V	AVX	T{
Move aligned packed integer values from ymm2/mem to ymm1.
T}
T{
VEX.256.66.0F.WIG 7F /r VMOVDQA ymm2/m256, ymm1
T}	B	V/V	AVX	T{
Move aligned packed integer values from ymm1 to ymm2/mem.
T}
T{
EVEX.128.66.0F.W0 6F /r VMOVDQA32 xmm1 {k1}{z}, xmm2/m128
T}	C	V/V	AVX512VL AVX512F	T{
Move aligned packed doubleword integer values from xmm2/m128 to xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F.W0 6F /r VMOVDQA32 ymm1 {k1}{z}, ymm2/m256
T}	C	V/V	AVX512VL AVX512F	T{
Move aligned packed doubleword integer values from ymm2/m256 to ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F.W0 6F /r VMOVDQA32 zmm1 {k1}{z}, zmm2/m512
T}	C	V/V	AVX512F	T{
Move aligned packed doubleword integer values from zmm2/m512 to zmm1 using writemask k1.
T}
T{
EVEX.128.66.0F.W0 7F /r VMOVDQA32 xmm2/m128 {k1}{z}, xmm1
T}	D	V/V	AVX512VL AVX512F	T{
Move aligned packed doubleword integer values from xmm1 to xmm2/m128 using writemask k1.
T}
T{
EVEX.256.66.0F.W0 7F /r VMOVDQA32 ymm2/m256 {k1}{z}, ymm1
T}	D	V/V	AVX512VL AVX512F	T{
Move aligned packed doubleword integer values from ymm1 to ymm2/m256 using writemask k1.
T}
T{
EVEX.512.66.0F.W0 7F /r VMOVDQA32 zmm2/m512 {k1}{z}, zmm1
T}	D	V/V	AVX512F	T{
Move aligned packed doubleword integer values from zmm1 to zmm2/m512 using writemask k1.
T}
T{
EVEX.128.66.0F.W1 6F /r VMOVDQA64 xmm1 {k1}{z}, xmm2/m128
T}	C	V/V	AVX512VL AVX512F	T{
Move aligned packed quadword integer values from xmm2/m128 to xmm1 using writemask k1.
T}
T{
EVEX.256.66.0F.W1 6F /r VMOVDQA64 ymm1 {k1}{z}, ymm2/m256
T}	C	V/V	AVX512VL AVX512F	T{
Move aligned packed quadword integer values from ymm2/m256 to ymm1 using writemask k1.
T}
T{
EVEX.512.66.0F.W1 6F /r VMOVDQA64 zmm1 {k1}{z}, zmm2/m512
T}	C	V/V	AVX512F	T{
Move aligned packed quadword integer values from zmm2/m512 to zmm1 using writemask k1.
T}
T{
EVEX.128.66.0F.W1 7F /r VMOVDQA64 xmm2/m128 {k1}{z}, xmm1
T}	D	V/V	AVX512VL AVX512F	T{
Move aligned packed quadword integer values from xmm1 to xmm2/m128 using writemask k1.
T}
T{
EVEX.256.66.0F.W1 7F /r VMOVDQA64 ymm2/m256 {k1}{z}, ymm1
T}	D	V/V	AVX512VL AVX512F	T{
Move aligned packed quadword integer values from ymm1 to ymm2/m256 using writemask k1.
T}
T{
EVEX.512.66.0F.W1 7F /r VMOVDQA64 zmm2/m512 {k1}{z}, zmm1
T}	D	V/V	AVX512F	T{
Move aligned packed quadword integer values from zmm1 to zmm2/m512 using writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="./movdqa:vmovdqa32:vmovdqa64.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
C	Full Mem	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
D	Full Mem	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SH DESCRIPTION  href="./movdqa:vmovdqa32:vmovdqa64.html#description"
class="anchor">¶

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.PP
EVEX encoded versions:

.PP
Moves 128, 256 or 512 bits of packed doubleword/quadword integer values
from the source operand (the second operand) to the destination operand
(the first operand). This instruction can be used to load a vector
register from an int32/int64 memory location, to store the contents of a
vector register into an int32/int64 memory location, or to move data
between two ZMM registers. When the source or destination operand is a
memory operand, the operand must be aligned on a 16
(EVEX.128)/32(EVEX.256)/64(EVEX.512)-byte boundary or a
general-protection exception (#GP) will be generated. To move integer
data to and from unaligned memory locations, use the VMOVDQU
instruction.

.PP
The destination operand is updated at 32-bit (VMOVDQA32) or 64-bit
(VMOVDQA64) granularity according to the writemask.

.PP
VEX.256 encoded version:

.PP
Moves 256 bits of packed integer values from the source operand (second
operand) to the destination operand (first operand). This instruction
can be used to load a YMM register from a 256-bit memory location, to
store the contents of a YMM register into a 256-bit memory location, or
to move data between two YMM registers.

.PP
When the source or destination operand is a memory operand, the operand
must be aligned on a 32-byte boundary or a general-protection exception
(#GP) will be generated. To move integer data to and from unaligned
memory locations, use the VMOVDQU instruction. Bits (MAXVL-1:256) of the
destination register are zeroed.

.PP
128-bit versions:

.PP
Moves 128 bits of packed integer values from the source operand (second
operand) to the destination operand (first operand). This instruction
can be used to load an XMM register from a 128-bit memory location, to
store the contents of an XMM register into a 128-bit memory location, or
to move data between two XMM registers.

.PP
When the source or destination operand is a memory operand, the operand
must be aligned on a 16-byte boundary or a general-protection exception
(#GP) will be generated. To move integer data to and from unaligned
memory locations, use the VMOVDQU instruction.

.PP
128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding ZMM
destination register remain unchanged.

.PP
VEX.128 encoded version: Bits (MAXVL-1:128) of the destination register
are zeroed.

.SH OPERATION  href="./movdqa:vmovdqa32:vmovdqa64.html#operation"
class="anchor">¶

.SS VMOVDQA32 (EVEX ENCODED VERSIONS, REGISTER-COPY FORM) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#vmovdqa32--evex-encoded-versions--register-copy-form-"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i] := SRC[i+31:i]
        ELSE
            IF *merging-masking*
                    ; merging-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE DEST[i+31:i] := 0
                    ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VMOVDQA32 (EVEX ENCODED VERSIONS, STORE-FORM) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#vmovdqa32--evex-encoded-versions--store-form-"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i] := SRC[i+31:i]
        ELSE *DEST[i+31:i] remains unchanged*
            ; merging-masking
    FI;
ENDFOR;
.EE

.SS VMOVDQA32 (EVEX ENCODED VERSIONS, LOAD-FORM) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#vmovdqa32--evex-encoded-versions--load-form-"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i] := SRC[i+31:i]
        ELSE
            IF *merging-masking*
                THEN *DEST[i+31:i] remains unchanged*
                ELSE DEST[i+31:i] := 0 ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VMOVDQA64 (EVEX ENCODED VERSIONS, REGISTER-COPY FORM) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#vmovdqa64--evex-encoded-versions--register-copy-form-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := SRC[i+63:i]
        ELSE
            IF *merging-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE DEST[i+63:i] := 0 ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VMOVDQA64 (EVEX ENCODED VERSIONS, STORE-FORM) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#vmovdqa64--evex-encoded-versions--store-form-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := SRC[i+63:i]
        ELSE *DEST[i+63:i] remains unchanged*
            ; merging-masking
    FI;
ENDFOR;
.EE

.SS VMOVDQA64 (EVEX ENCODED VERSIONS, LOAD-FORM) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#vmovdqa64--evex-encoded-versions--load-form-"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no writemask*
        THEN DEST[i+63:i] := SRC[i+63:i]
        ELSE
            IF *merging-masking*
                THEN *DEST[i+63:i] remains unchanged*
                ELSE DEST[i+63:i] := 0 ; zeroing-masking
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL] := 0
.EE

.SS VMOVDQA (VEX.256 ENCODED VERSION, LOAD - AND REGISTER COPY) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#vmovdqa--vex-256-encoded-version--load---and-register-copy-"
class="anchor">¶

.EX
DEST[255:0] := SRC[255:0]
DEST[MAXVL-1:256] := 0
.EE

.SS VMOVDQA (VEX.256 ENCODED VERSION, STORE-FORM) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#vmovdqa--vex-256-encoded-version--store-form-"
class="anchor">¶

.EX
DEST[255:0] := SRC[255:0]
.EE

.SS VMOVDQA (VEX.128 ENCODED VERSION) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#vmovdqa--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[127:0] := SRC[127:0]
DEST[MAXVL-1:128] := 0
.EE

.SS VMOVDQA (128-BIT LOAD- AND REGISTER-COPY- FORM LEGACY SSE VERSION) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#vmovdqa--128-bit-load--and-register-copy--form-legacy-sse-version-"
class="anchor">¶

.EX
DEST[127:0] := SRC[127:0]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS (V)MOVDQA (128-BIT STORE-FORM VERSION) <a
href="./movdqa:vmovdqa32:vmovdqa64.html#-v-movdqa--128-bit-store-form-version-"
class="anchor">¶

.EX
DEST[127:0] := SRC[127:0]
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT <a
href="./movdqa:vmovdqa32:vmovdqa64.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VMOVDQA32 __m512i _mm512_load_epi32( void * sa);

VMOVDQA32 __m512i _mm512_mask_load_epi32(__m512i s, __mmask16 k, void * sa);

VMOVDQA32 __m512i _mm512_maskz_load_epi32( __mmask16 k, void * sa);

VMOVDQA32 void _mm512_store_epi32(void * d, __m512i a);

VMOVDQA32 void _mm512_mask_store_epi32(void * d, __mmask16 k, __m512i a);

VMOVDQA32 __m256i _mm256_mask_load_epi32(__m256i s, __mmask8 k, void * sa);

VMOVDQA32 __m256i _mm256_maskz_load_epi32( __mmask8 k, void * sa);

VMOVDQA32 void _mm256_store_epi32(void * d, __m256i a);

VMOVDQA32 void _mm256_mask_store_epi32(void * d, __mmask8 k, __m256i a);

VMOVDQA32 __m128i _mm_mask_load_epi32(__m128i s, __mmask8 k, void * sa);

VMOVDQA32 __m128i _mm_maskz_load_epi32( __mmask8 k, void * sa);

VMOVDQA32 void _mm_store_epi32(void * d, __m128i a);

VMOVDQA32 void _mm_mask_store_epi32(void * d, __mmask8 k, __m128i a);

VMOVDQA64 __m512i _mm512_load_epi64( void * sa);

VMOVDQA64 __m512i _mm512_mask_load_epi64(__m512i s, __mmask8 k, void * sa);

VMOVDQA64 __m512i _mm512_maskz_load_epi64( __mmask8 k, void * sa);

VMOVDQA64 void _mm512_store_epi64(void * d, __m512i a);

VMOVDQA64 void _mm512_mask_store_epi64(void * d, __mmask8 k, __m512i a);

VMOVDQA64 __m256i _mm256_mask_load_epi64(__m256i s, __mmask8 k, void * sa);

VMOVDQA64 __m256i _mm256_maskz_load_epi64( __mmask8 k, void * sa);

VMOVDQA64 void _mm256_store_epi64(void * d, __m256i a);

VMOVDQA64 void _mm256_mask_store_epi64(void * d, __mmask8 k, __m256i a);

VMOVDQA64 __m128i _mm_mask_load_epi64(__m128i s, __mmask8 k, void * sa);

VMOVDQA64 __m128i _mm_maskz_load_epi64( __mmask8 k, void * sa);

VMOVDQA64 void _mm_store_epi64(void * d, __m128i a);

VMOVDQA64 void _mm_mask_store_epi64(void * d, __mmask8 k, __m128i a);

MOVDQA void __m256i _mm256_load_si256 (__m256i * p);

MOVDQA _mm256_store_si256(_m256i *p, __m256i a);

MOVDQA __m128i _mm_load_si128 (__m128i * p);

MOVDQA void _mm_store_si128(__m128i *p, __m128i a);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS <a
href="./movdqa:vmovdqa32:vmovdqa64.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS  href="./movdqa:vmovdqa32:vmovdqa64.html#other-exceptions"
class="anchor">¶

.PP
Non-EVEX-encoded instruction, see Exceptions Type1.SSE2 in
Table 2-18, “Type 1 Class Exception
Conditions.”

.PP
EVEX-encoded instruction, see Table
2-44, “Type E1 Class Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If EVEX.vvvv != 1111B or VEX.vvvv != 1111B.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
