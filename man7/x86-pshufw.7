'\" t
.nh
.TH "X86-PSHUFW" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
PSHUFW - SHUFFLE PACKED WORDS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
T{
NP 0F 70 /r ib PSHUFW mm1, mm2/m64, imm8
T}	RMI	Valid	Valid	T{
Shuffle the words in mm2/m64 based on the encoding in imm8 and store the result in mm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RMI	ModRM:reg (w)	ModRM:r/m (r)	imm8	N/A
.TE

.SH DESCRIPTION
Copies words from the source operand (second operand) and inserts them
in the destination operand (first operand) at word locations selected
with the order operand (third operand). This operation is similar to the
operation used by the PSHUFD instruction, which is illustrated in
Figure 4-16\&. For the PSHUFW
instruction, each 2-bit field in the order operand selects the contents
of one word location in the destination operand. The encodings of the
order operand fields select words from the source operand to be copied
to the destination operand.

.PP
The source operand can be an MMX technology register or a 64-bit memory
location. The destination operand is an MMX technology register. The
order operand is an 8-bit immediate. Note that this instruction permits
a word in the source operand to be copied to more than one word location
in the destination operand.

.PP
In 64-bit mode, using a REX prefix in the form of REX.R permits this
instruction to access additional registers (XMM8-XMM15).

.SH OPERATION
.EX
DEST[15:0] := (SRC >> (ORDER[1:0] * 16))[15:0];
DEST[31:16] := (SRC >> (ORDER[3:2] * 16))[15:0];
DEST[47:32] := (SRC >> (ORDER[5:4] * 16))[15:0];
DEST[63:48] := (SRC >> (ORDER[7:6] * 16))[15:0];
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="pshufw.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
PSHUFW __m64 _mm_shuffle_pi16(__m64 a, int n)
.EE

.SH FLAGS AFFECTED
None.

.SH NUMERIC EXCEPTIONS
None.

.SH OTHER EXCEPTIONS
See Table 23-7, “Exception Conditions
for SIMD/MMX Instructions with Memory Reference,” in the
Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 3B.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
