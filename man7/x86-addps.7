'\" t
.nh
.TH "X86-ADDPS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
ADDPS - ADD PACKED SINGLE PRECISION FLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
NP 0F 58 /r ADDPS xmm1, xmm2/m128
T}	A	V/V	SSE	T{
Add packed single precision floating-point values from xmm2/m128 to xmm1 and store result in xmm1.
T}
T{
VEX.128.0F.WIG 58 /r VADDPS xmm1,xmm2, xmm3/m128
T}	B	V/V	AVX	T{
Add packed single precision floating-point values from xmm3/m128 to xmm2 and store result in xmm1.
T}
T{
VEX.256.0F.WIG 58 /r VADDPS ymm1, ymm2, ymm3/m256
T}	B	V/V	AVX	T{
Add packed single precision floating-point values from ymm3/m256 to ymm2 and store result in ymm1.
T}
T{
EVEX.128.0F.W0 58 /r VADDPS xmm1 {k1}{z}, xmm2, xmm3/m128/m32bcst
T}	C	V/V	AVX512VL AVX512F	T{
Add packed single precision floating-point values from xmm3/m128/m32bcst to xmm2 and store result in xmm1 with writemask k1.
T}
T{
EVEX.256.0F.W0 58 /r VADDPS ymm1 {k1}{z}, ymm2, ymm3/m256/m32bcst
T}	C	V/V	AVX512VL AVX512F	T{
Add packed single precision floating-point values from ymm3/m256/m32bcst to ymm2 and store result in ymm1 with writemask k1.
T}
T{
EVEX.512.0F.W0 58 /r VADDPS zmm1 {k1}{z}, zmm2, zmm3/m512/m32bcst {er}
T}	C	V/V	AVX512F	T{
Add packed single precision floating-point values from zmm3/m512/m32bcst to zmm2 and store result in zmm1 with writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
C	Full	ModRM:reg (w)	EVEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Adds four, eight or sixteen packed single precision floating-point
values from the first source operand with the second source operand, and
stores the packed single precision floating-point result in the
destination operand.

.PP
EVEX encoded versions: The first source operand is a ZMM/YMM/XMM
register. The second source operand can be a ZMM/YMM/XMM register, a
512/256/128-bit memory location or a 512/256/128-bit vector broadcasted
from a 32-bit memory location. The destination operand is a ZMM/YMM/XMM
register conditionally updated with writemask k1.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256-bit memory
location. The destination operand is a YMM register. The upper bits
(MAXVL-1:256) of the corresponding ZMM register destination are zeroed.

.PP
VEX.128 encoded version: the first source operand is a XMM register. The
second source operand is an XMM register or 128-bit memory location. The
destination operand is an XMM register. The upper bits (MAXVL-1:128) of
the corresponding ZMM register destination are zeroed.

.PP
128-bit Legacy SSE version: The second source can be an XMM register or
an 128-bit memory location. The destination is not distinct from the
first source XMM register and the upper Bits (MAXVL-1:128) of the
corresponding ZMM register destination are unmodified.

.SH OPERATION
.SS VADDPS (EVEX ENCODED VERSIONS) WHEN SRC2 OPERAND IS A REGISTER <a
href="addps.html#vaddps--evex-encoded-versions--when-src2-operand-is-a-register"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
IF (VL = 512) AND (EVEX.b = 1)
    THEN
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(EVEX.RC);
    ELSE
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(MXCSR.RC);
FI;
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN DEST[i+31:i] := SRC1[i+31:i] + SRC2[i+31:i]
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[i+31:i] := 0
            FI
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0
.EE

.SS VADDPS (EVEX ENCODED VERSIONS) WHEN SRC2 OPERAND IS A MEMORY SOURCE <a
href="addps.html#vaddps--evex-encoded-versions--when-src2-operand-is-a-memory-source"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN
            IF (EVEX.b = 1)
                THEN
                    DEST[i+31:i] :=
                        SRC1[i+31:i] + SRC2[31:0]
                ELSE
                    DEST[i+31:i] :=
                        SRC1[i+31:i] + SRC2[i+31:i]
            FI;
        ELSE
            IF *merging-masking*
                            ; merging-masking
                THEN *DEST[i+31:i]
                        remains unchanged*
                ELSE
                            ; zeroing-masking
                    DEST[i+31:i] :=
                        0
            FI
    FI;
ENDFOR;
DEST[MAXVL-1:VL] := 0
.EE

.SS VADDPS (VEX.256 ENCODED VERSION)  href="addps.html#vaddps--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0] + SRC2[31:0]
DEST[63:32] := SRC1[63:32] + SRC2[63:32]
DEST[95:64] := SRC1[95:64] + SRC2[95:64]
DEST[127:96] := SRC1[127:96] + SRC2[127:96]
DEST[159:128] := SRC1[159:128] + SRC2[159:128]
DEST[191:160]:= SRC1[191:160] + SRC2[191:160]
DEST[223:192] := SRC1[223:192] + SRC2[223:192]
DEST[255:224] := SRC1[255:224] + SRC2[255:224].
DEST[MAXVL-1:256] := 0
.EE

.SS VADDPS (VEX.128 ENCODED VERSION)  href="addps.html#vaddps--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0] + SRC2[31:0]
DEST[63:32] := SRC1[63:32] + SRC2[63:32]
DEST[95:64] := SRC1[95:64] + SRC2[95:64]
DEST[127:96] := SRC1[127:96] + SRC2[127:96]
DEST[MAXVL-1:128] := 0
.EE

.SS ADDPS (128-BIT LEGACY SSE VERSION)  href="addps.html#addps--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0] + SRC2[31:0]
DEST[63:32] := SRC1[63:32] + SRC2[63:32]
DEST[95:64] := SRC1[95:64] + SRC2[95:64]
DEST[127:96] := SRC1[127:96] + SRC2[127:96]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="addps.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VADDPS __m512 _mm512_add_ps (__m512 a, __m512 b);

VADDPS __m512 _mm512_mask_add_ps (__m512 s, __mmask16 k, __m512 a, __m512 b);

VADDPS __m512 _mm512_maskz_add_ps (__mmask16 k, __m512 a, __m512 b);

VADDPS __m256 _mm256_mask_add_ps (__m256 s, __mmask8 k, __m256 a, __m256 b);

VADDPS __m256 _mm256_maskz_add_ps (__mmask8 k, __m256 a, __m256 b);

VADDPS __m128 _mm_mask_add_ps (__m128d s, __mmask8 k, __m128 a, __m128 b);

VADDPS __m128 _mm_maskz_add_ps (__mmask8 k, __m128 a, __m128 b);

VADDPS __m512 _mm512_add_round_ps (__m512 a, __m512 b, int);

VADDPS __m512 _mm512_mask_add_round_ps (__m512 s, __mmask16 k, __m512 a, __m512 b, int);

VADDPS __m512 _mm512_maskz_add_round_ps (__mmask16 k, __m512 a, __m512 b, int);

ADDPS __m256 _mm256_add_ps (__m256 a, __m256 b);

ADDPS __m128 _mm_add_ps (__m128 a, __m128 b);
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS
Overflow, Underflow, Invalid, Precision, Denormal.

.SH OTHER EXCEPTIONS
VEX-encoded instruction, see Table
2-19, “Type 2 Class Exception Conditions.”

.PP
EVEX-encoded instruction, see Table
2-46, “Type E2 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
