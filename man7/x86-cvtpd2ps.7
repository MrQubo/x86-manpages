'\" t
.nh
.TH "X86-CVTPD2PS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
CVTPD2PS - CONVERT PACKED DOUBLE PRECISION FLOATING-POINT VALUES TO PACKED SINGLE PRECISIONFLOATING-POINT VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp / En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
66 0F 5A /r CVTPD2PS xmm1, xmm2/m128
T}	A	V/V	SSE2	T{
Convert two packed double precision floating-point values in xmm2/mem to two single precision floating-point values in xmm1.
T}
T{
VEX.128.66.0F.WIG 5A /r VCVTPD2PS xmm1, xmm2/m128
T}	A	V/V	AVX	T{
Convert two packed double precision floating-point values in xmm2/mem to two single precision floating-point values in xmm1.
T}
T{
VEX.256.66.0F.WIG 5A /r VCVTPD2PS xmm1, ymm2/m256
T}	A	V/V	AVX	T{
Convert four packed double precision floating-point values in ymm2/mem to four single precision floating-point values in xmm1.
T}
T{
EVEX.128.66.0F.W1 5A /r VCVTPD2PS xmm1 {k1}{z}, xmm2/m128/m64bcst
T}	B	V/V	AVX512VL AVX512F	T{
Convert two packed double precision floating-point values in xmm2/m128/m64bcst to two single precision floating-point values in xmm1with writemask k1.
T}
T{
EVEX.256.66.0F.W1 5A /r VCVTPD2PS xmm1 {k1}{z}, ymm2/m256/m64bcst
T}	B	V/V	AVX512VL AVX512F	T{
Convert four packed double precision floating-point values in ymm2/m256/m64bcst to four single precision floating-point values in xmm1with writemask k1.
T}
T{
EVEX.512.66.0F.W1 5A /r VCVTPD2PS ymm1 {k1}{z}, zmm2/m512/m64bcst{er}
T}	B	V/V	AVX512F	T{
Convert eight packed double precision floating-point values in zmm2/m512/m64bcst to eight single precision floating-point values in ymm1with writemask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="cvtpd2ps.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	Full	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Converts two, four or eight packed double precision floating-point
values in the source operand (second operand) to two, four or eight
packed single precision floating-point values in the destination operand
(first operand).

.PP
When a conversion is inexact, the value returned is rounded according to
the rounding control bits in the MXCSR register or the embedded rounding
control bits.

.PP
EVEX encoded versions: The source operand is a ZMM/YMM/XMM register, a
512/256/128-bit memory location, or a 512/256/128-bit vector broadcasted
from a 64-bit memory location. The destination operand is a YMM/XMM/XMM
(low 64-bits) register conditionally updated with writemask k1. The
upper bits (MAXVL-1:256/128/64) of the corresponding destination are
zeroed.

.PP
VEX.256 encoded version: The source operand is a YMM register or 256-
bit memory location. The destination operand is an XMM register. The
upper bits (MAXVL-1:128) of the corresponding ZMM register destination
are zeroed.

.PP
VEX.128 encoded version: The source operand is an XMM register or 128-
bit memory location. The destination operand is a XMM register. The
upper bits (MAXVL-1:64) of the corresponding ZMM register destination
are zeroed.

.PP
128-bit Legacy SSE version: The source operand is an XMM register or
128- bit memory location. The destination operand is an XMM register.
Bits[127:64] of the destination XMM register are zeroed. However, the
upper Bits (MAXVL-1:128) of the corresponding ZMM register destination
are unmodified.

.PP
VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.SH OPERATION
.SS VCVTPD2PS (EVEX ENCODED VERSION) WHEN SRC OPERAND IS A REGISTER <a
href="cvtpd2ps.html#vcvtpd2ps--evex-encoded-version--when-src-operand-is-a-register"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
IF (VL = 512) AND (EVEX.b = 1)
    THEN
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(EVEX.RC);
    ELSE
        SET_ROUNDING_MODE_FOR_THIS_INSTRUCTION(MXCSR.RC);
FI;
FOR j := 0 TO KL-1
    i := j * 32
    k := j * 64
    IF k1[j] OR *no writemask*
        THEN
            DEST[i+31:i] := Convert_Double_Precision_Floating_Point_To_Single_Precision_Floating_Point(SRC[k+63:k])
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[i+31:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL/2] := 0
.EE

.SS VCVTPD2PS (EVEX ENCODED VERSION) WHEN SRC OPERAND IS A MEMORY SOURCE <a
href="cvtpd2ps.html#vcvtpd2ps--evex-encoded-version--when-src-operand-is-a-memory-source"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
FOR j := 0 TO KL-1
    i := j * 32
    k := j * 64
    IF k1[j] OR *no writemask*
        THEN
            IF (EVEX.b = 1)
                THEN
                    DEST[i+31:i] :=Convert_Double_Precision_Floating_Point_To_Single_Precision_Floating_Point(SRC[63:0])
                ELSE
                    DEST[i+31:i] := Convert_Double_Precision_Floating_Point_To_Single_Precision_Floating_Point(SRC[k+63:k])
            FI;
        ELSE
            IF *merging-masking* ; merging-masking
                THEN *DEST[i+31:i] remains unchanged*
                ELSE ; zeroing-masking
                    DEST[i+31:i] := 0
            FI
    FI;
ENDFOR
DEST[MAXVL-1:VL/2] := 0
.EE

.SS VCVTPD2PS (VEX.256 ENCODED VERSION)  href="cvtpd2ps.html#vcvtpd2ps--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC[63:0])
DEST[63:32] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC[127:64])
DEST[95:64] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC[191:128])
DEST[127:96] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC[255:192)
DEST[MAXVL-1:128] := 0
.EE

.SS VCVTPD2PS (VEX.128 ENCODED VERSION)  href="cvtpd2ps.html#vcvtpd2ps--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC[63:0])
DEST[63:32] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC[127:64])
DEST[MAXVL-1:64] := 0
.EE

.SS CVTPD2PS (128-BIT LEGACY SSE VERSION)  href="cvtpd2ps.html#cvtpd2ps--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[31:0] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC[63:0])
DEST[63:32] := Convert_Double_Precision_To_Single_Precision_Floating_Point(SRC[127:64])
DEST[127:64] := 0
DEST[MAXVL-1:128] (unmodified)
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="cvtpd2ps.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VCVTPD2PS __m256 _mm512_cvtpd_ps( __m512d a);

VCVTPD2PS __m256 _mm512_mask_cvtpd_ps( __m256 s, __mmask8 k, __m512d a);

VCVTPD2PS __m256 _mm512_maskz_cvtpd_ps( __mmask8 k, __m512d a);

VCVTPD2PS __m256 _mm512_cvt_roundpd_ps( __m512d a, int r);

VCVTPD2PS __m256 _mm512_mask_cvt_roundpd_ps( __m256 s, __mmask8 k, __m512d a, int r);

VCVTPD2PS __m256 _mm512_maskz_cvt_roundpd_ps( __mmask8 k, __m512d a, int r);

VCVTPD2PS __m128 _mm256_mask_cvtpd_ps( __m128 s, __mmask8 k, __m256d a);

VCVTPD2PS __m128 _mm256_maskz_cvtpd_ps( __mmask8 k, __m256d a);

VCVTPD2PS __m128 _mm_mask_cvtpd_ps( __m128 s, __mmask8 k, __m128d a);

VCVTPD2PS __m128 _mm_maskz_cvtpd_ps( __mmask8 k, __m128d a);

VCVTPD2PS __m128 _mm256_cvtpd_ps (__m256d a)

CVTPD2PS __m128 _mm_cvtpd_ps (__m128d a)
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="cvtpd2ps.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Precision, Underflow, Overflow, Denormal.

.SH OTHER EXCEPTIONS
VEX-encoded instructions, see Table
2-19, “Type 2 Class Exception Conditions.”

.PP
EVEX-encoded instructions, see Table
2-46, “Type E2 Class Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If VEX.vvvv != 1111B or EVEX.vvvv != 1111B.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
