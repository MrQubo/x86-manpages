'\" t
.nh
.TH "X86-MASKMOVQ" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MASKMOVQ - STORE SELECTED BYTES OF QUADWORD
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
NP 0F F7 /r MASKMOVQ mm1, mm2	RM	Valid	Valid	T{
Selectively write bytes from mm1 to memory location using the byte mask in mm2. The default memory location is specified by DS:DI/EDI/RDI.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="maskmovq.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (r)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Stores selected bytes from the source operand (first operand) into a
64-bit memory location. The mask operand (second operand) selects which
bytes from the source operand are written to memory. The source and mask
operands are MMX technology registers. The memory location specified by
the effective address in the DI/EDI/RDI register (the default segment
register is DS, but this may be overridden with a segment-override
prefix). The memory location does not need to be aligned on a natural
boundary. (The size of the store address depends on the address-size
attribute.)

.PP
The most significant bit in each byte of the mask operand determines
whether the corresponding byte in the source operand is written to the
corresponding byte location in memory: 0 indicates no write and 1
indicates write.

.PP
The MASKMOVQ instruction generates a non-temporal hint to the processor
to minimize cache pollution. The non-temporal hint is implemented by
using a write combining (WC) memory type protocol (see “Caching of
Temporal vs. Non-Temporal Data” in Chapter 10, of the Intel®
64 and IA-32 Architectures Software Developer’s Manual, Volume 1).
Because the WC protocol uses a weakly-ordered memory consistency model,
a fencing operation implemented with the SFENCE or MFENCE instruction
should be used in conjunction with MASKMOVQ instructions if multiple
processors might use different memory types to read/write the
destination memory locations.

.PP
This instruction causes a transition from x87 FPU to MMX technology
state (that is, the x87 FPU top-of-stack pointer is set to 0 and the x87
FPU tag word is set to all 0s [valid]).

.PP
The behavior of the MASKMOVQ instruction with a mask of all 0s is as
follows:
.IP \(bu 2
No data will be written to memory.
.IP \(bu 2
Transition from x87 FPU to MMX technology state will occur.
.IP \(bu 2
Exceptions associated with addressing memory and page faults may
still be signaled (implementation dependent).
.IP \(bu 2
Signaling of breakpoints (code or data) is not guaranteed
(implementation dependent).
.IP \(bu 2
If the destination memory region is mapped as UC or WP, enforcement
of associated semantics for these memory types is not guaranteed
(that is, is reserved) and is implementation-specific.

.PP
The MASKMOVQ instruction can be used to improve performance for
algorithms that need to merge data on a byteby-byte basis. It should not
cause a read for ownership; doing so generates unnecessary bandwidth
since data is to be written directly using the byte-mask without
allocating old data prior to the store.

.PP
In 64-bit mode, the memory address is specified by DS:RDI.

.SH OPERATION
.EX
IF (MASK[7] = 1)
    THEN DEST[DI/EDI] := SRC[7:0] ELSE (* Memory location unchanged *); FI;
IF (MASK[15] = 1)
    THEN DEST[DI/EDI +1] := SRC[15:8] ELSE (* Memory location unchanged *); FI;
    (* Repeat operation for 3rd through 6th bytes in source operand *)
IF (MASK[63] = 1)
    THEN DEST[DI/EDI +15] := SRC[63:56] ELSE (* Memory location unchanged *); FI;
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="maskmovq.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
void _mm_maskmove_si64(__m64d, __m64n, char * p)
.EE

.SH OTHER EXCEPTIONS
See Table 23-8, “Exception Conditions
for Legacy SIMD/MMX Instructions without FP Exception,” in the
Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 3B.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
