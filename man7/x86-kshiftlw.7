'\" t
.nh
.TH "X86-KSHIFTLW-KSHIFTLB-KSHIFTLQ-KSHIFTLD" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
KSHIFTLW-KSHIFTLB-KSHIFTLQ-KSHIFTLD - SHIFT LEFT MASK REGISTERS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
VEX.L0.66.0F3A.W1 32 /r KSHIFTLW k1, k2, imm8
T}	RRI	V/V	AVX512F	T{
Shift left 16 bits in k2 by immediate and write result in k1.
T}
T{
VEX.L0.66.0F3A.W0 32 /r KSHIFTLB k1, k2, imm8
T}	RRI	V/V	AVX512DQ	T{
Shift left 8 bits in k2 by immediate and write result in k1.
T}
T{
VEX.L0.66.0F3A.W1 33 /r KSHIFTLQ k1, k2, imm8
T}	RRI	V/V	AVX512BW	T{
Shift left 64 bits in k2 by immediate and write result in k1.
T}
T{
VEX.L0.66.0F3A.W0 33 /r KSHIFTLD k1, k2, imm8
T}	RRI	V/V	AVX512BW	T{
Shift left 32 bits in k2 by immediate and write result in k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING <a
href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l 
l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP
RRI	ModRM:reg (w)	ModRM:r/m (r, ModRM:[7:6] must be 11b)	imm8
.TE

.SH DESCRIPTION  href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#description"
class="anchor">¶

.PP
Shifts 8/16/32/64 bits in the second operand (source operand) left by
the count specified in immediate byte and place the least significant
8/16/32/64 bits of the result in the destination operand. The higher
bits of the destination are zero-extended. The destination is set to
zero if the count value is greater than 7 (for byte shift), 15 (for word
shift), 31 (for doubleword shift) or 63 (for quadword shift).

.SH OPERATION  href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#operation"
class="anchor">¶

.SS KSHIFTLW  href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#kshiftlw"
class="anchor">¶

.EX
COUNT := imm8[7:0]
DEST[MAX_KL-1:0] := 0
IF COUNT <=15
    THEN DEST[15:0] := SRC1[15:0] << COUNT;
FI;
.EE

.SS KSHIFTLB  href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#kshiftlb"
class="anchor">¶

.EX
COUNT := imm8[7:0]
DEST[MAX_KL-1:0] := 0
IF COUNT <=7
    THEN DEST[7:0] := SRC1[7:0] << COUNT;
FI;
.EE

.SS KSHIFTLQ  href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#kshiftlq"
class="anchor">¶

.EX
COUNT := imm8[7:0]
DEST[MAX_KL-1:0] := 0
IF COUNT <=63
    THEN DEST[63:0] := SRC1[63:0] << COUNT;
FI;
.EE

.SS KSHIFTLD  href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#kshiftld"
class="anchor">¶

.EX
COUNT := imm8[7:0]
DEST[MAX_KL-1:0] := 0
IF COUNT <=31
    THEN DEST[31:0] := SRC1[31:0] << COUNT;
FI;
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT <a
href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
Compiler auto generates KSHIFTLW when needed.
.EE

.SH FLAGS AFFECTED  href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#flags-affected"
class="anchor">¶

.PP
None.

.SH SIMD FLOATING-POINT EXCEPTIONS <a
href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS  href="./kshiftlw:kshiftlb:kshiftlq:kshiftld.html#other-exceptions"
class="anchor">¶

.PP
See Table 2-63, “TYPE K20 Exception
Definition (VEX-Encoded OpMask Instructions w/o Memory Arg).”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
