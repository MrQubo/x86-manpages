'\" t
.nh
.TH "X86-MOVDQ2Q" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MOVDQ2Q - MOVE QUADWORD FROM XMM TO MMX TECHNOLOGY REGISTER
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
F2 0F D6 /r	MOVDQ2Q mm, xmm	RM	Valid	Valid	T{
Move low quadword from xmm to mmx register.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Moves the low quadword from the source operand (second operand) to the
destination operand (first operand). The source operand is an XMM
register and the destination operand is an MMX technology register.

.PP
This instruction causes a transition from x87 FPU to MMX technology
operation (that is, the x87 FPU top-of-stack pointer is set to 0 and the
x87 FPU tag word is set to all 0s [valid]). If this instruction is
executed while an x87 FPU floating-point exception is pending, the
exception is handled before the MOVDQ2Q instruction is executed.

.PP
In 64-bit mode, use of the REX.R prefix permits this instruction to
access additional registers (XMM8-XMM15).

.SH OPERATION
.EX
DEST := SRC[63:0];
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="movdq2q.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
MOVDQ2Q __m64 _mm_movepi64_pi64 ( __m128i a)
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="movdq2q.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#NM	If CR0.TS[bit 3] = 1.
#UD	If CR0.EM[bit 2] = 1.
	If CR4.OSFXSR[bit 9] = 0.
	If CPUID.01H:EDX.SSE2[bit 26] = 0.
	If the LOCK prefix is used.
#MF	T{
If there is a pending x87 FPU exception.
T}
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH VIRTUAL-8086 MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS  href="movdq2q.html#compatibility-mode-exceptions"
class="anchor">¶

.PP
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
