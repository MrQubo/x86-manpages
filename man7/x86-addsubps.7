'\" t
.nh
.TH "X86-ADDSUBPS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
ADDSUBPS - PACKED SINGLE PRECISION FLOATING-POINT ADD-SUBTRACT
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32-bit Mode\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
F2 0F D0 /r ADDSUBPS xmm1, xmm2/m128
T}	RM	V/V	SSE3	T{
Add/subtract single precision floating-point values from xmm2/m128 to xmm1.
T}
T{
VEX.128.F2.0F.WIG D0 /r VADDSUBPS xmm1, xmm2, xmm3/m128
T}	RVM	V/V	AVX	T{
Add/subtract single precision floating-point values from xmm3/mem to xmm2 and stores result in xmm1.
T}
T{
VEX.256.F2.0F.WIG D0 /r VADDSUBPS ymm1, ymm2, ymm3/m256
T}	RVM	V/V	AVX	T{
Add / subtract single precision floating-point values from ymm3/mem to ymm2 and stores result in ymm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="addsubps.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (r, w)	ModRM:r/m (r)	N/A	N/A
RVM	ModRM:reg (w)	VEX.vvvv (r)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Adds odd-numbered single precision floating-point values of the first
source operand (second operand) with the corresponding single precision
floating-point values from the second source operand (third operand);
stores the result in the odd-numbered values of the destination operand
(first operand). Subtracts the even-numbered single precision
floating-point values from the second source operand from the
corresponding single precision floating values in the first source
operand; stores the result into the even-numbered values of the
destination operand.

.PP
In 64-bit mode, using a REX prefix in the form of REX.R permits this
instruction to access additional registers (XMM8-XMM15).

.PP
128-bit Legacy SSE version: The second source can be an XMM register or
an 128-bit memory location. The destination is not distinct from the
first source XMM register and the upper bits (MAXVL-1:128) of the
corresponding YMM register destination are unmodified. See Figure
3-4
\[la]addsubps.html#fig\-3\-4\[ra]\&.

.PP
VEX.128 encoded version: the first source operand is an XMM register or
128-bit memory location. The destination operand is an XMM register. The
upper bits (MAXVL-1:128) of the corresponding YMM register destination
are zeroed.

.PP
VEX.256 encoded version: The first source operand is a YMM register. The
second source operand can be a YMM register or a 256-bit memory
location. The destination operand is a YMM register.

.SH OPERATION
.SS ADDSUBPS (128-BIT LEGACY SSE VERSION)  href="addsubps.html#addsubps--128-bit-legacy-sse-version-"
class="anchor">¶

.EX
DEST[31:0] := DEST[31:0] - SRC[31:0]
DEST[63:32] := DEST[63:32] + SRC[63:32]
DEST[95:64] := DEST[95:64] - SRC[95:64]
DEST[127:96] := DEST[127:96] + SRC[127:96]
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS VADDSUBPS (VEX.128 ENCODED VERSION)  href="addsubps.html#vaddsubps--vex-128-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0] - SRC2[31:0]
DEST[63:32] := SRC1[63:32] + SRC2[63:32]
DEST[95:64] := SRC1[95:64] - SRC2[95:64]
DEST[127:96] := SRC1[127:96] + SRC2[127:96]
DEST[MAXVL-1:128] := 0
.EE

.SS VADDSUBPS (VEX.256 ENCODED VERSION)  href="addsubps.html#vaddsubps--vex-256-encoded-version-"
class="anchor">¶

.EX
DEST[31:0] := SRC1[31:0] - SRC2[31:0]
DEST[63:32] := SRC1[63:32] + SRC2[63:32]
DEST[95:64] := SRC1[95:64] - SRC2[95:64]
DEST[127:96] := SRC1[127:96] + SRC2[127:96]
DEST[159:128] := SRC1[159:128] - SRC2[159:128]
DEST[191:160] := SRC1[191:160] + SRC2[191:160]
DEST[223:192] := SRC1[223:192] - SRC2[223:192]
DEST[255:224] := SRC1[255:224] + SRC2[255:224]
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="addsubps.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
ADDSUBPS __m128 _mm_addsub_ps(__m128 a, __m128 b)

VADDSUBPS __m256 _mm256_addsub_ps (__m256 a, __m256 b)
.EE

.SH EXCEPTIONS
When the source operand is a memory operand, the operand must be aligned
on a 16-byte boundary or a general-protection exception (#GP) will be
generated.

.SH SIMD FLOATING-POINT EXCEPTIONS  href="addsubps.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Overflow, Underflow, Invalid, Precision, Denormal.

.SH OTHER EXCEPTIONS
See Table 2-19, “Type 2 Class
Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
