'\" t
.nh
.TH "X86-RDMSR" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
RDMSR - READ FROM MODEL SPECIFIC REGISTER
\fBOpcode1\fP

.TS
allbox;
l l l l l l 
l l l l l l .
\fB\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
0F 32			Valid	Valid	T{
Read MSR specified by ECX into EDX:EAX.
T}
.TE

.PP
1\&. See the IA-32 Architecture Compatibility section below.

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
ZO	N/A	N/A	N/A	N/A
.TE

.SH DESCRIPTION
Reads the contents of a 64-bit model specific register (MSR) specified
in the ECX register into registers EDX:EAX. (On processors that support
the Intel 64 architecture, the high-order 32 bits of RCX are ignored.)
The EDX register is loaded with the high-order 32 bits of the MSR and
the EAX register is loaded with the low-order 32 bits. (On processors
that support the Intel 64 architecture, the high-order 32 bits of each
of RAX and RDX are cleared.) If fewer than 64 bits are implemented in
the MSR being read, the values returned to EDX:EAX in unimplemented bit
locations are undefined.

.PP
This instruction must be executed at privilege level 0 or in
real-address mode; otherwise, a general protection exception #GP(0)
will be generated. Specifying a reserved or unimplemented MSR address in
ECX will also cause a general protection exception.

.PP
The MSRs control functions for testability, execution tracing,
performance-monitoring, and machine check errors. Chapter 2,
“Model-Specific Registers (MSRs)” of the Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 4, lists all the MSRs
that can be read with this instruction and their addresses. Note that
each processor family has its own set of MSRs.

.PP
The CPUID instruction should be used to determine whether MSRs are
supported (CPUID.01H:EDX[5] = 1) before using this instruction.

.SH IA-32 ARCHITECTURE COMPATIBILITY  href="rdmsr.html#ia-32-architecture-compatibility"
class="anchor">¶

.PP
The MSRs and the ability to read them with the RDMSR instruction were
introduced into the IA-32 Architecture with the Pentium processor.
Execution of this instruction by an IA-32 processor earlier than the
Pentium processor results in an invalid opcode exception #UD.

.PP
See “Changes to Instruction Behavior in VMX Non-Root Operation” in
Chapter 26 of the Intel® 64 and IA-32 Architectures Software
Developer’s Manual, Volume 3C, for more information about the behavior
of this instruction in VMX non-root operation.

.SH OPERATION
.EX
EDX:EAX := MSR[ECX];
.EE

.SH FLAGS AFFECTED
None.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the current privilege level is not 0.
T}
	T{
If the value in ECX specifies a reserved or unimplemented MSR address.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If the value in ECX specifies a reserved or unimplemented MSR address.
T}
#UD	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
The RDMSR instruction is not recognized in virtual-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
