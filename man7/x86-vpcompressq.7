'\" t
.nh
.TH "X86-VPCOMPRESSQ" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VPCOMPRESSQ - STORE SPARSE PACKED QUADWORD INTEGER VALUES INTO DENSE MEMORY-REGISTER
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.128.66.0F38.W1 8B /r VPCOMPRESSQ xmm1/m128 {k1}{z}, xmm2
T}	A	V/V	AVX512VL AVX512F	T{
Compress packed quadword integer values from xmm2 to xmm1/m128 using control mask k1.
T}
T{
EVEX.256.66.0F38.W1 8B /r VPCOMPRESSQ ymm1/m256 {k1}{z}, ymm2
T}	A	V/V	AVX512VL AVX512F	T{
Compress packed quadword integer values from ymm2 to ymm1/m256 using control mask k1.
T}
T{
EVEX.512.66.0F38.W1 8B /r VPCOMPRESSQ zmm1/m512 {k1}{z}, zmm2
T}	A	V/V	AVX512F	T{
Compress packed quadword integer values from zmm2 to zmm1/m512 using control mask k1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vpcompressq.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Tuple1 Scalar	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SS DESCRIPTION
Compress (stores) up to 8/4/2 quadword integer values from the source
operand (second operand) to the destination operand (first operand). The
source operand is a ZMM/YMM/XMM register, the destination operand can be
a ZMM/YMM/XMM register or a 512/256/128-bit memory location.

.PP
The opmask register k1 selects the active elements (partial vector or
possibly non-contiguous if less than 8 active elements) from the source
operand to compress into a contiguous vector. The contiguous vector is
written to the destination starting from the low element of the
destination operand.

.PP
Memory destination version: Only the contiguous vector is written to the
destination memory location. EVEX.z must be zero.

.PP
Register destination version: If the vector length of the contiguous
vector is less than that of the input vector in the source operand, the
upper bits of the destination register are unmodified if EVEX.z is not
set, otherwise the upper bits are zeroed.

.PP
Note: EVEX.vvvv is reserved and must be 1111b otherwise instructions
will #UD.

.PP
Note that the compressed displacement assumes a pre-scaling (N)
corresponding to the size of one single element instead of the size of
the full vector.

.SS OPERATION
.SS VPCOMPRESSQ (EVEX ENCODED VERSIONS) STORE FORM <a
href="vpcompressq.html#vpcompressq--evex-encoded-versions--store-form"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
SIZE := 64
k := 0
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no controlmask*
        THEN
            DEST[k+SIZE-1:k] := SRC[i+63:i]
            k := k + SIZE
    FI;
ENFOR
.EE

.SS VPCOMPRESSQ (EVEX ENCODED VERSIONS) REG-REG FORM <a
href="vpcompressq.html#vpcompressq--evex-encoded-versions--reg-reg-form"
class="anchor">¶

.EX
(KL, VL) = (2, 128), (4, 256), (8, 512)
SIZE := 64
k := 0
FOR j := 0 TO KL-1
    i := j * 64
    IF k1[j] OR *no controlmask*
        THEN
                DEST[k+SIZE-1:k] := SRC[i+63:i]
                k := k + SIZE
    FI;
ENDFOR
IF *merging-masking*
            THEN *DEST[VL-1:k] remains unchanged*
            ELSE DEST[VL-1:k] := 0
FI
DEST[MAXVL-1:VL] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vpcompressq.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VPCOMPRESSQ __m512i _mm512_mask_compress_epi64(__m512i s, __mmask8 c, __m512i a);

VPCOMPRESSQ __m512i _mm512_maskz_compress_epi64( __mmask8 c, __m512i a);

VPCOMPRESSQ void _mm512_mask_compressstoreu_epi64(void * a, __mmask8 c, __m512i s);

VPCOMPRESSQ __m256i _mm256_mask_compress_epi64(__m256i s, __mmask8 c, __m256i a);

VPCOMPRESSQ __m256i _mm256_maskz_compress_epi64( __mmask8 c, __m256i a);

VPCOMPRESSQ void _mm256_mask_compressstoreu_epi64(void * a, __mmask8 c, __m256i s);

VPCOMPRESSQ __m128i _mm_mask_compress_epi64(__m128i s, __mmask8 c, __m128i a);

VPCOMPRESSQ __m128i _mm_maskz_compress_epi64( __mmask8 c, __m128i a);

VPCOMPRESSQ void _mm_mask_compressstoreu_epi64(void * a, __mmask8 c, __m128i s);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vpcompressq.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None

.SS OTHER EXCEPTIONS
EVEX-encoded instruction, see Exceptions Type E4.nb in
Table 2-49, “Type E4 Class Exception
Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
