'\" t
.nh
.TH "X86-BNDCL" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
BNDCL - CHECK LOWER BOUND
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
F3 0F 1A /r BNDCL bnd, r/m32	RM	N.E./V	MPX	Generate a #BR if the address in r/m32 is lower than the lower bound in bnd.LB.
F3 0F 1A /r BNDCL bnd, r/m64	RM	V/N.E.	MPX	Generate a #BR if the address in r/m64 is lower than the lower bound in bnd.LB.
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l 
l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A
.TE

.SH DESCRIPTION
Compare the address in the second operand with the lower bound in bnd.
The second operand can be either a register or memory operand. If the
address is lower than the lower bound in bnd.LB, it will set BNDSTATUS
to 01H and signal a #BR exception.

.PP
This instruction does not cause any memory access, and does not read or
write any flags.

.SH OPERATION
.SS BNDCL BND, REG
.EX
IF reg < BND.LB Then
    BNDSTATUS := 01H;
    #BR;
FI;
.EE

.SS BNDCL BND, MEM
.EX
TEMP := LEA(mem);
IF TEMP < BND.LB Then
    BNDSTATUS := 01H;
    #BR;
FI;
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="bndcl.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
BNDCL void _bnd_chk_ptr_lbounds(const void *q)
.EE

.SH FLAGS AFFECTED
None

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#BR	If lower bound check fails.
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	T{
If 67H prefix is not used and CS.D=0.
T}
	T{
If 67H prefix is used and CS.D=1.
T}
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#BR	If lower bound check fails.
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	If 16-bit addressing is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#BR	If lower bound check fails.
#UD	If the LOCK prefix is used.
	T{
If ModRM.r/m encodes BND4-BND7 when Intel MPX is enabled.
T}
	If 16-bit addressing is used.
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
If ModRM.r/m and REX encodes BND4-BND15 when Intel MPX is enabled.
T}
.TE

.PP
Same exceptions as in protected mode.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
