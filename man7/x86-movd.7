'\" t
.nh
.TH "X86-MOVD-MOVQ" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
MOVD-MOVQ - MOVE DOUBLEWORD-MOVE QUADWORD
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/ En\fP	\fB64/32-bit Mode\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
NP 0F 6E /r MOVD mm, r/m32	A	V/V	MMX	T{
Move doubleword from r/m32 to mm.
T}
T{
NP REX.W + 0F 6E /r MOVQ mm, r/m64
T}	A	V/N.E.	MMX	T{
Move quadword from r/m64 to mm.
T}
NP 0F 7E /r MOVD r/m32, mm	B	V/V	MMX	T{
Move doubleword from mm to r/m32.
T}
T{
NP REX.W + 0F 7E /r MOVQ r/m64, mm
T}	B	V/N.E.	MMX	T{
Move quadword from mm to r/m64.
T}
66 0F 6E /r MOVD xmm, r/m32	A	V/V	SSE2	T{
Move doubleword from r/m32 to xmm.
T}
T{
66 REX.W 0F 6E /r MOVQ xmm, r/m64
T}	A	V/N.E.	SSE2	T{
Move quadword from r/m64 to xmm.
T}
66 0F 7E /r MOVD r/m32, xmm	B	V/V	SSE2	T{
Move doubleword from xmm register to r/m32.
T}
T{
66 REX.W 0F 7E /r MOVQ r/m64, xmm
T}	B	V/N.E.	SSE2	T{
Move quadword from xmm register to r/m64.
T}
T{
VEX.128.66.0F.W0 6E / VMOVD xmm1, r32/m32
T}	A	V/V	AVX	T{
Move doubleword from r/m32 to xmm1.
T}
T{
VEX.128.66.0F.W1 6E /r VMOVQ xmm1, r64/m64
T}	A	V/N.E1\&.	AVX	T{
Move quadword from r/m64 to xmm1.
T}
T{
VEX.128.66.0F.W0 7E /r VMOVD r32/m32, xmm1
T}	B	V/V	AVX	T{
Move doubleword from xmm1 register to r/m32.
T}
T{
VEX.128.66.0F.W1 7E /r VMOVQ r64/m64, xmm1
T}	B	V/N.E1\&.	AVX	T{
Move quadword from xmm1 register to r/m64.
T}
T{
EVEX.128.66.0F.W0 6E /r VMOVD xmm1, r32/m32
T}	C	V/V	AVX512F	T{
Move doubleword from r/m32 to xmm1.
T}
T{
EVEX.128.66.0F.W1 6E /r VMOVQ xmm1, r64/m64
T}	C	V/N.E.1	AVX512F	T{
Move quadword from r/m64 to xmm1.
T}
T{
EVEX.128.66.0F.W0 7E /r VMOVD r32/m32, xmm1
T}	D	V/V	AVX512F	T{
Move doubleword from xmm1 register to r/m32.
T}
T{
EVEX.128.66.0F.W1 7E /r VMOVQ r64/m64, xmm1
T}	D	V/N.E.1	AVX512F	T{
Move quadword from xmm1 register to r/m64.
T}
.TE

.PP
.RS

.PP
1\&. For this specific instruction, VEX.W/EVEX.W in non-64 bit is
ignored; the instruction behaves as if the W0 version is used.

.RE

.SH INSTRUCTION OPERAND ENCODING  href="./movd:movq.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
B	N/A	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
C	Tuple1 Scalar	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
D	Tuple1 Scalar	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SH DESCRIPTION
Copies a doubleword from the source operand (second operand) to the
destination operand (first operand). The source and destination operands
can be general-purpose registers, MMX technology registers, XMM
registers, or 32-bit memory locations. This instruction can be used to
move a doubleword to and from the low doubleword of an MMX technology
register and a general-purpose register or a 32-bit memory location, or
to and from the low doubleword of an XMM register and a general-purpose
register or a 32-bit memory location. The instruction cannot be used to
transfer data between MMX technology registers, between XMM registers,
between general-purpose registers, or between memory locations.

.PP
When the destination operand is an MMX technology register, the source
operand is written to the low doubleword of the register, and the
register is zero-extended to 64 bits. When the destination operand is an
XMM register, the source operand is written to the low doubleword of the
register, and the register is zero-extended to 128 bits.

.PP
In 64-bit mode, the instruction’s default operation size is 32 bits. Use
of the REX.R prefix permits access to additional registers (R8-R15). Use
of the REX.W prefix promotes operation to 64 bits. See the summary chart
at the beginning of this section for encoding data and limits.

.PP
MOVD/Q with XMM destination:

.PP
Moves a dword/qword integer from the source operand and stores it in the
low 32/64-bits of the destination XMM register. The upper bits of the
destination are zeroed. The source operand can be a 32/64-bit register
or 32/64-bit memory location.

.PP
128-bit Legacy SSE version: Bits (MAXVL-1:128) of the corresponding YMM
destination register remain unchanged. Qword operation requires the use
of REX.W=1.

.PP
VEX.128 encoded version: Bits (MAXVL-1:128) of the destination register
are zeroed. Qword operation requires the use of VEX.W=1.

.PP
EVEX.128 encoded version: Bits (MAXVL-1:128) of the destination register
are zeroed. Qword operation requires the use of EVEX.W=1.

.PP
MOVD/Q with 32/64 reg/mem destination:

.PP
Stores the low dword/qword of the source XMM register to 32/64-bit
memory location or general-purpose register. Qword operation requires
the use of REX.W=1, VEX.W=1, or EVEX.W=1.

.PP
Note: VEX.vvvv and EVEX.vvvv are reserved and must be 1111b otherwise
instructions will #UD.

.PP
If VMOVD or VMOVQ is encoded with VEX.L= 1, an attempt to execute the
instruction encoded with VEX.L= 1 will cause an #UD exception.

.SH OPERATION
.SS MOVD (WHEN DESTINATION OPERAND IS AN MMX TECHNOLOGY REGISTER) <a
href="./movd:movq.html#movd--when-destination-operand-is-an-mmx-technology-register-"
class="anchor">¶

.EX
DEST[31:0] := SRC;
DEST[63:32] := 00000000H;
.EE

.SS MOVD (WHEN DESTINATION OPERAND IS AN XMM REGISTER) <a
href="./movd:movq.html#movd--when-destination-operand-is-an-xmm-register-"
class="anchor">¶

.EX
DEST[31:0] := SRC;
DEST[127:32] := 000000000000000000000000H;
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS MOVD (WHEN SOURCE OPERAND IS AN MMX TECHNOLOGY OR XMM REGISTER) <a
href="./movd:movq.html#movd--when-source-operand-is-an-mmx-technology-or-xmm-register-"
class="anchor">¶

.EX
DEST := SRC[31:0];
.EE

.SS VMOVD (VEX-ENCODED VERSION WHEN DESTINATION IS AN XMM REGISTER) <a
href="./movd:movq.html#vmovd--vex-encoded-version-when-destination-is-an-xmm-register-"
class="anchor">¶

.EX
DEST[31:0] := SRC[31:0]
DEST[MAXVL-1:32] := 0
.EE

.SS MOVQ (WHEN DESTINATION OPERAND IS AN XMM REGISTER) <a
href="./movd:movq.html#movq--when-destination-operand-is-an-xmm-register-"
class="anchor">¶

.EX
DEST[63:0] := SRC[63:0];
DEST[127:64] := 0000000000000000H;
DEST[MAXVL-1:128] (Unmodified)
.EE

.SS MOVQ (WHEN DESTINATION OPERAND IS R/M64)  href="./movd:movq.html#movq--when-destination-operand-is-r-m64-"
class="anchor">¶

.EX
DEST[63:0] := SRC[63:0];
.EE

.SS MOVQ (WHEN SOURCE OPERAND IS AN XMM REGISTER OR R/M64) <a
href="./movd:movq.html#movq--when-source-operand-is-an-xmm-register-or-r-m64-"
class="anchor">¶

.EX
DEST := SRC[63:0];
.EE

.SS VMOVQ (VEX-ENCODED VERSION WHEN DESTINATION IS AN XMM REGISTER) <a
href="./movd:movq.html#vmovq--vex-encoded-version-when-destination-is-an-xmm-register-"
class="anchor">¶

.EX
DEST[63:0] := SRC[63:0]
DEST[MAXVL-1:64] := 0
.EE

.SS VMOVD (EVEX-ENCODED VERSION WHEN DESTINATION IS AN XMM REGISTER) <a
href="./movd:movq.html#vmovd--evex-encoded-version-when-destination-is-an-xmm-register-"
class="anchor">¶

.EX
DEST[31:0] := SRC[31:0]
DEST[MAXVL-1:32] := 0
.EE

.SS VMOVQ (EVEX-ENCODED VERSION WHEN DESTINATION IS AN XMM REGISTER) <a
href="./movd:movq.html#vmovq--evex-encoded-version-when-destination-is-an-xmm-register-"
class="anchor">¶

.EX
DEST[63:0] := SRC[63:0]
DEST[MAXVL-1:64] := 0
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="./movd:movq.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
MOVD __m64 _mm_cvtsi32_si64 (int i )

MOVD int _mm_cvtsi64_si32 ( __m64m )

MOVD __m128i _mm_cvtsi32_si128 (int a)

MOVD int _mm_cvtsi128_si32 ( __m128i a)

MOVQ __int64 _mm_cvtsi128_si64(__m128i);

MOVQ __m128i _mm_cvtsi64_si128(__int64);

VMOVD __m128i _mm_cvtsi32_si128( int);

VMOVD int _mm_cvtsi128_si32( __m128i );

VMOVQ __m128i _mm_cvtsi64_si128 (__int64);

VMOVQ __int64 _mm_cvtsi128_si64(__m128i );

VMOVQ __m128i _mm_loadl_epi64( __m128i * s);

VMOVQ void _mm_storel_epi64( __m128i * d, __m128i s);
.EE

.SH FLAGS AFFECTED
None.

.SH SIMD FLOATING-POINT EXCEPTIONS  href="./movd:movq.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SH OTHER EXCEPTIONS
Non-EVEX-encoded instruction, see Table
2-22, “Type 5 Class Exception Conditions.”

.PP
EVEX-encoded instruction, see Table
2-57, “Type E9NF Class Exception Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If VEX.L = 1.
	T{
If VEX.vvvv != 1111B or EVEX.vvvv != 1111B.
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
