'\" t
.nh
.TH "X86-XSAVE" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
XSAVE - SAVE PROCESSOR EXTENDED STATES
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode / Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
NP 0F AE /4 XSAVE mem	M	V/V	XSAVE	T{
Save state components specified by EDX:EAX to mem.
T}
T{
NP REX.W + 0F AE /4 XSAVE64 mem
T}	M	V/N.E.	XSAVE	T{
Save state components specified by EDX:EAX to mem.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
M	ModRM:r/m (r, w)	N/A	N/A	N/A
.TE

.SH DESCRIPTION
Performs a full or partial save of processor state components to the
XSAVE area located at the memory address specified by the destination
operand. The implicit EDX:EAX register pair specifies a 64-bit
instruction mask. The specific state components saved correspond to the
bits set in the requested-feature bitmap (RFBM), which is the
logical-AND of EDX:EAX and XCR0.

.PP
The format of the XSAVE area is detailed in Section 13.4, “XSAVE Area,”
of Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 1. Like FXRSTOR and FXSAVE, the memory format used for
x87 state depends on a REX.W prefix; see Section 13.5.1, “x87 State” of
Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 1.

.PP
Section 13.7, “Operation of XSAVE,” of Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 1 provides a detailed
description of the operation of the XSAVE instruction. The following
items provide a high-level outline:
.IP \(bu 2
XSAVE saves state component \fIi\fP if and only if RFBM[\fIi\fP] =
1.1
.IP \(bu 2
XSAVE does not modify bytes 511:464 of the legacy region of the
XSAVE area (see Section 13.4.1, “Legacy Region of an XSAVE Area” of
Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 1).
.IP \(bu 2
XSAVE reads the XSTATE_BV field of the XSAVE header (see Section
13.4.2, “XSAVE Header” of Intel® 64 and IA-32
Architectures Software Developer’s Manual, Volume 1) and writes a
modified value back to memory as follows. If RFBM[\fIi\fP] = 1, XSAVE
writes XSTATE_BV[\fIi\fP] with the value of XINUSE[\fIi\fP]\&. (XINUSE is
a bitmap by which the processor tracks the status of various state
components. See Section 13.6, “Processor Tracking of XSAVEManaged
State” of Intel® 64 and IA-32 Architectures Software
Developer’s Manual, Volume 1.) If RFBM[\fIi\fP] = 0, XSAVE writes
XSTATE_BV[\fIi\fP] with the value that it read from memory (it does
not modify the bit). XSAVE does not write to any part of the XSAVE
header other than the XSTATE_BV field.
.IP \(bu 2
XSAVE always uses the standard format of the extended region of the
XSAVE area (see Section 13.4.3, “Extended Region of an XSAVE Area”
of Intel® 64 and IA-32 Architectures Software Developer’s
Manual, Volume 1).

.PP
.RS

.PP
1\&. An exception is made for MXCSR and MXCSR_MASK, which belong to
state component 1 — SSE. XSAVE saves these values to memory if either
RFBM[1] or RFBM[2] is 1.

.RE

.PP
Use of a destination operand not aligned to 64-byte boundary (in either
64-bit or 32-bit modes) results in a general-protection (#GP) exception.
In 64-bit mode, the upper 32 bits of RDX and RAX are ignored.

.SH OPERATION
.EX
RFBM := XCR0 AND EDX:EAX; /* bitwise logical AND */
OLD_BV := XSTATE_BV field from XSAVE header;
IF RFBM[0] = 1
    THEN store x87 state into legacy region of XSAVE area;
FI;
IF RFBM[1] = 1
    THEN store XMM registers into legacy region of XSAVE area; // this step does not save MXCSR or MXCSR_MASK
FI;
IF RFBM[1] = 1 OR RFBM[2] = 1
    THEN store MXCSR and MXCSR_MASK into legacy region of XSAVE area;
FI;
FOR i := 2 TO 62
    IF RFBM[i] = 1
        THEN save XSAVE state component i at offset n from base of XSAVE area (n enumerated by CPUID(EAX=0DH,ECX=i):EBX);
    FI;
ENDFOR;
XSTATE_BV field in XSAVE header := (OLD_BV AND NOT RFBM) OR (XINUSE AND RFBM);
.EE

.SH FLAGS AFFECTED
None.

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="xsave.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
XSAVE void _xsave( void * , unsigned __int64);

XSAVE void _xsave64( void * , unsigned __int64);
.EE

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If a memory operand is not aligned on a 64-byte boundary, regardless of segment.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#NM	If CR0.TS[bit 3] = 1.
#UD	If CPUID.01H:ECX.XSAVE[bit 26] = 0.
	If CR4.OSXSAVE[bit 18] = 0.
	If the LOCK prefix is used.
#AC	T{
If this exception is disabled a general protection exception (#GP) is signaled if the memory operand is not aligned on a 64-byte boundary, as described above. If the alignment check exception (#AC) is enabled (and the CPL is 3), signaling of #AC is not guaranteed and may vary with implementation, as follows. In all implementations where #AC is not signaled, a general protection exception is signaled in its place. In addition, the width of the alignment check may also vary with implementation. For instance, for a given implementation, an alignment check exception might be signaled for a 2-byte misalignment, whereas a general protection exception might be signaled for all other misalignments (4-, 8-, or 16-byte misalignments).
T}
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP	T{
If a memory operand is not aligned on a 64-byte boundary, regardless of segment.
T}
	T{
If any part of the operand lies outside the effective address space from 0 to FFFFH.
T}
#NM	If CR0.TS[bit 3] = 1.
#UD	If CPUID.01H:ECX.XSAVE[bit 26] = 0.
	If CR4.OSXSAVE[bit 18] = 0.
	If the LOCK prefix is used.
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If the memory address is in a non-canonical form.
T}
	T{
If a memory operand is not aligned on a 64-byte boundary, regardless of segment.
T}
#SS(0)	T{
If a memory address referencing the SS segment is in a non-canonical form.
T}
#PF(fault-code)	If a page fault occurs.
#NM	If CR0.TS[bit 3] = 1.
#UD	If CPUID.01H:ECX.XSAVE[bit 26] = 0.
	If CR4.OSXSAVE[bit 18] = 0.
	If the LOCK prefix is used.
#AC	T{
If this exception is disabled a general protection exception (#GP) is signaled if the memory operand is not aligned on a 64-byte boundary, as described above. If the alignment check exception (#AC) is enabled (and the CPL is 3), signaling of #AC is not guaranteed and may vary with implementation, as follows. In all implementations where #AC is not signaled, a general protection exception is signaled in its place. In addition, the width of the alignment check may also vary with implementation. For instance, for a given implementation, an alignment check exception might be signaled for a 2-byte misalignment, whereas a general protection exception might be signaled for all other misalignments (4-, 8-, or 16-byte misalignments).
T}
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
