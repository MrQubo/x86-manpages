'\" t
.nh
.TH "X86-VFPCLASSSH" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VFPCLASSSH - TEST TYPES OF SCALAR FP16 VALUES
.TS
allbox;
l l l l l 
l l l l l .
\fBInstruction En Bit Mode Flag Support Instruction En Bit Mode Flag Support 64/32 CPUID Feature Instruction En Bit Mode Flag CPUID Feature Instruction En Bit Mode Flag Op/ 64/32 CPUID Feature Instruction En Bit Mode Flag 64/32 CPUID Feature Instruction En Bit Mode Flag CPUID Feature Instruction En Bit Mode Flag Op/ 64/32 CPUID Feature\fP	\fB\fP	\fBSupport\fP	\fB\fP	\fBDescription\fP
T{
EVEX.LLIG.NP.0F3A.W0 67 /r /ib VFPCLASSSH k1{k2}, xmm1/m16, imm8
T}	A	V/V	AVX512-FP16	T{
Test the input for the following categories: NaN, +0, -0, +Infinity, -Infinity, denormal, finite negative. The immediate field provides a mask bit for each of these category tests. The masked test results are OR-ed together to form a mask result.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vfpclasssh.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Scalar	ModRM:reg (w)	ModRM:r/m (r)	imm8 (r)	N/A
.TE

.SS DESCRIPTION
This instruction checks the low FP16 value in the source operand for
special categories, specified by the set bits in the imm8 byte. Each set
bit in imm8 specifies a category of floating-point values that the input
data element is classified against; see Table
5-9
\[la]vfpclassph.html#tbl\-5\-9\[ra] for the categories. The classified results
of all specified categories of an input value are ORed together to form
the final boolean result for the input element. The result is written to
the low bit in the destination mask register according to the writemask.
The other bits in the destination mask register are zeroed.

.SS OPERATION
.SS VFPCLASSSH DEST{K2}, SRC, IMM8  href="vfpclasssh.html#vfpclasssh-dest-k2---src--imm8"
class="anchor">¶

.EX
IF k2[0] or *no writemask*:
    DEST.bit[0] := check_fp_class_fp16(src.fp16[0], imm8)
        // see VFPCLASSPH
ELSE:
    DEST.bit[0] := 0
DEST[MAXKL-1:1] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vfpclasssh.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VFPCLASSSH __mmask8 _mm_fpclass_sh_mask (__m128h a, int imm8);

VFPCLASSSH __mmask8 _mm_mask_fpclass_sh_mask (__mmask8 k1, __m128h a, int imm8);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vfpclasssh.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SS OTHER EXCEPTIONS
EVEX-encoded instructions, see Table
2-58, “Type E10 Class Exception Conditions.”

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
