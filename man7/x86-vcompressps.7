'\" t
.nh
.TH "X86-VCOMPRESSPS" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
VCOMPRESSPS - STORE SPARSE PACKED SINGLE PRECISION FLOATING-POINT VALUES INTO DENSE MEMORY
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 Bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
EVEX.128.66.0F38.W0 8A /r VCOMPRESSPS xmm1/m128 {k1}{z}, xmm2
T}	A	V/V	AVX512VL AVX512F	T{
Compress packed single precision floating-point values from xmm2 to xmm1/m128 using writemask k1.
T}
T{
EVEX.256.66.0F38.W0 8A /r VCOMPRESSPS ymm1/m256 {k1}{z}, ymm2
T}	A	V/V	AVX512VL AVX512F	T{
Compress packed single precision floating-point values from ymm2 to ymm1/m256 using writemask k1.
T}
T{
EVEX.512.66.0F38.W0 8A /r VCOMPRESSPS zmm1/m512 {k1}{z}, zmm2
T}	A	V/V	AVX512F	T{
Compress packed single precision floating-point values from zmm2 using control mask k1 to zmm1/m512.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="vcompressps.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple Type\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	Tuple1 Scalar	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SS DESCRIPTION
Compress (stores) up to 16 single precision floating-point values from
the source operand (the second operand) to the destination operand (the
first operand). The source operand is a ZMM/YMM/XMM register, the
destination operand can be a ZMM/YMM/XMM register or a 512/256/128-bit
memory location.

.PP
The opmask register k1 selects the active elements (a partial vector or
possibly non-contiguous if less than 16 active elements) from the source
operand to compress into a contiguous vector. The contiguous vector is
written to the destination starting from the low element of the
destination operand.

.PP
Memory destination version: Only the contiguous vector is written to the
destination memory location. EVEX.z must be zero.

.PP
Register destination version: If the vector length of the contiguous
vector is less than that of the input vector in the source operand, the
upper bits of the destination register are unmodified if EVEX.z is not
set, otherwise the upper bits are zeroed.

.PP
EVEX.vvvv is reserved and must be 1111b otherwise instructions will
#UD.

.PP
Note that the compressed displacement assumes a pre-scaling (N)
corresponding to the size of one single element instead of the size of
the full vector.

.SS OPERATION
.SS VCOMPRESSPS (EVEX ENCODED VERSIONS) STORE FORM <a
href="vcompressps.html#vcompressps--evex-encoded-versions--store-form"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
SIZE := 32
k := 0
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN
            DEST[k+SIZE-1:k] := SRC[i+31:i]
            k := k + SIZE
    FI;
ENDFOR;
.EE

.SS VCOMPRESSPS (EVEX ENCODED VERSIONS) REG-REG FORM <a
href="vcompressps.html#vcompressps--evex-encoded-versions--reg-reg-form"
class="anchor">¶

.EX
(KL, VL) = (4, 128), (8, 256), (16, 512)
SIZE := 32
k := 0
FOR j := 0 TO KL-1
    i := j * 32
    IF k1[j] OR *no writemask*
        THEN
            DEST[k+SIZE-1:k] := SRC[i+31:i]
            k := k + SIZE
    FI;
ENDFOR
IF *merging-masking*
    THEN *DEST[VL-1:k] remains unchanged*
    ELSE DEST[VL-1:k] := 0
FI
DEST[MAXVL-1:VL] := 0
.EE

.SS INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="vcompressps.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
VCOMPRESSPS __m512 _mm512_mask_compress_ps( __m512 s, __mmask16 k, __m512 a);

VCOMPRESSPS __m512 _mm512_maskz_compress_ps( __mmask16 k, __m512 a);

VCOMPRESSPS void _mm512_mask_compressstoreu_ps( void * d, __mmask16 k, __m512 a);

VCOMPRESSPS __m256 _mm256_mask_compress_ps( __m256 s, __mmask8 k, __m256 a);

VCOMPRESSPS __m256 _mm256_maskz_compress_ps( __mmask8 k, __m256 a);

VCOMPRESSPS void _mm256_mask_compressstoreu_ps( void * d, __mmask8 k, __m256 a);

VCOMPRESSPS __m128 _mm_mask_compress_ps( __m128 s, __mmask8 k, __m128 a);

VCOMPRESSPS __m128 _mm_maskz_compress_ps( __mmask8 k, __m128 a);

VCOMPRESSPS void _mm_mask_compressstoreu_ps( void * d, __mmask8 k, __m128 a);
.EE

.SS SIMD FLOATING-POINT EXCEPTIONS  href="vcompressps.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
None.

.SS OTHER EXCEPTIONS
EVEX-encoded instructions, see Exceptions Type E4.nb. in
Table 2-49, “Type E4 Class Exception
Conditions.”

.PP
Additionally:

.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	If EVEX.vvvv != 1111B.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
