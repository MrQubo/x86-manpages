'\" t
.nh
.TH "X86-LAR" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
LAR - LOAD ACCESS RIGHTS BYTE
.TS
allbox;
l l l l l l 
l l l l l l .
\fBOpcode\fP	\fBInstruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
0F 02 /r	LAR r16, r16/m16	RM	Valid	Valid	T{
r16 := access rights referenced by r16/m16
T}
0F 02 /r	LAR reg, r32/m161	RM	Valid	Valid	T{
reg := access rights referenced by r32/m16
T}
.TE

.PP
.RS

.PP
1\&. For all loads (regardless of source or destination sizing) only
bits 16-0 are used. Other bits are ignored.

.RE

.SH INSTRUCTION OPERAND ENCODING
.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Loads the access rights from the segment descriptor specified by the
second operand (source operand) into the first operand (destination
operand) and sets the ZF flag in the flag register. The source operand
(which can be a register or a memory location) contains the segment
selector for the segment descriptor being accessed. If the source
operand is a memory address, only 16 bits of data are accessed. The
destination operand is a general-purpose register.

.PP
The processor performs access checks as part of the loading process.
Once loaded in the destination register, software can perform additional
checks on the access rights information.

.PP
The access rights for a segment descriptor include fields located in the
second doubleword (bytes 4–7) of the segment descriptor. The following
fields are loaded by the LAR instruction:
.IP \(bu 2
Bits 7:0 are returned as 0
.IP \(bu 2
Bits 11:8 return the segment type.
.IP \(bu 2
Bit 12 returns the S flag.
.IP \(bu 2
Bits 14:13 return the DPL.
.IP \(bu 2
Bit 15 returns the P flag.
.IP \(bu 2
The following fields are returned only if the operand size is
greater than 16 bits:
.RS
.IP \(bu 2
Bits 19:16 are undefined.
.IP \(bu 2
Bits 19:16 are undefined.
.IP \(bu 2
Bit 20 returns the software-available bit in the descriptor.
.IP \(bu 2
Bit 20 returns the software-available bit in the descriptor.
.IP \(bu 2
Bit 21 returns the L flag.
.IP \(bu 2
Bit 21 returns the L flag.
.IP \(bu 2
Bit 22 returns the D/B flag.
.IP \(bu 2
Bit 22 returns the D/B flag.
.IP \(bu 2
Bit 23 returns the G flag.
.IP \(bu 2
Bit 23 returns the G flag.
.IP \(bu 2
Bits 31:24 are returned as 0.
.IP \(bu 2
Bits 31:24 are returned as 0.
.RE

.PP
This instruction performs the following checks before it loads the
access rights in the destination register:
.IP \(bu 2
Checks that the segment selector is not NULL.
.IP \(bu 2
Checks that the segment selector points to a descriptor that is
within the limits of the GDT or LDT being accessed
.IP \(bu 2
Checks that the descriptor type is valid for this instruction. All
code and data segment descriptors are valid for (can be accessed
with) the LAR instruction. The valid system segment and gate
descriptor types are given in Table 3-53
\[la]lar.html#tbl\-3\-53\[ra]\&.
.IP \(bu 2
If the segment is not a conforming code segment, it checks that the
specified segment descriptor is visible at the CPL (that is, if the
CPL and the RPL of the segment selector are less than or equal to
the DPL of the segment selector).

.PP
If the segment descriptor cannot be accessed or is an invalid type for
the instruction, the ZF flag is cleared and no access rights are loaded
in the destination operand.

.PP
The LAR instruction can only be executed in protected mode and IA-32e
mode.

.SH OPERATION
.EX
IF Offset(SRC) > descriptor table limit
    THEN
        ZF := 0;
    ELSE
        SegmentDescriptor := descriptor referenced by SRC;
        IF SegmentDescriptor(Type) ≠ conforming code segment
        and (CPL > DPL) or (RPL > DPL)
        or SegmentDescriptor(Type) is not valid for instruction
            THEN
                ZF := 0;
            ELSE
                DEST := access rights from SegmentDescriptor as given in Description section;
                ZF := 1;
        FI;
FI;
.EE

.SH FLAGS AFFECTED
The ZF flag is set to 1 if the access rights are loaded successfully;
otherwise, it is cleared to 0.

.SH PROTECTED MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#GP(0)	T{
If a memory operand effective address is outside the CS, DS, ES, FS, or GS segment limit.
T}
	T{
If the DS, ES, FS, or GS register is used to access memory and it contains a NULL segment selector.
T}
#SS(0)	T{
If a memory operand effective address is outside the SS segment limit.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and the memory operand effective address is unaligned while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH REAL-ADDRESS MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
The LAR instruction is not recognized in real-address mode.
T}
.TE

.SH VIRTUAL-8086 MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#UD	T{
The LAR instruction cannot be executed in virtual-8086 mode.
T}
.TE

.SH COMPATIBILITY MODE EXCEPTIONS
Same exceptions as in protected mode.

.SH 64-BIT MODE EXCEPTIONS
.TS
allbox;
l l 
l l .
\fB\fP	\fB\fP
#SS(0)	T{
If the memory operand effective address referencing the SS segment is in a non-canonical form.
T}
#GP(0)	T{
If the memory operand effective address is in a non-canonical form.
T}
#PF(fault-code)	If a page fault occurs.
#AC(0)	T{
If alignment checking is enabled and the memory operand effective address is unaligned while the current privilege level is 3.
T}
#UD	If the LOCK prefix is used.
.TE

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
