'\" t
.nh
.TH "X86-TILESTORED" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
TILESTORED - STORE TILE
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64/32 bit Mode Support\fP	\fBCPUID Feature Flag\fP	\fBDescription\fP
T{
VEX.128.F3.0F38.W0 4B !(11):rrr:100 TILESTORED sibmem, tmm1
T}	A	V/N.E.	AMX-TILE	T{
Store a tile in sibmem as specified in tmm1.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="tilestored.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l l 
l l l l l l .
\fBOp/En\fP	\fBTuple\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
A	N/A	ModRM:r/m (w)	ModRM:reg (r)	N/A	N/A
.TE

.SH DESCRIPTION
This instruction is required to use SIB addressing. The index register
serves as a stride indicator. If the SIB encoding omits an index
register, the value zero is assumed for the content of the index
register.

.PP
This instruction stores a tile source of rows and columns as specified
by the tile configuration.

.PP
The TILECFG.start_row in the TILECFG data should be initialized to '0'
in order to store the entire tile and are set to zero on successful
completion of the TILESTORED instruction. TILESTORED is a restartable
instruction and the TILECFG.start_row will be non-zero when restartable
events occur during the instruction execution.

.PP
Only memory operands are supported and they can only be accessed using a
SIB addressing mode, similar to the V[P]GATHER*/V[P]SCATTER*
instructions.

.PP
Any attempt to execute the TILESTORED instruction inside an Intel TSX
transaction will result in a transaction abort.

.SH OPERATION
.EX
TILESTORED tsib, tsrc
start := tilecfg.start_row
membegin := tsib.base + displacement
// if no index register in the SIB encoding, the value zero is used.
stride := tsib.index << tsib.scale
while start < tdest.rows:
    memptr := membegin + start * stride
    write_memory(memptr, tsrc.colsb, tsrc.row[start])
    start := start + 1
zero_tilecfg_start()
// In the case of a memory fault in the middle of an instruction, the tilecfg.start_row := start
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="tilestored.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
TILESTORED void _tile_stored(__tile src, void *base, int stride);
.EE

.SH FLAGS AFFECTED
None.

.SH EXCEPTIONS
AMX-E3; see Section 2.10, “Intel® AMX Instruction Exception Classes,”
for details.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
