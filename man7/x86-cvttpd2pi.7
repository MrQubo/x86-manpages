'\" t
.nh
.TH "X86-CVTTPD2PI" "7" "December 2023" "Intel" "Intel x86-64 ISA Manual"
.SH NAME
CVTTPD2PI - CONVERT WITH TRUNCATION PACKED DOUBLE PRECISION FLOATING-POINT VALUES TO PACKEDDWORD INTEGERS
.TS
allbox;
l l l l l 
l l l l l .
\fBOpcode/Instruction\fP	\fBOp/En\fP	\fB64-Bit Mode\fP	\fBCompat/Leg Mode\fP	\fBDescription\fP
T{
66 0F 2C /r CVTTPD2PI mm, xmm/m128
T}	RM	Valid	Valid	T{
Convert two packer double precision floating-point values from xmm/m128 to two packed signed doubleword integers in mm using truncation.
T}
.TE

.SH INSTRUCTION OPERAND ENCODING  href="cvttpd2pi.html#instruction-operand-encoding"
class="anchor">¶

.TS
allbox;
l l l l l 
l l l l l .
\fBOp/En\fP	\fBOperand 1\fP	\fBOperand 2\fP	\fBOperand 3\fP	\fBOperand 4\fP
RM	ModRM:reg (w)	ModRM:r/m (r)	N/A	N/A
.TE

.SH DESCRIPTION
Converts two packed double precision floating-point values in the source
operand (second operand) to two packed signed doubleword integers in the
destination operand (first operand). The source operand can be an XMM
register or a 128-bit memory location. The destination operand is an MMX
technology register.

.PP
When a conversion is inexact, a truncated (round toward zero) result is
returned. If a converted result is larger than the maximum signed
doubleword integer, the floating-point invalid exception is raised, and
if this exception is masked, the indefinite integer value (80000000H) is
returned.

.PP
This instruction causes a transition from x87 FPU to MMX technology
operation (that is, the x87 FPU top-of-stack pointer is set to 0 and the
x87 FPU tag word is set to all 0s [valid]). If this instruction is
executed while an x87 FPU floating-point exception is pending, the
exception is handled before the CVTTPD2PI instruction is executed.

.PP
In 64-bit mode, use of the REX.R prefix permits this instruction to
access additional registers (XMM8-XMM15).

.SH OPERATION
.EX
DEST[31:0] := Convert_Double_Precision_Floating_Point_To_Integer32_Truncate(SRC[63:0]);
DEST[63:32] := Convert_Double_Precision_Floating_Point_To_Integer32_Truncate(SRC[127:64]);
.EE

.SH INTEL C/C++ COMPILER INTRINSIC EQUIVALENT  href="cvttpd2pi.html#intel-c-c++-compiler-intrinsic-equivalent"
class="anchor">¶

.EX
CVTTPD1PI __m64 _mm_cvttpd_pi32(__m128d a)
.EE

.SH SIMD FLOATING-POINT EXCEPTIONS  href="cvttpd2pi.html#simd-floating-point-exceptions"
class="anchor">¶

.PP
Invalid, Precision.

.SH OTHER MODE EXCEPTIONS
See Table 23-4, “Exception Conditions
for Legacy SIMD/MMX Instructions with FP Exception and 16-Byte
Alignment,” in the Intel® 64 and IA-32 Architectures Software
Developer’s Manual, Volume 3B.

.SH COLOPHON
This UNOFFICIAL, mechanically-separated, non-verified reference is
provided for convenience, but it may be
incomplete or
broken in various obvious or non-obvious ways.
Refer to Intel® 64 and IA-32 Architectures Software Developer’s
Manual
\[la]https://software.intel.com/en\-us/download/intel\-64\-and\-ia\-32\-architectures\-sdm\-combined\-volumes\-1\-2a\-2b\-2c\-2d\-3a\-3b\-3c\-3d\-and\-4\[ra]
for anything serious.

.br
This page is generated by scripts; therefore may contain visual or semantical bugs. Please report them (or better, fix them) on https://github.com/MrQubo/x86-manpages.
